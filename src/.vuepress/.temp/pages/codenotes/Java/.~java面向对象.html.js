export const data = JSON.parse("{\"key\":\"v-4d3c2d76\",\"path\":\"/codenotes/Java/.~java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html\",\"title\":\"前言\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"这本书励志与用这一本书讲透java的面向对象，其实面向对象是一个非常常见的场景在java里面，所以这个是每一个学习java要实现掌握的，并且详细掌握的，为了以后我们去学习一些框架，打下基础。 相信很多Java开发者，在最初接触Java的时候就听说过，Java是一种面向对象的开发语言，那么什么是面向对象呢？ 首先，所谓面向对象，其实是指软件工程中的一类编...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://gitee.com/lizifan233/mynotes/codenotes/Java/.~java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"小uの学习笔记\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"前言\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"这本书励志与用这一本书讲透java的面向对象，其实面向对象是一个非常常见的场景在java里面，所以这个是每一个学习java要实现掌握的，并且详细掌握的，为了以后我们去学习一些框架，打下基础。 相信很多Java开发者，在最初接触Java的时候就听说过，Java是一种面向对象的开发语言，那么什么是面向对象呢？ 首先，所谓面向对象，其实是指软件工程中的一类编...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}]]},\"excerpt\":\"\",\"headers\":[{\"level\":3,\"title\":\"什么是面向过程\",\"slug\":\"什么是面向过程\",\"link\":\"#什么是面向过程\",\"children\":[]},{\"level\":3,\"title\":\"什么是面向对象\",\"slug\":\"什么是面向对象-1\",\"link\":\"#什么是面向对象-1\",\"children\":[]},{\"level\":2,\"title\":\"new一个对象\",\"slug\":\"new一个对象\",\"link\":\"#new一个对象\",\"children\":[]},{\"level\":2,\"title\":\"初始化对象\",\"slug\":\"初始化对象\",\"link\":\"#初始化对象\",\"children\":[]},{\"level\":2,\"title\":\"关于对象\",\"slug\":\"关于对象\",\"link\":\"#关于对象\",\"children\":[]},{\"level\":2,\"title\":\"封装(Encapsulation)\",\"slug\":\"封装-encapsulation\",\"link\":\"#封装-encapsulation\",\"children\":[]},{\"level\":2,\"title\":\"继承(Inheritance)]\",\"slug\":\"继承-inheritance\",\"link\":\"#继承-inheritance\",\"children\":[{\"level\":3,\"title\":\"单继承\",\"slug\":\"单继承\",\"link\":\"#单继承\",\"children\":[]},{\"level\":3,\"title\":\"多继承\",\"slug\":\"多继承\",\"link\":\"#多继承\",\"children\":[]},{\"level\":3,\"title\":\"如何实现继承\",\"slug\":\"如何实现继承\",\"link\":\"#如何实现继承\",\"children\":[]},{\"level\":3,\"title\":\"练习\",\"slug\":\"练习\",\"link\":\"#练习\",\"children\":[]}]},{\"level\":2,\"title\":\"多态(Polymorphism)\",\"slug\":\"多态-polymorphism\",\"link\":\"#多态-polymorphism\",\"children\":[{\"level\":3,\"title\":\"单一职责原（single-responsibility-principle）)\",\"slug\":\"单一职责原-single-responsibility-principle\",\"link\":\"#单一职责原-single-responsibility-principle\",\"children\":[]},{\"level\":3,\"title\":\"开放封闭原则（Open-Closed principle\",\"slug\":\"开放封闭原则-open-closed-principle\",\"link\":\"#开放封闭原则-open-closed-principle\",\"children\":[]},{\"level\":3,\"title\":\"里氏替换原则（Liskov-Substitution Principle]\",\"slug\":\"里氏替换原则-liskov-substitution-principle\",\"link\":\"#里氏替换原则-liskov-substitution-principle\",\"children\":[]},{\"level\":3,\"title\":\"依赖倒置原则（Dependecy-Inversion Principle）\",\"slug\":\"依赖倒置原则-dependecy-inversion-principle\",\"link\":\"#依赖倒置原则-dependecy-inversion-principle\",\"children\":[]},{\"level\":3,\"title\":\"接口隔离原则（Interface-Segregation Principle）\",\"slug\":\"接口隔离原则-interface-segregation-principle\",\"link\":\"#接口隔离原则-interface-segregation-principle\",\"children\":[]},{\"level\":3,\"title\":\"包的作用域\",\"slug\":\"包的作用域\",\"link\":\"#包的作用域\",\"children\":[]},{\"level\":3,\"title\":\"导入包\",\"slug\":\"导入包\",\"link\":\"#导入包\",\"children\":[]},{\"level\":3,\"title\":\"包的最佳实践\",\"slug\":\"包的最佳实践\",\"link\":\"#包的最佳实践\",\"children\":[]},{\"level\":3,\"title\":\"01、局部变量\",\"slug\":\"_01、局部变量\",\"link\":\"#_01、局部变量\",\"children\":[]},{\"level\":3,\"title\":\"02、成员变量\",\"slug\":\"_02、成员变量\",\"link\":\"#_02、成员变量\",\"children\":[]},{\"level\":3,\"title\":\"03、静态变量\",\"slug\":\"_03、静态变量\",\"link\":\"#_03、静态变量\",\"children\":[]},{\"level\":3,\"title\":\"04、常量\",\"slug\":\"_04、常量\",\"link\":\"#_04、常量\",\"children\":[]},{\"level\":3,\"title\":\"01、Java中的方法是什么？\",\"slug\":\"_01、java中的方法是什么\",\"link\":\"#_01、java中的方法是什么\",\"children\":[]},{\"level\":3,\"title\":\"02、如何声明方法？\",\"slug\":\"_02、如何声明方法\",\"link\":\"#_02、如何声明方法\",\"children\":[]},{\"level\":3,\"title\":\"03、方法有哪几种？\",\"slug\":\"_03、方法有哪几种\",\"link\":\"#_03、方法有哪几种\",\"children\":[]},{\"level\":3,\"title\":\"04、什么是实例方法？\",\"slug\":\"_04、什么是实例方法\",\"link\":\"#_04、什么是实例方法\",\"children\":[]},{\"level\":3,\"title\":\"05、什么是静态方法？\",\"slug\":\"_05、什么是静态方法\",\"link\":\"#_05、什么是静态方法\",\"children\":[]},{\"level\":3,\"title\":\"06、什么是抽象方法？\",\"slug\":\"_06、什么是抽象方法\",\"link\":\"#_06、什么是抽象方法\",\"children\":[]},{\"level\":3,\"title\":\"07、方法重写与重载\",\"slug\":\"_07、方法重写与重载\",\"link\":\"#_07、方法重写与重载\",\"children\":[]},{\"level\":3,\"title\":\"什么是平台无关性\",\"slug\":\"什么是平台无关性\",\"link\":\"#什么是平台无关性\",\"children\":[]},{\"level\":3,\"title\":\"平台无关性的实现\",\"slug\":\"平台无关性的实现\",\"link\":\"#平台无关性的实现\",\"children\":[]},{\"level\":3,\"title\":\"小结\",\"slug\":\"小结\",\"link\":\"#小结\",\"children\":[]},{\"level\":3,\"title\":\"语言无关性\",\"slug\":\"语言无关性\",\"link\":\"#语言无关性\",\"children\":[]},{\"level\":3,\"title\":\"1、JNI：Java Native Interface\",\"slug\":\"_1、jni-java-native-interface\",\"link\":\"#_1、jni-java-native-interface\",\"children\":[]},{\"level\":3,\"title\":\"2、用 C 语言编写程序本地方法\",\"slug\":\"_2、用-c-语言编写程序本地方法\",\"link\":\"#_2、用-c-语言编写程序本地方法\",\"children\":[]},{\"level\":3,\"title\":\"3、JNI 调用 C 的流程图\",\"slug\":\"_3、jni-调用-c-的流程图\",\"link\":\"#_3、jni-调用-c-的流程图\",\"children\":[]},{\"level\":3,\"title\":\"4、native 关键字\",\"slug\":\"_4、native-关键字\",\"link\":\"#_4、native-关键字\",\"children\":[]},{\"level\":3,\"title\":\"01、创建构造方法的规则\",\"slug\":\"_01、创建构造方法的规则\",\"link\":\"#_01、创建构造方法的规则\",\"children\":[]},{\"level\":3,\"title\":\"02、默认构造方法\",\"slug\":\"_02、默认构造方法\",\"link\":\"#_02、默认构造方法\",\"children\":[]},{\"level\":3,\"title\":\"3、有参构造方法\",\"slug\":\"_3、有参构造方法\",\"link\":\"#_3、有参构造方法\",\"children\":[]},{\"level\":3,\"title\":\"04、重载构造方法\",\"slug\":\"_04、重载构造方法\",\"link\":\"#_04、重载构造方法\",\"children\":[]},{\"level\":3,\"title\":\"05、构造方法和方法的区别\",\"slug\":\"_05、构造方法和方法的区别\",\"link\":\"#_05、构造方法和方法的区别\",\"children\":[]},{\"level\":3,\"title\":\"06、复制对象\",\"slug\":\"_06、复制对象\",\"link\":\"#_06、复制对象\",\"children\":[]},{\"level\":3,\"title\":\"1. 修饰类\",\"slug\":\"_1-修饰类\",\"link\":\"#_1-修饰类\",\"children\":[]},{\"level\":3,\"title\":\"2. 修饰方法和变量\",\"slug\":\"_2-修饰方法和变量\",\"link\":\"#_2-修饰方法和变量\",\"children\":[]},{\"level\":3,\"title\":\"01、定义抽象类\",\"slug\":\"_01、定义抽象类\",\"link\":\"#_01、定义抽象类\",\"children\":[]},{\"level\":3,\"title\":\"02、抽象类的特征\",\"slug\":\"_02、抽象类的特征\",\"link\":\"#_02、抽象类的特征\",\"children\":[]},{\"level\":3,\"title\":\"03、抽象类的应用场景\",\"slug\":\"_03、抽象类的应用场景\",\"link\":\"#_03、抽象类的应用场景\",\"children\":[]},{\"level\":3,\"title\":\"04、抽象类总结\",\"slug\":\"_04、抽象类总结\",\"link\":\"#_04、抽象类总结\",\"children\":[]},{\"level\":3,\"title\":\"术语\",\"slug\":\"术语\",\"link\":\"#术语\",\"children\":[]},{\"level\":3,\"title\":\"接口继承\",\"slug\":\"接口继承\",\"link\":\"#接口继承\",\"children\":[]},{\"level\":3,\"title\":\"继承关系\",\"slug\":\"继承关系\",\"link\":\"#继承关系\",\"children\":[]},{\"level\":3,\"title\":\"01、定义接口\",\"slug\":\"_01、定义接口\",\"link\":\"#_01、定义接口\",\"children\":[]},{\"level\":3,\"title\":\"02、接口的作用\",\"slug\":\"_02、接口的作用\",\"link\":\"#_02、接口的作用\",\"children\":[]},{\"level\":3,\"title\":\"03、接口的三种模式\",\"slug\":\"_03、接口的三种模式\",\"link\":\"#_03、接口的三种模式\",\"children\":[]},{\"level\":3,\"title\":\"04、抽象类和接口的区别\",\"slug\":\"_04、抽象类和接口的区别\",\"link\":\"#_04、抽象类和接口的区别\",\"children\":[]},{\"level\":3,\"title\":\"1）成员内部类\",\"slug\":\"_1-成员内部类\",\"link\":\"#_1-成员内部类\",\"children\":[]},{\"level\":3,\"title\":\"2）局部内部类\",\"slug\":\"_2-局部内部类\",\"link\":\"#_2-局部内部类\",\"children\":[]},{\"level\":3,\"title\":\"3）匿名内部类\",\"slug\":\"_3-匿名内部类\",\"link\":\"#_3-匿名内部类\",\"children\":[]},{\"level\":3,\"title\":\"4）静态内部类\",\"slug\":\"_4-静态内部类\",\"link\":\"#_4-静态内部类\",\"children\":[]}]},{\"level\":2,\"title\":\"this\",\"slug\":\"this\",\"link\":\"#this\",\"children\":[{\"level\":3,\"title\":\"01、 指向当前对象\",\"slug\":\"_01、-指向当前对象\",\"link\":\"#_01、-指向当前对象\",\"children\":[]},{\"level\":3,\"title\":\"02、调用当前类的方法\",\"slug\":\"_02、调用当前类的方法\",\"link\":\"#_02、调用当前类的方法\",\"children\":[]},{\"level\":3,\"title\":\"03、调用当前类的构造方法\",\"slug\":\"_03、调用当前类的构造方法\",\"link\":\"#_03、调用当前类的构造方法\",\"children\":[]},{\"level\":3,\"title\":\"04、作为参数在方法中传递\",\"slug\":\"_04、作为参数在方法中传递\",\"link\":\"#_04、作为参数在方法中传递\",\"children\":[]},{\"level\":3,\"title\":\"05、作为参数在构造方法中传递\",\"slug\":\"_05、作为参数在构造方法中传递\",\"link\":\"#_05、作为参数在构造方法中传递\",\"children\":[]},{\"level\":3,\"title\":\"06、作为方法的返回值\",\"slug\":\"_06、作为方法的返回值\",\"link\":\"#_06、作为方法的返回值\",\"children\":[]}]},{\"level\":2,\"title\":\"super\",\"slug\":\"super\",\"link\":\"#super\",\"children\":[{\"level\":3,\"title\":\"01、静态变量\",\"slug\":\"_01、静态变量\",\"link\":\"#_01、静态变量\",\"children\":[]},{\"level\":3,\"title\":\"02、静态方法\",\"slug\":\"_02、静态方法\",\"link\":\"#_02、静态方法\",\"children\":[]},{\"level\":3,\"title\":\"03、静态代码块\",\"slug\":\"_03、静态代码块\",\"link\":\"#_03、静态代码块\",\"children\":[]},{\"level\":3,\"title\":\"04、静态内部类\",\"slug\":\"_04、静态内部类\",\"link\":\"#_04、静态内部类\",\"children\":[]}]}],\"readingTime\":{\"minutes\":138.66,\"words\":41597},\"filePathRelative\":\"codenotes/Java/.~java面向对象.md\"}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
