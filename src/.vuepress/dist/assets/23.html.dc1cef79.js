import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{r as p,o as e,c as o,a as n,b as s,d as c,e as i}from"./app.c5b3201b.js";const l={},u=i(`<p>在 JavaScript 中处理日期和时间时，开发人员经常发现自己正在努力解决内置对象的复杂性。<code>Date</code></p><p>这就是像 DayJS 这样的外部库发挥作用的地方，它提供了大量优势，使处理日期和时间变得轻而易举。</p><p>在本文中，我将向您介绍 DayJS 以及这个小型库如何极大地提高您的代码库和生产力。</p><p>以下是我们将介绍的内容：</p><ul><li>如何安装 DayJS 库</li><li>如何在 JavaScript 中使用日期和时间</li><li>如何利用 DayJS 库使这些函数更轻松、更简洁、更易读</li><li>在原版JS和DayJS中执行功能之间的比较</li><li>DayJS 库中可用的有用函数</li></ul><h2 id="javascript-中日期对象的快速介绍" tabindex="-1"><a class="header-anchor" href="#javascript-中日期对象的快速介绍" aria-hidden="true">#</a> JavaScript 中日期对象的快速介绍</h2><p>您可以在 JavaScript 中使用对象来处理日期和时间段。但有时处理对象可能很麻烦，并且日期/时间可能难以操作。<code>Date Date</code></p><p>让我们看看如何在 JavaScript 中获取今天的日期：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将给我们一个 ISO 日期（这是一种通用日期格式），如下所示：</p><p><code>2023-08-29T04:07:34.791Z</code></p><p>因此，您可以在 中看到，标记了日期的时间部分的开始点。那么下面的数字是 。末尾表示没有指定时区，应使用 UTC 时区</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>year-month-date T hours:minutes:seconds.fractional seconds Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="dayjs-库" tabindex="-1"><a class="header-anchor" href="#dayjs-库" aria-hidden="true">#</a> DayJS 库</h2><p>现在，我并不是说使用日期和时间的其他方法是错误的，但由于它们的复杂性，对我来说，它们似乎不值得麻烦。</p><p>在处理代码中的日期和时间时，我想要一个易于使用的开箱即用解决方案，以增加代码的可读性并提供灵活性。</p><p>这就是DayJS发挥作用的地方。这是在 JavaScript 中以库的形式处理日期和时间的另一种方式。</p><p>与其他库不同，该库的面积非常小。</p><h2 id="如何安装-dayjs-库" tabindex="-1"><a class="header-anchor" href="#如何安装-dayjs-库" aria-hidden="true">#</a> 如何安装 DayJS 库</h2><p>DayJS 可以使用以下命令通过 yarn 或 npm 包管理器轻松安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// <span class="token function">yarn</span>
<span class="token function">yarn</span> <span class="token function">add</span> dayjs

//node
<span class="token function">npm</span> <span class="token function">install</span> dayjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要在文件中使用 DayJS，只需使用常规导入语法导入它：<code>.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">&#39;dayjs&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="dayjs-api-和基本语法" tabindex="-1"><a class="header-anchor" href="#dayjs-api-和基本语法" aria-hidden="true">#</a> DayJS API 和基本语法</h2><p>首先我们来看用js原生来实现一个输出。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">formatDate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> hours <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> minutes <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> seconds <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">var</span> formattedDay <span class="token operator">=</span> day <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> day <span class="token operator">:</span> day<span class="token punctuation">;</span>
    <span class="token keyword">var</span> formattedMonth <span class="token operator">=</span> month <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">+</span> month <span class="token operator">:</span> month<span class="token punctuation">;</span>


    <span class="token keyword">return</span> formattedDay <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> formattedMonth <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> year<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">var</span> currentDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> formatted <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>currentDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formatted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出29/08/2023</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们来看如何用dayjs来简化操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">&quot;dayjs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> currentDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> formattedDate <span class="token operator">=</span> currentDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formattedDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用了实用程序函数。此函数允许我们根据通用的 JS 格式语法传递我们首选的日期格式。<code>dayjs.format()</code></p><h2 id="dayjs-中的不可变性和不可变对象" tabindex="-1"><a class="header-anchor" href="#dayjs-中的不可变性和不可变对象" aria-hidden="true">#</a> DayJS 中的不可变性和不可变对象</h2><p>相比之下，不变性意味着对象的状态一旦创建就无法更改，因为它不会对实际对象本身进行“更改”操作。</p><p>使用不可变对象时，可以使用修改的值创建新实例，而不是更改原始实例。这有助于确保您的数据在整个程序中保持一致且可预测。</p><p>不可变数据结构通常在函数式编程中受到青睐，并且可以产生更健壮、更易于维护的代码。</p><p>当您对 DayJS 对象执行操作（例如加减时间）时，库会返回一个具有修改值的新实例，而原始实例保持不变。</p><p>此方法可防止对数据进行意外更改，并降低引入难以跟踪的错误的风险。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> originalDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&quot;2023-07-16&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> modifiedDate <span class="token operator">=</span> originalDate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>originalDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;YYYY-MM-DD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: &quot;2023-07-16&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>modifiedDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;YYYY-MM-DD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: &quot;2023-07-17&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 DayJS，您可以使用各种可用函数随意修改原始日期对象，而无需丢弃原始值。这意味着可以随时使用/访问它。</p><h2 id="解析灵活性" tabindex="-1"><a class="header-anchor" href="#解析灵活性" aria-hidden="true">#</a> 解析灵活性</h2><p>解析日期字符串在普通 JavaScript 中可能是一个真正的挑战，尤其是在处理非标准格式时。</p><p>DayJS 提供了一组广泛的解析选项，使其在处理各种输入格式时更加通用。在处理来自不同源或可能具有不同日期表示形式的 API 的数据时，此功能特别有价值。</p><ul><li>用户输入：处理用户输入（如表单中的日期）时，用户可能会以各种格式输入日期。DayJS的解析功能使您能够准确、一致地处理这些输入。</li><li>数据库交互：数据库可能以不同的格式或时区存储日期。DayJS的解析可以帮助正确解释这些日期，以便在您的应用程序中使用。</li><li>API 响应：API 通常以标准化格式（如 ISO 8601）返回日期和时间数据，但它们也可能有所不同。DayJS 使您能够轻松解析 API 响应，确保应用程序中的数据表示正确。</li></ul><p>这确实需要从 DayJS 添加插件——这可以很容易地导入。<code>customParseFormat</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">&quot;dayjs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> CustomParseFormat <span class="token keyword">from</span> <span class="token string">&quot;dayjs/plugin/customParseFormat&quot;</span><span class="token punctuation">;</span>

dayjs<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>CustomParseFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">&quot;dayjs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> customParseFormat <span class="token keyword">from</span> <span class="token string">&#39;dayjs/plugin/customParseFormat.js&#39;</span>
dayjs<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>customParseFormat<span class="token punctuation">)</span>

<span class="token keyword">const</span> customFormat <span class="token operator">=</span> <span class="token string">&#39;YYYY/MM/DD HH:mm:ss&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> dateStr <span class="token operator">=</span> <span class="token string">&#39;2023/08/23 14:37:41&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parsedDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> customFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parsedDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何对日期和时间进行加减" tabindex="-1"><a class="header-anchor" href="#如何对日期和时间进行加减" aria-hidden="true">#</a> 如何对日期和时间进行加减</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2023-08-21T16:43:33.000Z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2023-08-11T16:43:33</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="如何在-dayjs-中比较日期" tabindex="-1"><a class="header-anchor" href="#如何在-dayjs-中比较日期" aria-hidden="true">#</a> 如何在 DayJS 中比较日期</h2><p>对于 JavaScript 对象，您通常使用 （&gt;） 或 （&lt;） 运算符执行此操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;2023-07-16&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;2023-07-18&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>date1 <span class="token operator">&lt;</span> date2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Date 1 is before Date 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Date 1 is after Date 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这看起来很容易阅读和使用，但 DayJS 提供了一个很棒的 API 来处理日期比较，可以更容易地立即阅读。</p><p>现在假设我们要检查 date1 是否早于 date2 – 我们可以使用 API 函数。我和许多其他开发人员发现代码实际在做什么要清楚得多，而不必考虑代码使用的是哪个运算符。<code>isBefore()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Date 1 is before date 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Date 1 is after date 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以在函数中使用类似的结果，检查 date1 是否在 date2 <strong>之后</strong>。<code>isAfter()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Date 1 is after date 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Date 1 is before date 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>//check if date1 is the same as date2
if (date1.isSame(date2)) {
  console.log(&quot;Date 1 is exactly the same as date 2&quot;);
} else {
  console.log(&quot;Date 1 is not exactly the same as date 2&quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们要检查日期是否介于两个范围之间。同样，DayJS通过该功能使这变得更容易。使用该函数还为我们带来了其他几个好处：<code>isBetween()\`\`isBetween()</code></p><ul><li>轻松检查日期范围：您可以使用 轻松检查日期是否在指定范围内，而不是手动比较日期和执行算术运算。<code>isBetween()</code></li><li>可读性和可维护性：使用可使代码更具可读性和可理解性。它清楚地传达了检查日期是否在某个范围内的意图。<code>isBetween()</code></li><li>支持包含和排除范围：DayJS 中的函数允许您指定开始日期和结束日期是包含在范围中还是排除在范围之外。这使您可以灵活地定义日期间隔。<code>isBetween()</code></li></ul><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> targetDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&#39;2023-08-15&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> startDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&#39;2023-08-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> endDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&#39;2023-08-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isWithinRange <span class="token operator">=</span> targetDate<span class="token punctuation">.</span><span class="token function">isBetween</span><span class="token punctuation">(</span>startDate<span class="token punctuation">,</span> endDate<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;[]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isWithinRange<span class="token punctuation">)</span> <span class="token comment">// Output: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如您所见，函数 、 、 并更清楚地说明了代码正在检查的内容。<code>isBefore\`\`isAfter\`\`isSame\`\`isBetween</code></p><p>拥有如此冗长的名称表明了函数正在做什么的明确意图（与JavaScript使用运算符或数学转换的内置方法相反）。API 函数的清晰简洁的性质可能对初级开发人员或只是浏览代码时有所帮助。</p><p>这在 DayJS 函数中肯定更为明显，例如：</p><ul><li><code>isYesterday()</code></li><li><code>isTomorrow()</code></li><li><code>isToday()</code></li></ul><h2 id="如何获得两个日期之间的差异" tabindex="-1"><a class="header-anchor" href="#如何获得两个日期之间的差异" aria-hidden="true">#</a> 如何获得两个日期之间的差异</h2><p>该函数使获取两个日期之间的差异变得如此简单。它可以向我们显示距离特定日期和时间有多少天、几周、几小时。您可以使用该功能完成所有这些操作。<code>diff()</code></p><p>我们来看看这个函数：<code>diff</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date1 <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&quot;2019-01-25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> date2 <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&quot;2018-06-05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> differenceInMilliseconds <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">diff</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>differenceInMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: // 20214000000 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以让他指定输出的单位</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date1 <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&quot;2023-01-25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> date2 <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&quot;2022-06-05&quot;</span><span class="token punctuation">)</span>
date1<span class="token punctuation">.</span><span class="token function">diff</span><span class="token punctuation">(</span>date2<span class="token punctuation">,</span> <span class="token string">&quot;month&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7 (months)</span>

<span class="token keyword">const</span> date1 <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&quot;2023-08-25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
date1<span class="token punctuation">.</span><span class="token function">diff</span><span class="token punctuation">(</span><span class="token string">&quot;2023-08-27&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下， 会将结果截断为零小数位，返回一个整数。如果你想要一个浮点数，传递 true 作为第三个参数，这将给你一个更准确的差值。<code>diff()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date1 <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&quot;2023-01-25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
date1<span class="token punctuation">.</span><span class="token function">diff</span><span class="token punctuation">(</span><span class="token string">&quot;2022-06-05&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;month&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7.645161290322581</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何获取时间段的开始或结束" tabindex="-1"><a class="header-anchor" href="#如何获取时间段的开始或结束" aria-hidden="true">#</a> 如何获取时间段的开始或结束</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>startOf\`并且是 DayJS 库中另外两个很棒的函数。它们允许您轻松返回日期期间的开始和结束。\`endOf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，您可以获取一天，一周，一个月或一年的开始/结束。当需要计算一个月还剩多少天时，这可能很方便。</p><p>让我们看看如何使用它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> startOfDay <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">&quot;day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00:00:00 of today</span>

<span class="token comment">// or given date</span>
<span class="token keyword">const</span> startOfGivenDate <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token string">&quot;2023-08-12T15:00:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">&quot;day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> startOfWeek <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">&quot;week&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 00:00:00 first day of the week (locale aware)</span>
<span class="token keyword">const</span> startOfYear <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">&quot;year&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1st Jan 2023 00:00:00</span>

<span class="token keyword">const</span> endOfDay <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">&quot;day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 23:59:59 of today</span>
<span class="token keyword">const</span> endOfWeek <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">&quot;week&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 23:59:59 of last day of week (locale aware)</span>
<span class="token keyword">const</span> endOfYear <span class="token operator">=</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">&quot;year&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 31 Dec 2023 23:59:59</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p>本文的最终目标是重点介绍一个有用的库，该库使使用日期和时间变得更加容易。该代码比JavaScript中内置的标准Date对象更简洁，更易于阅读。</p>`,79),d={href:"https://dayjs.fenxianglu.cn/",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"官网进行查看",-1);function k(v,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("如果你想了解更多的细节，可以去"),n("a",d,[s("Day.js中文网 (fenxianglu.cn)"),c(a)])]),r])}const g=t(l,[["render",k],["__file","23.html.vue"]]);export{g as default};
