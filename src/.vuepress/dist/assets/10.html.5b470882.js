import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c,e as a}from"./app.c5b3201b.js";const o={},h=a('<h3 id="集合框架底层数据结构总结" tabindex="-1"><a class="header-anchor" href="#集合框架底层数据结构总结" aria-hidden="true">#</a> 集合框架底层数据结构总结</h3><p>先来看一下 <code>Collection</code> 接口下面的集合。</p><h4 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h4><p><code>ArrayList</code>：<code>Object[]</code> 数组 <code>Vector</code>：<code>Object[]</code> 数组 <code>LinkedList</code>：双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)</p><h4 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h4><p><code>HashSet</code>(无序，唯一): 基于 <code>HashMap</code> 实现的，底层采用 <code>HashMap</code> 来保存元素 <code>LinkedHashSet</code>: <code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，并且其内部是通过 <code>LinkedHashMap</code> 来实现的。有点类似于我们之前说的 <code>LinkedHashMap</code> 其内部是基于 <code>HashMap</code> 实现一样，不过还是有一点点区别的 <code>TreeSet</code>(有序，唯一): 红黑树(自平衡的排序二叉树)</p><h4 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> Queue</h4><p><code>PriorityQueue</code>: <code>Object[]</code> 数组来实现二叉堆 <code>ArrayQueue</code>: <code>Object[]</code> 数组 + 双指针</p><p>再来看看 <code>Map</code> 接口下面的集合。</p><h4 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h4><p><code>HashMap</code>：JDK1.8 之前 <code>HashMap</code> 由数组+链表组成的，数组是 <code>HashMap</code> 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间 <code>LinkedHashMap</code>：<code>LinkedHashMap</code> 继承自 <code>HashMap</code>，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，<code>LinkedHashMap</code> 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。 <code>Hashtable</code>：数组+链表组成的，数组是 <code>Hashtable</code> 的主体，链表则是主要为了解决哈希冲突而存在的 <code>TreeMap</code>：红黑树（自平衡的排序二叉树）</p>',11),t=[h];function s(r,i){return d(),c("div",null,t)}const l=e(o,[["render",s],["__file","10.html.vue"]]);export{l as default};
