import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e as p}from"./app.c5b3201b.js";const e={},t=p(`<h3 id="jdk9新特性-模块化开发" tabindex="-1"><a class="header-anchor" href="#jdk9新特性-模块化开发" aria-hidden="true">#</a> jdk9新特性-模块化开发</h3><p>我们首先来看1.8以前的一个结构。</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822784.png" alt="image-20230831205042194" loading="lazy"></p><p>到了jdk9后，外面又添加了一个结构</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822889.png" alt="image-20230831205100992" loading="lazy"></p><p>通过这层，我们可以对包进行配置，例如我们写了一个工具类，jar包。有些类需要暴露出去，有的是需要内部用的，以前很难做到，现在我们通过模块化就可以来实现这个功能。</p><p>下面我们来举个例子，例如我们想要在模块b里面引入模块a的Test1.我们可以发现，idea里面有个增加对模块的依赖。然后进行导入就可以了。这个是idea自带的功能，和我们这里说的<strong>没有关系</strong></p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822432.png" alt="image-20230831211750667" loading="lazy"></p><p>这个实质就是<strong>在pom里面进行操作了</strong>可以看下面的图，我们可以看到在pom文件中</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822884.png" alt="image-20230831212035921" loading="lazy"></p><p>我们来看java9中的模块化是怎么样的</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822989.png" alt="image-20230831212752310" loading="lazy"></p><p>我们再Test2中右击创建，可以发现他是自动的创建到了根目录下</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822782.png" alt="image-20230831212834822" loading="lazy"></p><p>之后我们再另外一个模块也创建。</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822323.png" alt="image-20230831212941908" loading="lazy"></p><p>发现之前可以用的东西已经报错了。</p><p>之后我们用idae的自动更正</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822421.png" alt="image-20230831213003691" loading="lazy"></p><p>这个时候我们发现<strong>被调用方</strong>：</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822319.png" alt="image-20230831213035825" loading="lazy"></p><p>这个对应的就是包路径</p><p>之后我们一一用这个方法进行纠错。</p><p>我们发现我们的调用方</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822221.png" alt="image-20230831213147439" loading="lazy"></p><p>有了这样的。</p><p>也就是说目前，被调用方：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token namespace">testa</span> <span class="token punctuation">{</span>
    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>xiaou<span class="token punctuation">.</span>testa<span class="token punctuation">.</span>test1</span><span class="token punctuation">;</span>
    <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>xiaou<span class="token punctuation">.</span>testa<span class="token punctuation">.</span>test2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用方：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">module</span> <span class="token namespace">testb</span> <span class="token punctuation">{</span>
    <span class="token keyword">requires</span> <span class="token namespace">testa</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模块话说白了就是这样的。</p><p>被调用方可以用exports加包名，把想要被调用的包给exports出去</p><p>requires也是一样的。如果你需要不同的模块，就继续进行添加就可以了。下面我们来进行一个总结</p><ul><li>使用moudule-info.java来声明一个模块，一个模块只能有一个文件，且在顶层包同目录下</li><li>使用exports来声明可以被外部引用的包可以有多个exports语句</li><li>使用requires来声明依赖的外部的模块可以有多个requires语句</li></ul><p>这个的使用不是很多，我们可以在一些jar包中发现</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822172.png" alt="image-20230831213921386" loading="lazy"></p><h3 id="jdk10新特性-var局部变量推导" tabindex="-1"><a class="header-anchor" href="#jdk10新特性-var局部变量推导" aria-hidden="true">#</a> jdk10新特性-var局部变量推导</h3><ul><li>必须能推导出实际类型</li><li>只能用于局部变量</li></ul><p>例如我们之前要去new一个变量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Test1</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们都是这样写的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> test11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们使用var就可以这样写，这里注意的是必须要是一个能推导出实际类型的</p><p>例如下面的这个初始化就是错误的</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822627.png" alt="image-20230831214217251" loading="lazy"></p><p>需要注意的是null也是错误的</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822239.png" alt="image-20230831214301207" loading="lazy"></p><p>下面我们来看只能用于局部变量。</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822549.png" alt="image-20230831214331686" loading="lazy"></p><p>我们可以发现，这个是无法解析的。</p><p>这个就是一个看个人习惯的，我反正不是那么推荐用var</p><p>很关键的一点。这个不利于共同的开发性。同时我也认为，强语言性也是java的优秀的特点之一。</p><h3 id="jdk11新特性-单文件程序" tabindex="-1"><a class="header-anchor" href="#jdk11新特性-单文件程序" aria-hidden="true">#</a> jdk11新特性-单文件程序</h3><p>例如有这样的一个程序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xiaou<span class="token punctuation">.</span>testa</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestB</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们平常用命令行要是运行的话，是需要先去javac去编译的。</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822770.png" alt="image-20230831214809081" loading="lazy"></p><p>这个也是一个基本上用不到的内容。就不过多的讲解</p><h3 id="jdk11新特性-shebang脚本" tabindex="-1"><a class="header-anchor" href="#jdk11新特性-shebang脚本" aria-hidden="true">#</a> jdk11新特性-shebang脚本</h3><ul><li>#！符号叫做shebang(shell脚本的开头)</li><li>#!/bin/bash(以此开头的文件，在执行的时实际调用/bin/bash程序来执行)</li></ul><p>例如这样，我们复制一下刚才的那个</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822776.png" alt="image-20230831215119200" loading="lazy"></p><p>去掉他的.java</p><p>把她改成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token operator">!</span><span class="token class-name">C</span><span class="token operator">:</span>\\<span class="token class-name">Program</span> <span class="token class-name">Files</span>\\<span class="token class-name">Java</span>\\jdk<span class="token operator">-</span><span class="token number">17.0</span><span class="token number">.5</span>\\bin\\java <span class="token operator">--</span>source <span class="token number">11</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestB</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个样子，之后我们来运行这个脚本</p><p>因为这个是linux所支持的东西，所以说windows的cmd和powershell是无法运行的，这里用到的是git bash来进行模拟linux上的操作可以看到就执行出来了</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822773.png" alt="image-20230831222207103" loading="lazy"></p><h3 id="jdk14新特性-文本块" tabindex="-1"><a class="header-anchor" href="#jdk14新特性-文本块" aria-hidden="true">#</a> jdk14新特性-文本块</h3><p>平时我们写的字符串都是单行的，文本块就是一个多行的文本快。例如json/html/sql等，都需要用到<strong>多行字符串</strong>。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">&quot;test&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如这样的json。我们再之前。</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822573.png" alt="image-20230831222520632" loading="lazy"></p><p>可以发现idae是自动给进行换行等操作的。</p><p>在jdk14之后</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822673.png" alt="image-20230901075631687" loading="lazy"></p><p>就可以用&quot;&quot;&quot; &quot;&quot;&quot;里面来进行书写了</p><h3 id="jdk14新特性-instanceof增强" tabindex="-1"><a class="header-anchor" href="#jdk14新特性-instanceof增强" aria-hidden="true">#</a> jdk14新特性-instanceof增强</h3><p>一般情况下我们要对一个不确定的类型进行赋值的时候，一般就是这样进行书写。先判断是否属于某个类型，之后再进行强转赋值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> a<span class="token operator">=</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span>  <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> b<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增强之后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个就直接相当于把a赋给b</p><h3 id="jdk16新特性-record类" tabindex="-1"><a class="header-anchor" href="#jdk16新特性-record类" aria-hidden="true">#</a> jdk16新特性-record类</h3><p>可以看到下面是我们平常写一个dto层的数据的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xiaou<span class="token punctuation">.</span>testa</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TestDto</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822184.png" alt="image-20230901080558665" loading="lazy"></p><p>我们创建一个record类。只要把想要的参数写在括号里面，就可以了。其他的都不用管了、</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">TestRecord</span> testRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestRecord</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//只能获取值，不能获取</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testRecord<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testRecord<span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的就是只能获取值，不能获取。</p><h3 id="jdk17新特性-sealed类" tabindex="-1"><a class="header-anchor" href="#jdk17新特性-sealed类" aria-hidden="true">#</a> jdk17新特性-sealed类</h3><ul><li>痛点：类的继承很难管理，使用sealed可以来显示的管理</li><li>父类如果是sealed类，则必须至少有一个子类</li><li>sealed类的子类，必须是fina，sealed，non-sealed之一</li></ul><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822825.png" alt="image-20230901081208196" loading="lazy"></p><p>我们看到报错。<img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822983.png" alt="image-20230901081224485" loading="lazy"></p><p>之后我们创建一个新的类</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822984.png" alt="image-20230901081253325" loading="lazy"></p><p>之后我们对父类进行一个显示管理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Jiawa1</span> <span class="token keyword">permits</span> jiawa2 <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后我们发现jiawa2有一个报错</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202309010822697.png" alt="image-20230901081320598" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> jiawa2 <span class="token keyword">extends</span> <span class="token class-name">Jiawa1</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现这样就可以了</p><p>之后如果我们想要jiawa3继续继承jiawa2</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> jiawa2 <span class="token keyword">extends</span> <span class="token class-name">Jiawa1</span> <span class="token keyword">permits</span> jiawa3 <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">non-sealed</span> <span class="token keyword">class</span> jiawa3 <span class="token keyword">extends</span> jiawa2<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以了</p><p>当然也可以写成non-sealed。这样我们的jiawa4去继承jiawa3的时候</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> jiawa4 <span class="token keyword">extends</span> jiawa3 <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以直接普通的进行继承了。</p><h3 id="jdk17新特性-switch增强" tabindex="-1"><a class="header-anchor" href="#jdk17新特性-switch增强" aria-hidden="true">#</a> jdk17新特性-switch增强</h3><blockquote><p>这个是17的预览版有的，正式的17是没有的</p></blockquote><p>以前我们想要判断类型的时候</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Object</span> a<span class="token operator">=</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要很多的if</p><p>现在有了switch增强后</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">String</span> b <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Integer</span> b <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Long</span> b <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected value: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样进行书写就可以了。</p>`,117),c=[t];function o(i,l){return a(),s("div",null,c)}const r=n(e,[["render",o],["__file","JDK新特性.html.vue"]]);export{r as default};
