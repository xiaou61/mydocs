import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as t,e as n}from"./app.c5b3201b.js";const p={},c=n('<h2 id="什么是字节码-采用字节码的好处是什么" tabindex="-1"><a class="header-anchor" href="#什么是字节码-采用字节码的好处是什么" aria-hidden="true">#</a> 什么是字节码?采用字节码的好处是什么?</h2><p><strong>这个问题，面试官可以扩展提问，Java 是编译执行的语言，还是解释执行的语言?</strong></p><p>Java之所以可以“一次编译，到处运行”，一是因为JVM针对各种操作系统、平台都进行了定制，二是因为无论在什么平台，都可以编译生成固定格式的字节码（.class文件）供JVM使用。因此，也可以看出字节码对于Java生态的重要性。</p><p>之所以被称之为字节码，是因为字节码文件由十六进制值组成，而JVM以两个十六进制值为一组，即以字节为单位进行读取。在Java中一般是用javac命令编译源代码为字节码文件，一个.java文件从编译到运行的示例如图所示。</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202308100945646.png" alt="Java程序转变为机器代码的过程" loading="lazy"></p><p>Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以Java程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，因此，Java程序无须重新编译便可在多种不同的计算机上运行。</p><p>我们需要格外注意的是 <code>.class-&gt;机器码</code> 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 <strong>Java 是编译与解释共存的语言</strong> 。</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202308100946221.png" alt="Java程序转变为机器代码的过程" loading="lazy"></p><blockquote><p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用</p></blockquote><p>JDK、JRE、JVM、JIT 这四者的关系如下图所示。</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202308100947213.png" alt="JDK、JRE、JVM、JIT 这四者的关系" loading="lazy"></p><p>下面这张图是 JVM 的大致结构模型。</p><p><img src="https://xiaou-1305448902.cos.ap-nanjing.myqcloud.com/img/202308100947000.png" alt="JVM 的大致结构模型" loading="lazy"></p>',13),i=[c];function s(e,l){return o(),t("div",null,i)}const r=a(p,[["render",s],["__file","4.html.vue"]]);export{r as default};
