import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{r as o,o as c,c as l,a as n,b as a,d as t,e as p}from"./app.c5b3201b.js";const i={},u=p(`<p>先让我来解释一下什么是前端框架。所谓的前端框架，就是一种能够让我们避免去写常规的HTML和JavaScript代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cool-para<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> coolPara <span class="token operator">=</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;cool-para&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  el<span class="token punctuation">.</span>innerText <span class="token operator">=</span> coolPara<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而是让我们能够编写出像这样简约的HTML和JavaScript代码（Vue）：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> coolPara <span class="token operator">=</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ coolPara }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者是下面这个(react)</p><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>export default function Para() {
  const coolPara = &#39;Lorem ipsum&#39;;
  return &lt;p&gt;{ coolPara }&lt;/p&gt;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一个框架的优点是显而易见的。记住诸如document、innerText和getElementById等单词或短语是很困难的。当然看玩笑的，这个不是主要的原因。</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><h3 id="reactivity-✨" tabindex="-1"><a class="header-anchor" href="#reactivity-✨" aria-hidden="true">#</a> Reactivity ✨</h3><p><em>第一个主要</em>原因是，在第二个和第三个例子中， 我们可以只设置或更新变量的值，标记（即元素）就会更新，而无需显式设置其 .<code>coolPara\`\`&lt;p&gt;\`\`innerText</code></p><p>这称为<em>反应性</em>，UI 与这样的数据相关联 仅更改数据即可更新 UI 的方式。</p><h3 id="composability-✨" tabindex="-1"><a class="header-anchor" href="#composability-✨" aria-hidden="true">#</a> Composability ✨</h3><p><em>第二个主要</em>原因是能够定义组件和 重用它，而不必在每次我们需要使用它时重新定义它。这 称为<em>可组合性</em>。</p><p>常规HTML + JavaScript默认没有这个。所以 以下代码<strong>不会</strong>执行应有的操作：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Defining the component --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cool-para<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>content</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- Using the component --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cool-para</span><span class="token punctuation">&gt;</span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cool-para</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反应性和可组合性是Vue、React等常见前端框架给我们的两个主要优势。</p><p>这些抽象不是免费提供的，我们必须预先加载一堆框架特定的概念，处理它们在以难以解释的神奇方式工作时出现的缺陷，更不用说，还有一大堆容易出错的依赖项。</p><p>但是，事实证明，使用现代Web API来实现这两点并不难。而且，对于大多数用例，我们可能实际上并不需要使用通常的框架以及它们的复杂性的混乱。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><h3 id="reactivity" tabindex="-1"><a class="header-anchor" href="#reactivity" aria-hidden="true">#</a> Reactivity</h3><p>解释反应性的简单语句是，<em>当数据更新时，自动更新 UI</em>。</p><p>第一部分是知道<em>数据何时更新</em>。这 不幸的是，这不是<em>普通对象</em>可以做的事情。我们不能 只需附加一个调用以侦听数据的侦听器 更新事件。<code>ondataupdate</code></p><p>幸运的是，JavaScript 正好允许我们做到这一点， 它被称为<code>代理</code>。</p><h3 id="proxy对象" tabindex="-1"><a class="header-anchor" href="#proxy对象" aria-hidden="true">#</a> Proxy对象</h3><p><code>Proxy</code>允许我们从<em>常规</em>对象创建<em>代理对象</em>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Lin&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，此<em>代理对象</em>可以侦听对数据的更改。</p><p>在上面的例子中，我们有一个<em>代理对象</em>，但它并不是真的 当知道已经改变时，做任何事情。<code>name</code></p><p>为此，我们需要一个<em>处理程序</em>，它是一个对象，它告诉<em>代理对象</em>在数据更新时要做什么。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> value<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is being updated</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> value<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//用handler创建一个代理</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Lin&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，每当我们使用该对象进行更新时，我们都会收到一条消息，说.<code>name\`\`proxy\`\`&quot;name is being updated&quot;</code></p><p>下面来看这样写的好处：</p><ul><li>代理方法具有通用性，并且可以重用处理器</li><li>在代理对象上设置的任何值都可以递归地转换为代理</li><li>现在这个神奇的对象可以无论嵌套多深都能对数据更新作出反应。</li></ul><p>除此之外，您还可[处理其他几个访问事件，例如读取、更新、删除属性等。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><h3 id="更新用户界面" tabindex="-1"><a class="header-anchor" href="#更新用户界面" aria-hidden="true">#</a> 更新用户界面</h3><p>如果您还记得，<em>反应</em>性的第二部分是<em>自动更新 UI</em>。为此，我们需要获取要更新的<em>相应</em> UI 元素。但在此之前，我们 需要首先<em>根据需要标记 UI</em> 元素。</p><p>为此，我们将使用 <code>data-attributes</code>，该功能允许我们在元素上设置任意值：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">data-mark</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>data-attributes的优点在于，我们现在可以使用以下方法找到所有<em>合适的</em>元素：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;[data-mark=&quot;name&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们只需设置所有<em>适当元素</em>：<code>innerText</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> value<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[data-mark=&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;]</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> el <span class="token keyword">of</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span>innerText <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> value<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Lin&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是这样，这就是反应性的关键！</p><p>由于我们的一般性质，对于设置<em>的任何</em>属性，所有<em>适当的</em> UI 元素都将更新。<code>handler\`\`user</code></p><p>这就是 JavaScript 功能的强大之处，具有 零依赖性和一些聪明，它可以给我们这些神奇<em>的反应</em>对象。<code>Proxy</code></p><p>现在进入<em>第二个主要</em>问题</p><h3 id="可组合性" tabindex="-1"><a class="header-anchor" href="#可组合性" aria-hidden="true">#</a> 可组合性</h3>`,48),r={href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components",target:"_blank",rel:"noopener noreferrer"},d=p(`<p>很少使用它，因为它使用起来有点痛苦。</p><p>对于<em>可组合性</em>，我们首先需要定义组件。</p><p>标记用于包含标记，即 不由浏览器呈现。例如，您可以添加以下内容 HTML 中的标记：<code>&lt;template&gt;</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Will not render!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且它不会被渲染。您可以将它们视为不可见的容器 为您的组件。</p><p>下一个构建块是 定义组件内容的放置位置。这 使组件能够与不同的内容重用，即<em>它变得可组合</em>。<code>&lt;slot&gt;</code></p><p>例如，下面是一个将其文本着色为红色的 h1 元素。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们开始使用我们的组件之前——比如上面的红色 h1，我们需要 注册它们。</p><p>在注册红色 h1 组件之前，我们需要一个名称来注册它 由。我们可以为此使用该属性：<code>name</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>red-h1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，使用一些JavaScript，我们可以获取组件及其名称：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> template <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> componentName <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13),k={href:"https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"customElements.define",-1),v=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>
  componentName<span class="token punctuation">,</span>
  <span class="token keyword">class</span> <span class="token class-name">extends</span> HTMLElement <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> component <span class="token operator">=</span> template<span class="token punctuation">.</span>content<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;open&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们把这两个放到一起</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>快速回顾一下，我们做了两件事：</p><ol><li>我们创建了一个反应式数据结构，即<em>代理对象</em>，在设置值时可以更新我们标记的任何<em>元素。</em></li><li>我们定义了一个自定义组件，该组件将呈现它的 内容为红色 H1。<code>red-h1</code></li></ol><p>现在我们可以将它们放在一起：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>red-h1</span> <span class="token attr-name">data-mark</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>red-h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>red-h1</span> <span class="token attr-name">data-mark</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>red-h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Lin&#39;</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并让自定义组件呈现我们的数据并在我们时更新 UI 更改数据。</p>`,8),g={href:"https://vuejs.org/guide/essentials/template-syntax.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://react.dev/learn/writing-markup-with-jsx",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"由于这种专门的语法不是常规的JavaScript或HTML，因此它不是 可由浏览器解析，因此它们都需要专门的工具来编译 在浏览器之前，它们可以简化为常规的JavaScript，HTML和CSS。 了解他们。",-1),y=n("p",null,[a("即使没有专门的语法，你也可以做很多通常的事情 前端框架以类似的简洁性完成，只需使用 和 即可。"),n("code",null,"Proxy``WebComponents")],-1),x=n("p",null,"这里的代码过度简化，并将其转换为框架 你必须充实它。",-1),f=n("p",null,"在开发此功能时，我计划维护两个硬约束：",-1),_=n("ol",null,[n("li",null,"没有依赖关系。"),n("li",null,"在可以使用之前没有构建步骤。")],-1);function w(q,j){const s=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[a("事实证明，浏览器已经有专门用于此的整个功能 叫"),n("a",r,[a("Web组件"),t(s)])]),d,n("p",null,[a("最后使用 "),n("a",k,[m,t(s)]),a("注册它：")]),v,n("p",null,[a("当然，通常的前端框架不只是这样做，它们有 专门的语法，例如 Vue 中的"),n("a",g,[a("模板语法"),t(s)]),a("和 React 中的 "),n("a",b,[a("JSX"),t(s)]),a("，这使得编写复杂的前端相对更简洁 否则会是这样。")]),h,y,x,f,_])}const T=e(i,[["render",w],["__file","10.html.vue"]]);export{T as default};
