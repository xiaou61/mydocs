import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{r as l,o as p,c as o,a as n,b as s,d as t,e}from"./app.c5b3201b.js";const i={},u=e('<h2 id="第01课-初识python" tabindex="-1"><a class="header-anchor" href="#第01课-初识python" aria-hidden="true">#</a> 第01课：初识Python</h2><h3 id="python简介" tabindex="-1"><a class="header-anchor" href="#python简介" aria-hidden="true">#</a> Python简介</h3><p>Python是由荷兰人吉多·范罗苏姆（Guido von Rossum）发明的一种编程语言，是目前世界上最受欢迎和拥有最多用户群体的编程语言。</p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711535.png" width="85%"><h4 id="python的历史" tabindex="-1"><a class="header-anchor" href="#python的历史" aria-hidden="true">#</a> Python的历史</h4><ol><li>1989年圣诞节：Guido开始写Python语言的编译器。</li><li>1991年2月：第一个Python解释器诞生，它是用C语言实现的，可以调用C语言的库函数。</li><li>1994年1月：python 1.0正式发布。</li><li>2000年10月：python 2.0发布，Python的整个开发过程更加透明，生态圈开始慢慢形成。</li><li>2008年12月：python 3.0发布，引入了诸多现代编程语言的新特性，但并不完全兼容之前的Python代码。</li><li>2020年1月：在Python 2和Python 3共存了11年之后，官方停止了对Python 2的更新和维护，希望用户尽快过渡到Python 3。</li></ol><blockquote><p><strong>说明</strong>：大多数软件的版本号一般分为三段，形如A.B.C，其中A表示大版本号，当软件整体重写升级或出现不向后兼容的改变时，才会增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。</p></blockquote><h4 id="python的优缺点" tabindex="-1"><a class="header-anchor" href="#python的优缺点" aria-hidden="true">#</a> Python的优缺点</h4><p>Python的优点很多，简单为大家列出几点。</p><ol><li>简单明确，跟其他很多语言相比，Python更容易上手。</li><li>能用更少的代码做更多的事情，提升开发效率。</li><li>开放源代码，拥有强大的社区和生态圈。</li><li>能够做的事情非常多，有极强的适应性。</li><li>能够在Windows、macOS、Linux等各种系统上运行。</li></ol><p>Python最主要的缺点是执行效率低，但是当我们更看重产品的开发效率而不是执行效率的时候，Python就是很好的选择。</p><h4 id="python的应用领域" tabindex="-1"><a class="header-anchor" href="#python的应用领域" aria-hidden="true">#</a> Python的应用领域</h4><p>目前Python在Web服务器应用开发、云基础设施开发、<strong>网络数据采集</strong>（爬虫）、<strong>数据分析</strong>、量化交易、<strong>机器学习</strong>、<strong>深度学习</strong>、自动化测试、自动化运维等领域都有用武之地。</p><h3 id="安装python环境" tabindex="-1"><a class="header-anchor" href="#安装python环境" aria-hidden="true">#</a> 安装Python环境</h3><p>想要开始你的Python编程之旅，首先得在计算机上安装Python环境，简单的说就是得安装运行Python程序的工具，通常也称之为Python解释器。我们强烈建议大家安装Python 3的环境，很明显它是目前更好的选择。</p><h4 id="windows环境" tabindex="-1"><a class="header-anchor" href="#windows环境" aria-hidden="true">#</a> Windows环境</h4>',16),r={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},d=e('<p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711504.png" alt="" loading="lazy"></p><p>对于Windows操作系统，可以下载“executable installer”。需要注意的是，如果在Windows 7环境下安装Python 3，需要先安装Service Pack 1补丁包，大家可以在Windows的“运行”中输入<code>winver</code>命令，从弹出的窗口上可以看到你的系统是否安装了该补丁包。如果没有该补丁包，一定要先通过“Windows Update”或者类似“CCleaner”这样的工具自动安装该补丁包，安装完成后通常需要重启你的Windows系统，然后再开始安装Python环境。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711513.png" alt="" loading="lazy"></p><p>双击运行刚才下载的安装程序，会打开Python环境的安装向导。在执行安装向导的时候，记得勾选“Add python 3.x to PATH”选项，这个选项会帮助我们将Python的解释器添加到PATH环境变量中（不理解没关系，照做就行），具体的步骤如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250722749.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250722135.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711530.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711954.png" alt="" loading="lazy"></p><p>安装完成后可以打开Windows的“命令行提示符”工具（或“PowerShell”）并输入<code>python --version</code>或<code>python -V</code>来检查安装是否成功，命令行提示符可以在“运行”中输入<code>cmd</code>来打开或者在“开始菜单”的附件中找到它。如果看了Python解释器对应的版本号（如：python 3.7.8），说明你的安装已经成功了，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250722879.png" alt="" loading="lazy"></p>',10),k=n("strong",null,"说明",-1),m={href:"https://www.microsoft.com/zh-cn/download/details.aspx?id=48145",target:"_blank",rel:"noopener noreferrer"},v={href:"https://pan.baidu.com/s/1iNDnU5UVdDX5sKFqsiDg5Q",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711348.png",alt:"QQ20210711-0",loading:"lazy"})],-1),g=n("p",null,[s("除此之外，你还应该检查一下Python的包管理工具是否已经可用，对应的命令是"),n("code",null,"pip --version"),s("。")],-1),h=n("h4",{id:"macos环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#macos环境","aria-hidden":"true"},"#"),s(" macOS环境")],-1),y={href:"https://www.python.org/downloads/release/python-376/",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"python3",-1),f=n("code",null,"python",-1),x=e(`<h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>Python语言可以做很多的事情，也值得我们去学习。要使用Python语言，首先需要在自己的计算机上安装Python环境，也就是运行Python程序的Python解释器。</p><h2 id="第02课-第一个python程序" tabindex="-1"><a class="header-anchor" href="#第02课-第一个python程序" aria-hidden="true">#</a> 第02课：第一个Python程序</h2><p>在上一课中，我们已经了解了Python语言并安装了运行Python程序所需的环境，相信大家已经迫不及待的想开始自己的Python编程之旅了。首先我们来看看应该在哪里编写我们的Python程序。</p><h3 id="编写代码的工具" tabindex="-1"><a class="header-anchor" href="#编写代码的工具" aria-hidden="true">#</a> 编写代码的工具</h3><h4 id="交互式环境" tabindex="-1"><a class="header-anchor" href="#交互式环境" aria-hidden="true">#</a> 交互式环境</h4><p>我们打开Windows的“命令提示符”工具，输入命令<code>python</code>然后回车就可以进入到Python的交互式环境中。所谓交互式环境，就是我们输入一行代码回车，代码马上会被执行，如果代码有产出结果，那么结果会被显示在窗口中。例如：</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>python 3.7.6
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; 2 * 3
6
&gt;&gt;&gt; 2 + 3
5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>提示</strong>：使用macOS系统的用户需要打开“终端”工具，输入<code>python3</code>进入交互式环境。</p></blockquote><p>如果希望退出交互式环境，可以在交互式环境中输入<code>quit()</code>，如下所示。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>&gt;&gt;&gt; quit()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="更好的交互式环境-ipython" tabindex="-1"><a class="header-anchor" href="#更好的交互式环境-ipython" aria-hidden="true">#</a> 更好的交互式环境 - IPython</h4><p>Python默认的交互式环境用户体验并不怎么好，我们可以用IPython来替换掉它，因为IPython提供了更为强大的编辑和交互功能。我们可以使用Python的包管理工具<code>pip</code>来安装IPython，如下所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> ipython
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>温馨提示</strong>：在使用上面的命令安装IPython之前，可以先通过<code>pip config set global.index-url https://pypi.doubanio.com/simple</code>命令将<code>pip</code>的下载源修改为国内的豆瓣网，否则下载安装的过程可能会非常的缓慢。</p></blockquote><p>可以使用下面的命令启动IPython，进入交互式环境。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ipython
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="文本编辑器-visual-studio-code" tabindex="-1"><a class="header-anchor" href="#文本编辑器-visual-studio-code" aria-hidden="true">#</a> 文本编辑器 - Visual Studio Code</h4>`,18),q={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zhuanlan.zhihu.com/p/106357123",target:"_blank",rel:"noopener noreferrer"},P=n("h4",{id:"集成开发环境-pycharm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#集成开发环境-pycharm","aria-hidden":"true"},"#"),s(" 集成开发环境 - PyCharm")],-1),E={href:"https://www.jetbrains.com/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.jetbrains.com/pycharm/download",target:"_blank",rel:"noopener noreferrer"},C=e(`<p>运行PyCharm，可以看到如下图所示的欢迎界面，可以选择“New Project”来创建一个新的项目。</p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711371.png" width="80%"><p>创建项目的时候需要指定项目的路径并创建运行项目的”虚拟环境“，如下图所示。</p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711843.png" width="80%"><p>项目创建好以后会出现如下图所示的画面，我们可以通过在项目文件夹上点击鼠标右键，选择“New”菜单下的“python File”来创建一个Python文件，创建好的Python文件会自动打开进入可编辑的状态。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711705.png" alt="image-20210720133621079" loading="lazy"></p><p>写好代码后，可以在编辑代码的窗口点击鼠标右键，选择“Run”菜单项来运行代码，下面的“Run”窗口会显示代码的执行结果，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250722822.png" alt="image-20210720134039848" loading="lazy"></p><p>PyCharm常用的快捷键如下表所示，我们也可以在“File”菜单的“Settings”中定制PyCharm的快捷键（macOS系统是在“PyCharm”菜单的“Preferences”中对快捷键进行设置）。</p><p>表1. PyCharm常用快捷键。</p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td><code>ctrl + j</code></td><td>显示可用的代码模板</td></tr><tr><td><code>ctrl + b</code></td><td>查看函数、类、方法的定义</td></tr><tr><td><code>ctrl + alt + l</code></td><td>格式化代码</td></tr><tr><td><code>alt + enter</code></td><td>万能代码修复快捷键</td></tr><tr><td><code>ctrl + /</code></td><td>注释/反注释代码</td></tr><tr><td><code>shift + shift</code></td><td>万能搜索快捷键</td></tr><tr><td><code>ctrl + d</code> / <code>ctrl + y</code></td><td>复制/删除一行代码</td></tr><tr><td><code>ctrl + shift + -</code> / <code>ctrl + shift + +</code></td><td>折叠/展开所有代码</td></tr><tr><td><code>F2</code></td><td>快速定位到错误代码</td></tr><tr><td><code>ctrl + alt + F7</code></td><td>查看哪些地方用到了指定的函数、类、方法</td></tr></tbody></table><blockquote><p><strong>说明</strong>：使用macOS系统，可以将上面的<code>ctrl</code>键换成<code>command</code>键，在macOS系统上，可以使用<code>ctrl + space</code>组合键来获得万能提示，在Windows系统上不能使用该快捷键，因为它跟Windows默认的切换输入法的快捷键是冲突的，需要重新设置。</p></blockquote><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> hello, world</h3><p>按照行业惯例，我们学习任何一门编程语言写的第一个程序都是输出<code>hello, world</code>，因为这段代码是伟大的丹尼斯·里奇（C语言之父，和肯·汤普森一起开发了Unix操作系统）和布莱恩·柯尼汉（awk语言的发明者）在他们的不朽著作<em>The C Programming Language</em>中写的第一段代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello, world&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="运行程序" tabindex="-1"><a class="header-anchor" href="#运行程序" aria-hidden="true">#</a> 运行程序</h3><p>如果不使用PyCharm这样的集成开发环境，我们可以将上面的代码命名为<code>hello.py</code>，对于Windows操作系统，可以在你保存代码的目录下先按住键盘上的<code>shift</code>键再点击鼠标右键，这时候鼠标右键菜单中会出现“命令提示符”选项，点击该选项就可以打开“命令提示符”工具，我们输入下面的命令。</p><div class="language-Shell line-numbers-mode" data-ext="Shell"><pre class="language-Shell"><code>python hello.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>提醒</strong>：我们也可以在任意位置打开“命令提示符”，然后将需要执行的Python代码通过拖拽的方式拖入到“命令提示符”中，这样相当于指定了文件的绝对路径来运行该文件中的Python代码。再次提醒，macOS系统要通过<code>python3</code>命令来运行该程序。</p></blockquote><p>你可以尝试将上面程序单引号中的<code>hello, world</code>换成其他内容；你也可以尝试着多写几个这样的语句，看看会运行出怎样的结果。需要提醒大家，上面代码中的<code>print(&#39;hello, world&#39;)</code>就是一条完整的语句，我们用Python写程序，最好每一行代码中只有一条语句。虽然使用<code>;</code>分隔符可以将多个语句写在一行代码中，但是最好不要这样做，因为代码会变得非常难看。</p><h3 id="注释你的代码" tabindex="-1"><a class="header-anchor" href="#注释你的代码" aria-hidden="true">#</a> 注释你的代码</h3><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性。当然，我们也可以将源代码中暂时不需要运行的代码段通过注释来去掉，这样当你需要重新使用这些代码的时候，去掉注释符号就可以了。简单的说，<strong>注释会让代码更容易看懂但不会影响程序的执行结果</strong>。</p><p>Python中有两种形式的注释：</p><ol><li>单行注释：以<code>#</code>和空格开头，可以注释掉从<code>#</code>开始后面一整行的内容。</li><li>多行注释：三个引号开头，三个引号结尾，通常用于添加多行说明性内容。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
第一个Python程序 - hello, world


&quot;&quot;&quot;</span>
<span class="token comment"># print(&#39;hello, world&#39;)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;你好，世界！&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p>到这里，我们已经把第一个Python程序运行起来了，是不是很有成就感？只要你坚持学习下去，再过一段时间，我们就可以用Python制作小游戏、编写爬虫程序、完成办公自动化操作等。<strong>写程序本身就是一件很酷的事情</strong>，在未来编程就像英语一样，<strong>对很多人来说或都是必须要掌握的技能</strong>。</p><h2 id="第03课-python语言元素之变量" tabindex="-1"><a class="header-anchor" href="#第03课-python语言元素之变量" aria-hidden="true">#</a> 第03课：Python语言元素之变量</h2><p>作为一个程序员，可能经常会被外行问到两个问题，其一是“什么是（计算机）程序”，其二是“写（计算机）程序能做什么”，这里我先对这两个问题做一个回答。<strong>程序是指令的集合</strong>，<strong>写程序就是用指令控制计算机做我们想让它做的事情</strong>。那么，为什么要用Python语言来写程序呢？因为<strong>Python语言简单优雅</strong>，相比C、C++、Java这样的编程语言，<strong>Python对初学者更加友好</strong>，当然这并不是说Python不像其他语言那样强大，<strong>Python几乎是无所不能的</strong>，在第一节课的时候，我们就说到了Python可以用于服务器程序开发、云平台开发、数据分析、机器学习等各个领域。当然，Python语言还可以用来粘合其他语言开发的系统，所以也经常被戏称为“<strong>胶水语言</strong>”。</p><h3 id="一些计算机常识" tabindex="-1"><a class="header-anchor" href="#一些计算机常识" aria-hidden="true">#</a> 一些计算机常识</h3><p>在开始系统的学习编程之前，我们先来科普一些计算机的基础知识。计算机的硬件系统通常由五大部件构成，包括：<strong>运算器</strong>、<strong>控制器</strong>、<strong>存储器</strong>、<strong>输入设备</strong>和<strong>输出设备</strong>。其中，运算器和控制器放在一起就是我们常说的<strong>中央处理器</strong>，它的功能是执行各种运算和控制指令。刚才我们提到过程序是指令的集合，写程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。目前，我们使用的计算机基本都是“冯·诺依曼体系结构”的计算机，这种计算机有两个关键点：一是要将<strong>存储设备与中央处理器分开</strong>；二是将<strong>数据以二进制方式编码</strong>。</p><p>二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法本质是一样的。人类因为有十根手指所以使用了十进制，因为在计数时十根手指用完之后就只能用进位的方式来表示更大的数值。当然凡事都有例外，玛雅人可能是因为长年光着脚的原因，把脚趾头也都用上了，于是他们使用了二十进制的计数法。在这种计数法的指导下，玛雅人的历法就与我们平常使用的历法并不相同。按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“的荒诞说法。今天很多人都在猜测，玛雅文明之所以发展缓慢跟使用了二十进制是有关系的。对于计算机来说，二进制在物理器件上最容易实现的，因为可以用高电压表示1，用低电压表示0。不是所有写程序的人都需要知道十进制与二进制如何转换，大多数时候我们即便不了解这些知识也能写出程序，但是我们必须要知道<strong>计算机是使用二进制计数的</strong>，不管什么<strong>数据到了计算机内存中都是以二进制形式存在的</strong>。</p><h3 id="变量和类型" tabindex="-1"><a class="header-anchor" href="#变量和类型" aria-hidden="true">#</a> 变量和类型</h3><p>要想在计算机内存中保存数据，首先就得说一说变量这个概念。在编程语言中，<strong>变量是数据的载体</strong>，简单的说就是一块用来保存数据的内存空间，<strong>变量的值可以被读取和修改</strong>，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，最常见的就是数值，除了数值之外还有文本、图形、音频、视频等各种各样的数据。虽然数据在计算机中都是以二进制形态存在的，但是我们可以用不同类型的变量来表示数据类型的差异。<strong>Python中的数据类型很多</strong>，而且也<strong>允许我们自定义新的数据类型</strong>（这一点在后面会讲到），这里我们需要先了解几种常用的数据类型。</p><ul><li>整型（<code>int</code>）：Python中可以处理任意大小的整数，而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型（<code>float</code>）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型（<code>str</code>）：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>。</li><li>布尔型（<code>bool</code>）：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>。</li></ul><h3 id="变量命名" tabindex="-1"><a class="header-anchor" href="#变量命名" aria-hidden="true">#</a> 变量命名</h3><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有自己的名字一样。在Python中，变量命名需要遵循以下这些规则，这些规则又分为必须遵守的硬性规则和建议遵守的非硬性规则。</p><ul><li>硬性规则： <ul><li>规则1：变量名由<strong>字母</strong>、数字和<strong>下划线</strong>构成，数字不能开头。需要说明的是，这里说的字母指的是Unicode字符，Unicode称为万国码，囊括了世界上大部分的文字系统，这也就意味着中文、日文、希腊字母等都可以作为变量名中的字符，但是像<code>!</code>、<code>@</code>、<code>#</code>这些特殊字符是不能出现在变量名中的，而且我们强烈建议大家<strong>尽可能使用英文字母</strong>。</li><li>规则2：<strong>大小写敏感</strong>，简单的说就是大写的<code>A</code>和小写的<code>a</code>是两个不同的变量。</li><li>规则3：变量名<strong>不要跟Python语言的关键字</strong>（有特殊含义的单词，后面会讲到）和<strong>保留字</strong>（如已有的函数、模块等的名字）<strong>发生重名的冲突</strong>。</li></ul></li><li>非硬性规则： <ul><li>规则1：变量名通常使用小写英文字母，多个单词用下划线进行连接。</li><li>规则2：受保护的变量用单个下划线开头。</li><li>规则3：私有的变量用两个下划线开头。</li></ul></li></ul><p>规则2和规则3大家暂时不用理解，后面自然会明白的。当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到<strong>见名知意</strong>也非常重要。</p><h3 id="变量的使用" tabindex="-1"><a class="header-anchor" href="#变量的使用" aria-hidden="true">#</a> 变量的使用</h3><p>下面通过例子来说明变量的类型和变量的使用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
使用变量保存数据并进行加减乘除运算


&quot;&quot;&quot;</span>
a <span class="token operator">=</span> <span class="token number">45</span>          <span class="token comment"># 变量a保存了45</span>
b <span class="token operator">=</span> <span class="token number">12</span>          <span class="token comment"># 变量b保存了12</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>    <span class="token comment"># 57</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>    <span class="token comment"># 33</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span>    <span class="token comment"># 540</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span>    <span class="token comment"># 3.75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念基本一致，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解函数这个概念也不要紧，我们会在后续的内容中专门讲解函数的定义和使用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
使用type()检查变量的类型


&quot;&quot;&quot;</span>
a <span class="token operator">=</span> <span class="token number">100</span>
b <span class="token operator">=</span> <span class="token number">12.345</span>
c <span class="token operator">=</span> <span class="token string">&#39;hello, world&#39;</span>
d <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;int&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;float&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;str&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;bool&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同类型的变量可以相互转换，这一点可以通过Python的内置函数来实现。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>下面的例子为大家演示了Python中类型转换的操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
Python中的类型转换操作


&quot;&quot;&quot;</span>
a <span class="token operator">=</span> <span class="token number">100</span>
b <span class="token operator">=</span> <span class="token number">12.345</span>
c <span class="token operator">=</span> <span class="token string">&#39;hello, world&#39;</span>
d <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token comment"># 整数转成浮点数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 100.0</span>
<span class="token comment"># 浮点型转成字符串 (输出字符串时不会看到引号哟)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 12.345</span>
<span class="token comment"># 字符串转成布尔型 (有内容的字符串都会变成True)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># True</span>
<span class="token comment"># 布尔型转成整数 (True会转成1，False会转成0)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 1</span>
<span class="token comment"># 将整数变成对应的字符 (97刚好对应字符表中的字母a)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># a</span>
<span class="token comment"># 将字符转成整数 (Python中字符和字符串表示法相同)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 97</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h3><p>在Python程序中，我们可以<strong>使用变量来保存数据</strong>，<strong>变量有不同的类型</strong>，<strong>变量可以做运算</strong>（下一课会有详细的讲解），<strong>也可以通过内置函数来转换变量类型</strong>。</p><h2 id="第04课-python语言元素之运算符" tabindex="-1"><a class="header-anchor" href="#第04课-python语言元素之运算符" aria-hidden="true">#</a> 第04课：Python语言元素之运算符</h2><p>Python语言支持很多种运算符，我们先用一个表格为大家列出这些运算符，然后选择一些马上就会用到的运算符为大家进行讲解。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code> <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code> <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code> <code>or</code> <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> \`</td><td>=<code></code>^=\` \`&gt;&gt;=\` \`&lt;&lt;=\`</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 上面这个表格实际上是按照运算符的优先级从上到下列出了各种运算符。所谓优先级就是在一个运算的表达式中，如果出现了多个运算符，应该先执行哪个运算再执行哪个运算的顺序。在实际开发中，如果搞不清楚运算符的优先级，可以使用圆括号来确保运算的执行顺序。</p></blockquote><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><p>Python中的算术运算符非常丰富，除了大家最为熟悉的加减乘除之外，还有整除运算符、求模（求余数）运算符和求幂运算符。下面的例子为大家展示了算术运算符的使用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
算术运算符


&quot;&quot;&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment"># 加法运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">-</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment"># 减法运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">*</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment"># 乘法运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">/</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment"># 除法运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">%</span> <span class="token number">123</span><span class="token punctuation">)</span>     <span class="token comment"># 求模运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">//</span> <span class="token number">123</span><span class="token punctuation">)</span>    <span class="token comment"># 整除运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">**</span> <span class="token number">123</span><span class="token punctuation">)</span>    <span class="token comment"># 求幂运算</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
赋值运算符和复合赋值运算符


&quot;&quot;&quot;</span>
a <span class="token operator">=</span> <span class="token number">10</span>
b <span class="token operator">=</span> <span class="token number">3</span>
a <span class="token operator">+=</span> b        <span class="token comment"># 相当于：a = a + b</span>
a <span class="token operator">*=</span> a <span class="token operator">+</span> <span class="token number">2</span>    <span class="token comment"># 相当于：a = a * (a + 2)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>      <span class="token comment"># 算一下这里会输出什么</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>###比较运算符和逻辑运算符</p><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，需要提醒的是比较相等用的是<code>==</code>，请注意这里是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的运算符；比较不相等用的是<code>!=</code>，这不同于数学上的不等号，python 2中曾经使用过<code>&lt;&gt;</code>来表示不等关系，大家知道就可以了。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，<code>not</code>后面的布尔值如果是<code>True</code>，运算结果就是<code>False</code>；而<code>not</code>后面的布尔值如果是<code>False</code>，运算结果就是<code>True</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
比较运算符和逻辑运算符的使用


&quot;&quot;&quot;</span>
flag0 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>
flag1 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span>
flag2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">1</span>
flag3 <span class="token operator">=</span> flag1 <span class="token keyword">and</span> flag2
flag4 <span class="token operator">=</span> flag1 <span class="token keyword">or</span> flag2
flag5 <span class="token operator">=</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag0 =&#39;</span><span class="token punctuation">,</span> flag0<span class="token punctuation">)</span>    <span class="token comment"># flag0 = True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag1 =&#39;</span><span class="token punctuation">,</span> flag1<span class="token punctuation">)</span>    <span class="token comment"># flag1 = True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag2 =&#39;</span><span class="token punctuation">,</span> flag2<span class="token punctuation">)</span>    <span class="token comment"># flag2 = False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag3 =&#39;</span><span class="token punctuation">,</span> flag3<span class="token punctuation">)</span>    <span class="token comment"># flag3 = False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag4 =&#39;</span><span class="token punctuation">,</span> flag4<span class="token punctuation">)</span>    <span class="token comment"># flag4 = True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag5 =&#39;</span><span class="token punctuation">,</span> flag5<span class="token punctuation">)</span>    <span class="token comment"># flag5 = False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p></blockquote><h3 id="运算符的例子" tabindex="-1"><a class="header-anchor" href="#运算符的例子" aria-hidden="true">#</a> 运算符的例子</h3><h4 id="例子1-华氏温度转换为摄氏温度。" tabindex="-1"><a class="header-anchor" href="#例子1-华氏温度转换为摄氏温度。" aria-hidden="true">#</a> 例子1：华氏温度转换为摄氏温度。</h4><blockquote><p><strong>提示</strong>：华氏温度到摄氏温度的转换公式为：<code>C = (F - 32) / 1.8</code>。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
将华氏温度转换为摄氏温度


&quot;&quot;&quot;</span>
f <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入华氏温度: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1.8</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%.1f华氏度 = %.1f摄氏度&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：在使用<code>print</code>函数输出时，也可以对字符串内容进行格式化处理，上面<code>print</code>函数中的字符串<code>%.1f</code>是一个占位符，稍后会由一个<code>float</code>类型的变量值替换掉它。同理，如果字符串中有<code>%d</code>，后面可以用一个<code>int</code>类型的变量值替换掉它，而<code>%s</code>会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中<code>{f:.1f}</code>和<code>{c:.1f}</code>可以先看成是<code>{f}</code>和<code>{c}</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>f<span class="token punctuation">:</span><span class="token format-spec">.1f</span><span class="token punctuation">}</span></span><span class="token string">华氏度 = </span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token format-spec">.1f</span><span class="token punctuation">}</span></span><span class="token string">摄氏度&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h4 id="例子2-输入圆的半径计算计算周长和面积。" tabindex="-1"><a class="header-anchor" href="#例子2-输入圆的半径计算计算周长和面积。" aria-hidden="true">#</a> 例子2：输入圆的半径计算计算周长和面积。</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
输入半径计算圆的周长和面积


&quot;&quot;&quot;</span>
radius <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入圆的半径: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
perimeter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3.1416</span> <span class="token operator">*</span> radius
area <span class="token operator">=</span> <span class="token number">3.1416</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;周长: %.2f&#39;</span> <span class="token operator">%</span> perimeter<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;面积: %.2f&#39;</span> <span class="token operator">%</span> area<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子3-输入年份判断是不是闰年。" tabindex="-1"><a class="header-anchor" href="#例子3-输入年份判断是不是闰年。" aria-hidden="true">#</a> 例子3：输入年份判断是不是闰年。</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
输入年份 如果是闰年输出True 否则输出False


&quot;&quot;&quot;</span>
year <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入年份: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
is_leap <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">or</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_leap<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p></blockquote><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3" aria-hidden="true">#</a> 总结</h3><p>通过上面的例子相信大家感受到了，学会使用运算符以及由运算符构成的表达式，就可以帮助我们解决很多实际的问题，<strong>运算符和表达式对于任何一门编程语言都是非常重要的</strong>。</p><h2 id="第05课-分支结构" tabindex="-1"><a class="header-anchor" href="#第05课-分支结构" aria-hidden="true">#</a> 第05课：分支结构</h2><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。给大家一分钟的时间，你应该可以想到至少5个以上这样的例子，赶紧试一试。</p><h3 id="if语句的使用" tabindex="-1"><a class="header-anchor" href="#if语句的使用" aria-hidden="true">#</a> if语句的使用</h3><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名。下面的例子中演示了如何构造一个分支结构。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
用户身份验证


&quot;&quot;&quot;</span>
username <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入用户名: &#39;</span><span class="token punctuation">)</span>
password <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入口令: &#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 用户名是admin且密码是123456则身份验证成功否则身份验证失败</span>
<span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">&#39;admin&#39;</span> <span class="token keyword">and</span> password <span class="token operator">==</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;身份验证成功!&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;身份验证失败!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是，不同于C++、Java等编程语言，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，强烈建议大家<strong>不要使用制表键来缩进代码</strong>，如果你已经习惯了这么做，可以<strong>设置代码编辑工具将1个制表键自动变成4个空格</strong>，很多的代码编辑工具都支持这项功能。</p><blockquote><p><strong>提示</strong>：<code>if</code>和<code>else</code> 的最后面有一个<code>:</code>，它是用英文输入法输入的冒号；程序中输入的<code>&#39;</code>、<code>&quot;</code>、<code>=</code>、<code>(</code>、<code>)</code>等特殊字符，都是在英文输入法状态下输入的。有很多初学者经常不注意这一点，结果运行代码的时候就会遇到很多莫名其妙的错误提示。<strong>强烈建议</strong>大家在写代码的时候都<strong>打开英文输入法</strong>（注意是英文输入法而不是中文输入法的英文输入模式），这样可以避免很多不必要的麻烦。</p></blockquote><p>如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p>`,86),B={class:"katex-block"},j={class:"katex-display"},T={class:"katex"},z=n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mrow",null,[n("mo",{fence:"true"},"{"),n("mtable",{rowspacing:"0.36em",columnalign:"left left",columnspacing:"1em"},[n("mtr",null,[n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mn",null,"3"),n("mi",null,"x"),n("mo",null,"−"),n("mn",null,"5"),n("mo",{separator:"true"},",")])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",null,">"),n("mn",null,"1"),n("mo",{stretchy:"false"},")")])])])]),n("mtr",null,[n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mi",null,"x"),n("mo",null,"+"),n("mn",null,"2"),n("mo",{separator:"true"},",")])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mo",null,"−"),n("mn",null,"1"),n("mo",null,"≤"),n("mi",null,"x"),n("mo",null,"≤"),n("mn",null,"1"),n("mo",{stretchy:"false"},")")])])])]),n("mtr",null,[n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mn",null,"5"),n("mi",null,"x"),n("mo",null,"+"),n("mn",null,"3"),n("mo",{separator:"true"},",")])])]),n("mtd",null,[n("mstyle",{scriptlevel:"0",displaystyle:"false"},[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",null,"<"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")")])])])])])])]),n("annotation",{encoding:"application/x-tex"}," f(x) = \\begin{cases} 3x - 5, & (x \\gt 1) \\\\ x + 2, & (-1 \\le x \\le 1) \\\\ 5x + 3, & (x \\lt -1) \\end{cases} ")])])],-1),A={class:"katex-html","aria-hidden":"true"},N=e('<span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span>',1),F={class:"base"},I=n("span",{class:"strut",style:{height:"4.32em","vertical-align":"-1.91em"}},null,-1),O={class:"minner"},M={class:"mopen"},J={class:"delimsizing mult"},G={class:"vlist-t vlist-t2"},L={class:"vlist-r"},D={class:"vlist",style:{height:"2.35em"}},R=n("span",{style:{top:"-2.2em"}},[n("span",{class:"pstrut",style:{height:"3.15em"}}),n("span",{class:"delimsizinginner delim-size4"},[n("span",null,"⎩")])],-1),W={style:{top:"-2.192em"}},V=n("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),U={style:{height:"0.316em",width:"0.8889em"}},H={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.316em",style:{width:"0.8889em"},viewBox:"0 0 888.89 316",preserveAspectRatio:"xMinYMin"},K=n("path",{d:"M384 0 H504 V316 H384z M384 0 H504 V316 H384z"},null,-1),Z=[K],Y=n("span",{style:{top:"-3.15em"}},[n("span",{class:"pstrut",style:{height:"3.15em"}}),n("span",{class:"delimsizinginner delim-size4"},[n("span",null,"⎨")])],-1),Q={style:{top:"-4.292em"}},X=n("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),$={style:{height:"0.316em",width:"0.8889em"}},nn={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.316em",style:{width:"0.8889em"},viewBox:"0 0 888.89 316",preserveAspectRatio:"xMinYMin"},sn=n("path",{d:"M384 0 H504 V316 H384z M384 0 H504 V316 H384z"},null,-1),an=[sn],tn=n("span",{style:{top:"-4.6em"}},[n("span",{class:"pstrut",style:{height:"3.15em"}}),n("span",{class:"delimsizinginner delim-size4"},[n("span",null,"⎧")])],-1),en=n("span",{class:"vlist-s"},"​",-1),pn=n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.85em"}},[n("span")])],-1),on=e('<span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">5</span><span class="mpunct">,</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mpunct">,</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">5</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">3</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span>',2),cn=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
分段函数求值


&quot;&quot;&quot;</span>
x <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;x = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
    y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">5</span>
<span class="token keyword">elif</span> x <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
    y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    y <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;f(</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">) = </span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在<code>if</code>的内部构造出一个新的分支结构，同理<code>elif</code>和<code>else</code>中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
分段函数求值


&quot;&quot;&quot;</span>
x <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;x = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
    y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">-</span> <span class="token number">5</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
        y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        y <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;f(</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">) = </span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),ln=n("strong",null,"说明：",-1),un={href:"https://zhuanlan.zhihu.com/p/111843067",target:"_blank",rel:"noopener noreferrer"},rn=n("strong",null,"Python之禅",-1),dn=n("strong",null,"Flat is better than nested",-1),kn=e(`<h3 id="一些例子" tabindex="-1"><a class="header-anchor" href="#一些例子" aria-hidden="true">#</a> 一些例子</h3><h4 id="例子1-英制单位英寸与公制单位厘米互换。" tabindex="-1"><a class="header-anchor" href="#例子1-英制单位英寸与公制单位厘米互换。" aria-hidden="true">#</a> 例子1：英制单位英寸与公制单位厘米互换。</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
英制单位英寸和公制单位厘米互换


&quot;&quot;&quot;</span>
value <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入长度: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
unit <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入单位: &#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> unit <span class="token operator">==</span> <span class="token string">&#39;in&#39;</span> <span class="token keyword">or</span> unit <span class="token operator">==</span> <span class="token string">&#39;英寸&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%f英寸 = %f厘米&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> value <span class="token operator">*</span> <span class="token number">2.54</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> unit <span class="token operator">==</span> <span class="token string">&#39;cm&#39;</span> <span class="token keyword">or</span> unit <span class="token operator">==</span> <span class="token string">&#39;厘米&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%f厘米 = %f英寸&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> value <span class="token operator">/</span> <span class="token number">2.54</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;请输入有效的单位&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子2-百分制成绩转换为等级制成绩。" tabindex="-1"><a class="header-anchor" href="#例子2-百分制成绩转换为等级制成绩。" aria-hidden="true">#</a> 例子2：百分制成绩转换为等级制成绩。</h4><blockquote><p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
百分制成绩转换为等级制成绩


&quot;&quot;&quot;</span>
score <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入成绩: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span>
<span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span>
<span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;C&#39;</span>
<span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;D&#39;</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;E&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;对应的等级是:&#39;</span><span class="token punctuation">,</span> grade<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子3-输入三条边长-如果能构成三角形就计算周长和面积。" tabindex="-1"><a class="header-anchor" href="#例子3-输入三条边长-如果能构成三角形就计算周长和面积。" aria-hidden="true">#</a> 例子3：输入三条边长，如果能构成三角形就计算周长和面积。</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积


&quot;&quot;&quot;</span>
a <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;a = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;b = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;c = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> a <span class="token operator">+</span> b <span class="token operator">&gt;</span> c <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">&gt;</span> b <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">&gt;</span> a<span class="token punctuation">:</span>
    peri <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;周长: </span><span class="token interpolation"><span class="token punctuation">{</span>peri<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
    half <span class="token operator">=</span> peri <span class="token operator">/</span> <span class="token number">2</span>
    area <span class="token operator">=</span> <span class="token punctuation">(</span>half <span class="token operator">*</span> <span class="token punctuation">(</span>half <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>half <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>half <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;面积: </span><span class="token interpolation"><span class="token punctuation">{</span>area<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;不能构成三角形&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),mn=n("strong",null,"说明：",-1),vn={href:"https://zh.wikipedia.org/zh-hans/%E6%B5%B7%E4%BC%A6%E5%85%AC%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},bn=e(`<h3 id="简单的总结" tabindex="-1"><a class="header-anchor" href="#简单的总结" aria-hidden="true">#</a> 简单的总结</h3><p>学会了Python中的分支结构和循环结构，我们就可以用Python程序来解决很多实际的问题了。这一节课相信已经帮助大家记住了<code>if</code>、<code>elif</code>、<code>else</code>这几个关键字以及如何使用它们来构造分支结构，下一节课我们为大家介绍循环结构，学完这两次课你一定会发现，你能写出很多很多非常有意思的代码。继续加油！</p><h2 id="第06课-循环结构" tabindex="-1"><a class="header-anchor" href="#第06课-循环结构" aria-hidden="true">#</a> 第06课：循环结构</h2><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1" aria-hidden="true">#</a> 应用场景</h3><p>我们在写程序的时候，一定会遇到需要重复执行某条指令或某些指令的场景。例如用程序控制机器人踢足球，如果机器人持球而且还没有进入射门范围，那么我们就要一直发出让机器人向球门方向移动的指令。在这个场景中，让机器人向球门方向移动就是一个需要重复的动作，当然这里还会用到上一课讲的分支结构来判断机器人是否持球以及是否进入射门范围。再举一个简单的例子，如果要实现每隔1秒中在屏幕上打印一次“hello, world”并持续打印一个小时，我们肯定不能够直接把<code>print(&#39;hello, world&#39;)</code>这句代码写3600遍，这里我们需要构造循环结构。</p><p>所谓循环结构，就是程序中控制某条或某些指令重复执行的结构。在Python中构造循环结构有两种做法，一种是<code>for-in</code>循环，另一种是<code>while</code>循环。</p><h3 id="for-in循环" tabindex="-1"><a class="header-anchor" href="#for-in循环" aria-hidden="true">#</a> for-in循环</h3><p>如果明确的知道循环执行的次数，我们推荐使用<code>for-in</code>循环，例如输出100行的”hello, world“。 被<code>for-in</code>循环控制的语句块也是通过缩进的方式来构造的，这一点跟分支结构完全相同，大家看看下面的代码就明白了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
用for循环实现1~100求和


&quot;&quot;&quot;</span>
total <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    total <span class="token operator">+=</span> x
<span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从<code>1</code>到<code>100</code>的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从<code>1</code>到<code>100</code>的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次递减的值。</li></ul><p>知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
用for循环实现1~100之间的偶数求和


&quot;&quot;&quot;</span>
total <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    total <span class="token operator">+=</span> x
<span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环" aria-hidden="true">#</a> while循环</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生<code>bool</code>值的表达式来控制循环，当表达式的值为<code>True</code>时则继续循环，当表达式的值为<code>False</code>时则结束循环。</p><p>下面我们通过一个“猜数字”的小游戏来看看如何使用<code>while</code>循环。猜数字游戏的规则是：计算机出一个<code>1</code>到<code>100</code>之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息（大一点、小一点或猜对了），如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
猜数字游戏


&quot;&quot;&quot;</span>
<span class="token keyword">import</span> random

<span class="token comment"># 产生一个1-100范围的随机数</span>
answer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
counter <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    counter <span class="token operator">+=</span> <span class="token number">1</span>
    number <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> number <span class="token operator">&lt;</span> answer<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;大一点&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> number <span class="token operator">&gt;</span> answer<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;小一点&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;恭喜你猜对了!&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
<span class="token comment"># 当退出while循环的时候显示用户一共猜了多少次</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;你总共猜了</span><span class="token interpolation"><span class="token punctuation">{</span>counter<span class="token punctuation">}</span></span><span class="token string">次&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="break和continue" tabindex="-1"><a class="header-anchor" href="#break和continue" aria-hidden="true">#</a> break和continue</h3><p>上面的代码中使用<code>while True</code>构造了一个条件恒成立的循环，也就意味着如果不做特殊处理，循环是不会结束的，这也就是常说的“死循环”。为了在用户猜中数字时能够退出循环结构，我们使用了<code>break</code>关键字，它的作用是提前结束循环。需要注意的是，<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套循环结构时需要引起注意，下面的例子我们会讲到什么是嵌套的循环结构。除了<code>break</code>之外，还有另一个关键字是<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。</p><h3 id="嵌套的循环结构" tabindex="-1"><a class="header-anchor" href="#嵌套的循环结构" aria-hidden="true">#</a> 嵌套的循环结构</h3><p>和分支结构一样，循环结构也是可以嵌套的，也就是说在循环中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个乘法口诀表（九九表）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
打印乘法口诀表


&quot;&quot;&quot;</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">*</span><span class="token interpolation"><span class="token punctuation">{</span>j<span class="token punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">{</span>i <span class="token operator">*</span> j<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然，在上面的代码中，外层循环用来控制一共会产生<code>9</code>行的输出，而内层循环用来控制每一行会输出多少列。内层循环中的输出就是九九表一行中的所有列，所以在内层循环完成时，有一个<code>print()</code>来实现换行输出的效果。</p><h3 id="循环的例子" tabindex="-1"><a class="header-anchor" href="#循环的例子" aria-hidden="true">#</a> 循环的例子</h3><h4 id="例子1-输入一个正整数判断它是不是素数。" tabindex="-1"><a class="header-anchor" href="#例子1-输入一个正整数判断它是不是素数。" aria-hidden="true">#</a> 例子1：输入一个正整数判断它是不是素数。</h4><blockquote><p><strong>提示</strong>：素数指的是只能被1和自身整除的大于1的整数。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
输入一个正整数判断它是不是素数


&quot;&quot;&quot;</span>
num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入一个正整数: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
end <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
is_prime <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> num <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        is_prime <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">break</span>
<span class="token keyword">if</span> is_prime <span class="token keyword">and</span> num <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token string">是素数&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token string">不是素数&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子2-输入两个正整数-计算它们的最大公约数和最小公倍数。" tabindex="-1"><a class="header-anchor" href="#例子2-输入两个正整数-计算它们的最大公约数和最小公倍数。" aria-hidden="true">#</a> 例子2：输入两个正整数，计算它们的最大公约数和最小公倍数。</h4><blockquote><p><strong>提示</strong>：两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
输入两个正整数计算它们的最大公约数和最小公倍数


&quot;&quot;&quot;</span>

x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;x = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;y = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> factor <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token operator">%</span> factor <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> y <span class="token operator">%</span> factor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">和</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">的最大公约数是</span><span class="token interpolation"><span class="token punctuation">{</span>factor<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">和</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">的最小公倍数是</span><span class="token interpolation"><span class="token punctuation">{</span>x <span class="token operator">*</span> y <span class="token operator">//</span> factor<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-1" tabindex="-1"><a class="header-anchor" href="#简单的总结-1" aria-hidden="true">#</a> 简单的总结</h3><p>学会了Python中的分支结构和循环结构，我们就可以解决很多实际的问题了。通过这节课的学习，大家应该已经知道了可以用<code>for</code>和<code>while</code>关键字来构造循环结构。<strong>如果知道循环的次数，我们通常使用</strong><code>for</code><strong>循环</strong>；如果<strong>循环次数不能确定，可以用</strong><code>while</code><strong>循环</strong>。在循环中还<strong>可以使用</strong><code>break</code><strong>来提前结束循环</strong>。</p><h2 id="第07课-分支和循环结构的应用" tabindex="-1"><a class="header-anchor" href="#第07课-分支和循环结构的应用" aria-hidden="true">#</a> 第07课：分支和循环结构的应用</h2><p>通过上两节课的学习，大家对Python中的分支和循环结构已经有了感性的认识。<strong>分支和循环结构</strong>的重要性不言而喻，它<strong>是构造程序逻辑的基础</strong>，对于初学者来说也是比较困难的部分。大部分初学者在学习了分支和循环结构后都能理解它们的用途和用法，但是遇到实际问题的时候又无法下手；<strong>看懂别人的代码很容易，但是要自己写出同样的代码却又很难</strong>。如果你也有同样的问题和困惑，千万不要沮丧，这只是因为你才刚刚开始编程之旅，<strong>你的练习量还没有达到让你可以随心所欲的写出代码的程度</strong>，只要加强编程练习，这个问题迟早都会解决的。下面我们就为大家讲解一些经典的案例。</p><h3 id="经典小案例" tabindex="-1"><a class="header-anchor" href="#经典小案例" aria-hidden="true">#</a> 经典小案例</h3><h4 id="例子1-寻找水仙花数。" tabindex="-1"><a class="header-anchor" href="#例子1-寻找水仙花数。" aria-hidden="true">#</a> 例子1：寻找水仙花数。</h4><blockquote><p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$ 153=1<sup>3+5</sup>3+3^3 $。</p></blockquote><p>这个题目的关键是将一个三位数拆分为个位、十位、百位，这一点利用Python中的<code>//</code>（整除）和<code>%</code>（求模）运算符其实很容易做到，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
找出所有水仙花数


&quot;&quot;&quot;</span>
<span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    low <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span>
    mid <span class="token operator">=</span> num <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span>
    high <span class="token operator">=</span> num <span class="token operator">//</span> <span class="token number">100</span>
    <span class="token keyword">if</span> num <span class="token operator">==</span> low <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> mid <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> high <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面利用<code>//</code>和<code>%</code>拆分一个数的小技巧在写代码的时候还是很常用的。我们要将一个不知道有多少位的正整数进行反转，例如将<code>12345</code>变成<code>54321</code>，也可以利用这两个运算来实现，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
正整数的反转


&quot;&quot;&quot;</span>
num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;num = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
reversed_num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    reversed_num <span class="token operator">=</span> reversed_num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> num <span class="token operator">%</span> <span class="token number">10</span>
    num <span class="token operator">//=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>reversed_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子2-百钱百鸡问题。" tabindex="-1"><a class="header-anchor" href="#例子2-百钱百鸡问题。" aria-hidden="true">#</a> 例子2：百钱百鸡问题。</h4>`,42),gn=n("strong",null,"说明",-1),hn={href:"https://baike.baidu.com/item/%E5%BC%A0%E4%B8%98%E5%BB%BA/10246238",target:"_blank",rel:"noopener noreferrer"},yn=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
《百钱百鸡》问题


&quot;&quot;&quot;</span>
<span class="token comment"># 假设公鸡的数量为x，x的取值范围是0到20</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 假设母鸡的数量为y，y的取值范围是0到33</span>
    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        z <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">-</span> x <span class="token operator">-</span> y
        <span class="token keyword">if</span> <span class="token number">5</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> y <span class="token operator">+</span> z <span class="token operator">//</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">100</span> <span class="token keyword">and</span> z <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;公鸡: </span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">只, 母鸡: </span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">只, 小鸡: </span><span class="token interpolation"><span class="token punctuation">{</span>z<span class="token punctuation">}</span></span><span class="token string">只&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，只要问题的解存在就能够找到它。</p><h4 id="例子3-craps赌博游戏。" tabindex="-1"><a class="header-anchor" href="#例子3-craps赌博游戏。" aria-hidden="true">#</a> 例子3：CRAPS赌博游戏。</h4><blockquote><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简化后的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；玩家如果摇出其他点数则玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数玩家继续摇骰子，直到分出胜负。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
Craps赌博游戏
我们设定游戏开始时玩家有1000元的赌注
游戏结束的条件是玩家破产（输光所有的赌注）


&quot;&quot;&quot;</span>
<span class="token keyword">from</span> random <span class="token keyword">import</span> randint

money <span class="token operator">=</span> <span class="token number">1000</span>
<span class="token keyword">while</span> money <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;你的总资产为: </span><span class="token interpolation"><span class="token punctuation">{</span>money<span class="token punctuation">}</span></span><span class="token string">元&#39;</span></span><span class="token punctuation">)</span>
    go_on <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token comment"># 下注金额必须大于0小于等于玩家总资产</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        debt <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请下注: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> debt <span class="token operator">&lt;=</span> money<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
    <span class="token comment"># 第一次摇色子</span>
    <span class="token comment"># 用1到6均匀分布的随机数模拟摇色子得到的点数</span>
    first <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;\\n玩家摇出了</span><span class="token interpolation"><span class="token punctuation">{</span>first<span class="token punctuation">}</span></span><span class="token string">点&#39;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> first <span class="token operator">==</span> <span class="token number">7</span> <span class="token keyword">or</span> first <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;玩家胜!\\n&#39;</span><span class="token punctuation">)</span>
        money <span class="token operator">+=</span> debt
    <span class="token keyword">elif</span> first <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">or</span> first <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">or</span> first <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;庄家胜!\\n&#39;</span><span class="token punctuation">)</span>
        money <span class="token operator">-=</span> debt
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        go_on <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token comment"># 第一次摇色子没有分出胜负游戏继续</span>
    <span class="token keyword">while</span> go_on<span class="token punctuation">:</span>
        go_on <span class="token operator">=</span> <span class="token boolean">False</span>
        current <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;玩家摇出了</span><span class="token interpolation"><span class="token punctuation">{</span>current<span class="token punctuation">}</span></span><span class="token string">点&#39;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> current <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;庄家胜!\\n&#39;</span><span class="token punctuation">)</span>
            money <span class="token operator">-=</span> debt
        <span class="token keyword">elif</span> current <span class="token operator">==</span> first<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;玩家胜!\\n&#39;</span><span class="token punctuation">)</span>
            money <span class="token operator">+=</span> debt
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            go_on <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;你破产了, 游戏结束!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子4-斐波那契数列。" tabindex="-1"><a class="header-anchor" href="#例子4-斐波那契数列。" aria-hidden="true">#</a> 例子4：斐波那契数列。</h4><blockquote><p><strong>说明</strong>：斐波那契数列（Fibonacci sequence），通常也被称作黄金分割数列，是意大利数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）在《计算之书》中研究在理想假设条件下兔子成长率问题而引入的数列，因此这个数列也常被戏称为“兔子数列”。斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，按照这个规律，斐波那契数列的前10个数是：<code>1, 1, 2, 3, 5, 8, 13, 21, 34, 55</code>。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
输出斐波那契数列前20个数


&quot;&quot;&quot;</span>

a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子5-打印100以内的素数。" tabindex="-1"><a class="header-anchor" href="#例子5-打印100以内的素数。" aria-hidden="true">#</a> 例子5：打印100以内的素数。</h4><blockquote><p><strong>说明</strong>：素数指的是只能被1和自身整除的正整数（不包括1）。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
输出100以内的素数


&quot;&quot;&quot;</span>
<span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 假设num是素数</span>
    is_prime <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token comment"># 在2到num-1之间找num的因子</span>
    <span class="token keyword">for</span> factor <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 如果找到了num的因子，num就不是素数</span>
        <span class="token keyword">if</span> num <span class="token operator">%</span> factor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            is_prime <span class="token operator">=</span> <span class="token boolean">False</span>
            <span class="token keyword">break</span>
    <span class="token comment"># 如果布尔值为True在num是素数</span>
    <span class="token keyword">if</span> is_prime<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-2" tabindex="-1"><a class="header-anchor" href="#简单的总结-2" aria-hidden="true">#</a> 简单的总结</h3><p>还是那句话：<strong>分支结构和循环结构非常重要</strong>，是构造程序逻辑的基础，<strong>一定要通过大量的练习来达到融会贯通</strong>。刚才讲到的CRAPS赌博游戏那个例子可以作为一个标准，如果你能很顺利的完成这段代码，那么分支和循环结构的知识你就已经掌握了。</p><h2 id="第08课-常用数据结构之列表" tabindex="-1"><a class="header-anchor" href="#第08课-常用数据结构之列表" aria-hidden="true">#</a> 第08课：常用数据结构之列表</h2><p>在开始本节课的内容之前，我们先给大家一个编程任务，将一颗色子掷<code>6000</code>次，统计每个点数出现的次数。这个任务对大家来说应该是非常简单的，我们可以用<code>1</code>到<code>6</code>均匀分布的随机数来模拟掷色子，然后用<code>6</code>个变量分别记录每个点数出现的次数，相信大家都能写出下面的代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

f1 <span class="token operator">=</span> <span class="token number">0</span>
f2 <span class="token operator">=</span> <span class="token number">0</span>
f3 <span class="token operator">=</span> <span class="token number">0</span>
f4 <span class="token operator">=</span> <span class="token number">0</span>
f5 <span class="token operator">=</span> <span class="token number">0</span>
f6 <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    face <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> face <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        f1 <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">elif</span> face <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        f2 <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">elif</span> face <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
        f3 <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">elif</span> face <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
        f4 <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">elif</span> face <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>
        f5 <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        f6 <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;1点出现了</span><span class="token interpolation"><span class="token punctuation">{</span>f1<span class="token punctuation">}</span></span><span class="token string">次&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;2点出现了</span><span class="token interpolation"><span class="token punctuation">{</span>f2<span class="token punctuation">}</span></span><span class="token string">次&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;3点出现了</span><span class="token interpolation"><span class="token punctuation">{</span>f3<span class="token punctuation">}</span></span><span class="token string">次&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;4点出现了</span><span class="token interpolation"><span class="token punctuation">{</span>f4<span class="token punctuation">}</span></span><span class="token string">次&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;5点出现了</span><span class="token interpolation"><span class="token punctuation">{</span>f5<span class="token punctuation">}</span></span><span class="token string">次&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;6点出现了</span><span class="token interpolation"><span class="token punctuation">{</span>f6<span class="token punctuation">}</span></span><span class="token string">次&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看上面的代码，相信大家一定觉得它非常的“笨重”和“丑陋”，更可怕的是，如果要统计掷两颗或者更多的色子统计每个点数出现的次数，那就需要定义更多的变量，写更多的分支结构。讲到这里，相信大家一定想问：有没有办法用一个变量来保存多个数据，有没有办法用统一的代码对多个数据进行操作？答案是肯定的，在Python中我们可以通过容器类型的变量来保存和操作多个数据，我们首先为大家介绍列表（list）这种新的数据类型。</p><h3 id="定义和使用列表" tabindex="-1"><a class="header-anchor" href="#定义和使用列表" aria-hidden="true">#</a> 定义和使用列表</h3><p>在Python中，<strong>列表是由一系元素按特定顺序构成的数据序列</strong>，这样就意味着定义一个列表类型的变量，<strong>可以保存多个数据</strong>，而且<strong>允许有重复的数据</strong>。跟上一课我们讲到的字符串类型一样，列表也是一种结构化的、非标量类型，操作一个列表类型的变量，除了可以使用运算符还可以使用它的方法。</p><p>在Python中，可以使用<code>[]</code>字面量语法来定义列表，列表中的多个元素用逗号进行分隔，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">]</span>
items2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除此以外，还可以通过Python内置的<code>list</code>函数将其他序列变成列表。准确的说，<code>list</code>并不是一个普通的函数，它是创建列表对象的构造器（后面会讲到对象和构造器这两个概念）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items1<span class="token punctuation">)</span>    <span class="token comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
items2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items2<span class="token punctuation">)</span>    <span class="token comment"># [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是，列表是一种可变数据类型，也就是说列表可以添加元素、删除元素、更新元素，这一点跟我们上一课讲到的字符串有着鲜明的差别。字符串是一种不可变数据类型，也就是说对字符串做拼接、重复、转换大小写、修剪空格等操作的时候会产生新的字符串，原来的字符串并没有发生任何改变。</p><h4 id="列表的运算符" tabindex="-1"><a class="header-anchor" href="#列表的运算符" aria-hidden="true">#</a> 列表的运算符</h4><p>和字符串类型一样，列表也支持拼接、重复、成员运算、索引和切片以及比较运算，对此我们不再进行赘述，请大家参考下面的代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">]</span>
items2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span>

<span class="token comment"># 列表的拼接</span>
items3 <span class="token operator">=</span> items1 <span class="token operator">+</span> items2
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">)</span>    <span class="token comment"># [35, 12, 99, 68, 55, 87, 45, 8, 29]</span>

<span class="token comment"># 列表的重复</span>
items4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items4<span class="token punctuation">)</span>    <span class="token comment"># [&#39;hello&#39;, &#39;hello&#39;, &#39;hello&#39;]</span>

<span class="token comment"># 列表的成员运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token keyword">in</span> items3<span class="token punctuation">)</span>        <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token keyword">in</span> items4<span class="token punctuation">)</span>    <span class="token comment"># True</span>

<span class="token comment"># 获取列表的长度(元素个数)</span>
size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items3<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>                 <span class="token comment"># 9</span>

<span class="token comment"># 列表的索引</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> items3<span class="token punctuation">[</span><span class="token operator">-</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 35 35</span>
items3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> items3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 100 100</span>

<span class="token comment"># 列表的切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># [35, 12, 99, 68, 55]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># [55, 87, 45, 8, 100]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># [55, 68]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># [100, 45, 55, 99, 35]</span>

<span class="token comment"># 列表的比较运算</span>
items5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
items6 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 两个列表比较相等性比的是对应索引位置上的元素是否相等</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items5 <span class="token operator">==</span> items6<span class="token punctuation">)</span>    <span class="token comment"># True</span>
items7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment"># 两个列表比较大小比的是对应索引位置上的元素的大小</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items5 <span class="token operator">&lt;=</span> items7<span class="token punctuation">)</span>    <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得一提的是，由于列表是可变类型，所以通过索引操作既可以获取列表中的元素，也可以更新列表中的元素。对列表做索引操作一样要注意索引越界的问题，对于有<code>N</code>个元素的列表，正向索引的范围是<code>0</code>到<code>N-1</code>，负向索引的范围是<code>-1</code>到<code>-N</code>，如果超出这个范围，将引发<code>IndexError</code>异常，错误信息为：<code>list index out of range</code>。</p><h4 id="列表元素的遍历" tabindex="-1"><a class="header-anchor" href="#列表元素的遍历" aria-hidden="true">#</a> 列表元素的遍历</h4><p>如果想逐个取出列表中的元素，可以使用<code>for</code>循环的，有以下两种做法。</p><p>方法一：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>讲到这里，我们可以用列表的知识来重构上面“掷色子统计每个点数出现次数”的代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

counters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">6</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    face <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
    counters<span class="token punctuation">[</span>face <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">for</span> face <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>face<span class="token punctuation">}</span></span><span class="token string">点出现了</span><span class="token interpolation"><span class="token punctuation">{</span>counters<span class="token punctuation">[</span>face <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">次&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，我们用<code>counters</code>列表中的六个元素分别表示1到6的点数出现的次数，最开始的时候六个元素的值都是<code>0</code>。接下来用随机数模拟掷色子，如果摇出1点<code>counters[0]</code>的值加<code>1</code>，如果摇出2点<code>counters[1]</code>的值加<code>1</code>，以此类推。大家感受一下，这段代码是不是比之前的代码要简单优雅很多。</p><h3 id="列表的方法" tabindex="-1"><a class="header-anchor" href="#列表的方法" aria-hidden="true">#</a> 列表的方法</h3><p>和字符串一样，列表类型的方法也很多，下面为大家讲解比较重要的方法。</p><h4 id="添加和删除元素" tabindex="-1"><a class="header-anchor" href="#添加和删除元素" aria-hidden="true">#</a> 添加和删除元素</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># 使用append方法在列表尾部添加元素</span>
items<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;Swift&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token comment"># [&#39;python&#39;, &#39;Java&#39;, &#39;Go&#39;, &#39;Kotlin&#39;, &#39;Swift&#39;]</span>
<span class="token comment"># 使用insert方法在列表指定索引位置插入元素</span>
items<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;SQL&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token comment"># [&#39;python&#39;, &#39;Java&#39;, &#39;SQL&#39;, &#39;Go&#39;, &#39;Kotlin&#39;, &#39;Swift&#39;]</span>

<span class="token comment"># 删除指定的元素</span>
items<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;Java&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token comment"># [&#39;python&#39;, &#39;SQL&#39;, &#39;Go&#39;, &#39;Kotlin&#39;, &#39;Swift&#39;]</span>
<span class="token comment"># 删除指定索引位置的元素</span>
items<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
items<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token comment"># [&#39;SQL&#39;, &#39;Go&#39;, &#39;Kotlin&#39;]</span>

<span class="token comment"># 清空列表中的元素</span>
items<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token comment"># []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要提醒大家，在使用<code>remove</code>方法删除元素时，如果要删除的元素并不在列表中，会引发<code>ValueError</code>异常，错误消息是：<code>list.remove(x): x not in list</code>。在使用<code>pop</code>方法删除元素时，如果索引的值超出了范围，会引发<code>IndexError</code>异常，错误消息是：<code>pop index out of range</code>。</p><p>从列表中删除元素其实还有一种方式，就是使用Python中的<code>del</code>关键字后面跟要删除的元素，这种做法跟使用<code>pop</code>方法指定索引删除元素没有实质性的区别，但后者会返回删除的元素，前者在性能上略优（<code>del</code>对应字节码指令是<code>DELETE_SUBSCR</code>，而<code>pop</code>对应的字节码指令是<code>CALL_METHOD</code>和<code>POP_TOP</code>，不理解就跳过，不用管它！！！）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token comment"># [&#39;python&#39;, &#39;Go&#39;, &#39;Kotlin&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元素位置和次数" tabindex="-1"><a class="header-anchor" href="#元素位置和次数" aria-hidden="true">#</a> 元素位置和次数</h4><p>列表类型的<code>index</code>方法可以查找某个元素在列表中的索引位置；因为列表中允许有重复的元素，所以列表类型提供了<code>count</code>方法来统计一个元素在列表中出现的次数。请看下面的代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># 查找元素的索引位置</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 5</span>
<span class="token comment"># 注意：虽然列表中有&#39;Java&#39;，但是从索引为3这个位置开始后面是没有&#39;Java&#39;的</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># ValueError: &#39;Java&#39; is not in list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来看看下面这段代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># 查找元素出现的次数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;Go&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;Swfit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元素排序和反转" tabindex="-1"><a class="header-anchor" href="#元素排序和反转" aria-hidden="true">#</a> 元素排序和反转</h4><p>列表的<code>sort</code>操作可以实现列表元素的排序，而<code>reverse</code>操作可以实现元素的反转，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># 排序</span>
items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token comment"># [&#39;Go&#39;, &#39;Java&#39;, &#39;Kotlin&#39;, &#39;python&#39;, &#39;python&#39;]</span>
<span class="token comment"># 反转</span>
items<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    <span class="token comment"># [&#39;python&#39;, &#39;python&#39;, &#39;Kotlin&#39;, &#39;Java&#39;, &#39;Go&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表的生成式" tabindex="-1"><a class="header-anchor" href="#列表的生成式" aria-hidden="true">#</a> 列表的生成式</h3><p>在Python中，列表还可以通过一种特殊的字面量语法来创建，这种语法叫做生成式。我们给出两段代码，大家可以做一个对比，看看哪一种方式更加简单优雅。</p><p>通过<code>for</code>循环为空列表添加元素。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个由1到9的数字构成的列表</span>
items1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    items1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items1<span class="token punctuation">)</span>

<span class="token comment"># 创建一个由&#39;hello world&#39;中除空格和元音字母外的字符构成的列表</span>
items2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">&#39; aeiou&#39;</span><span class="token punctuation">:</span>
        items2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items2<span class="token punctuation">)</span>

<span class="token comment"># 创建一个由个两个字符串中字符的笛卡尔积构成的列表</span>
items3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">&#39;ABC&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token string">&#39;12&#39;</span><span class="token punctuation">:</span>
        items3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过生成式创建列表。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个由1到9的数字构成的列表</span>
items1 <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items1<span class="token punctuation">)</span>    <span class="token comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>

<span class="token comment"># 创建一个由&#39;hello world&#39;中除空格和元音字母外的字符构成的列表</span>
items2 <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">&#39;hello world&#39;</span> <span class="token keyword">if</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">&#39; aeiou&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items2<span class="token punctuation">)</span>    <span class="token comment"># [&#39;h&#39;, &#39;l&#39;, &#39;l&#39;, &#39;w&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;]</span>

<span class="token comment"># 创建一个由个两个字符串中字符的笛卡尔积构成的列表</span>
items3 <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">+</span> y <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">&#39;ABC&#39;</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token string">&#39;12&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">)</span>    <span class="token comment"># [&#39;A1&#39;, &#39;A2&#39;, &#39;B1&#39;, &#39;B2&#39;, &#39;C1&#39;, &#39;C2&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这种方式不仅代码简单优雅，而且性能也优于上面使用<code>for</code>循环和<code>append</code>方法向空列表中追加元素的方式。可以简单跟大家交待下为什么生成式拥有更好的性能，那是因为Python解释器的字节码指令中有专门针对生成式的指令（<code>LIST_APPEND</code>指令）；而<code>for</code>循环是通过方法调用（<code>LOAD_METHOD</code>和<code>CALL_METHOD</code>指令）的方式为列表添加元素，方法调用本身就是一个相对耗时的操作。对这一点不理解也没有关系，记住“<strong>强烈建议用生成式语法来创建列表</strong>”这个结论就可以了。</p><h3 id="嵌套的列表" tabindex="-1"><a class="header-anchor" href="#嵌套的列表" aria-hidden="true">#</a> 嵌套的列表</h3><p>Python语言没有限定列表中的元素必须是相同的数据类型，也就是说一个列表中的元素可以任意的数据类型，当然也包括列表。如果列表中的元素又是列表，那么我们可以称之为嵌套的列表。嵌套的列表可以用来表示表格或数学上的矩阵，例如：我们想保存5个学生3门课程的成绩，可以定义一个保存5个元素的列表保存5个学生的信息，而每个列表元素又是3个元素构成的列表，分别代表3门课程的成绩。但是，一定要注意下面的代码是有问题的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>    <span class="token comment"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>看上去我们好像创建了一个<code>5 * 3</code>的嵌套列表，但实际上当我们录入第一个学生的第一门成绩后，你就会发现问题来了，我们看看下面代码的输出。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 嵌套的列表需要多次索引操作才能获取元素</span>
scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>
<span class="token comment"># [[95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,64),wn={href:"http://www.pythontutor.com/visualize.html",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"[[0] * 3] * 5]",-1),xn=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>
<span class="token comment"># [[95, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-3" tabindex="-1"><a class="header-anchor" href="#简单的总结-3" aria-hidden="true">#</a> 简单的总结</h3><p>Python中的列表底层是一个可以动态扩容的数组，列表元素在内存中也是连续存储的，所以可以实现随机访问（通过一个有效的索引获取到对应的元素且操作时间与列表元素个数无关）。我们暂时不去触碰这些底层存储细节以及列表每个方法的渐近时间复杂度（执行这个方法耗费的时间跟列表元素个数的关系），等需要的时候再告诉大家。现阶段，大家只需要知道<strong>列表是容器</strong>，可以<strong>保存各种类型的数据</strong>，<strong>可以通过索引操作列表元素</strong>，知道这些就足够了。</p><h2 id="第09课-常用数据结构之元组" tabindex="-1"><a class="header-anchor" href="#第09课-常用数据结构之元组" aria-hidden="true">#</a> 第09课：常用数据结构之元组</h2><p>上一节课为大家讲解了Python中的列表，它是一种容器型数据类型，我们可以通过定义列表类型的变量来保存和操作多个元素。当然，Python中容器型的数据类型肯定不止列表一种，接下来我们为大家讲解另一种重要的容器型数据类型，它的名字叫元组（tuple）。</p><h3 id="定义和使用元组" tabindex="-1"><a class="header-anchor" href="#定义和使用元组" aria-hidden="true">#</a> 定义和使用元组</h3><p>在Python中，元组也是多个元素按照一定的顺序构成的序列。元组和列表的不同之处在于，元组是不可变类型，这就意味着元组类型的变量一旦定义，其中的元素不能再添加或删除，而且元素的值也不能进行修改。定义元组通常使用<code>()</code>字面量语法，也建议大家使用这种方式来创建元组。元组类型支持的运算符跟列表是一样。下面的代码演示了元组的定义和运算。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义一个三元组</span>
t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span>
<span class="token comment"># 定义一个四元组</span>
t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;骆昊&#39;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;四川成都&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 查看变量的类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;tuple&#39;&gt; &lt;class &#39;tuple&#39;&gt;</span>
<span class="token comment"># 查看元组中元素的数量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 3 4</span>

<span class="token comment"># 通过索引运算获取元组中的元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 30 30</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 四川成都 四川成都</span>

<span class="token comment"># 循环遍历元组中的元素</span>
<span class="token keyword">for</span> member <span class="token keyword">in</span> t2<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span>

<span class="token comment"># 成员运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token keyword">in</span> t1<span class="token punctuation">)</span>    <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">40</span> <span class="token keyword">in</span> t2<span class="token punctuation">)</span>     <span class="token comment"># True</span>

<span class="token comment"># 拼接</span>
t3 <span class="token operator">=</span> t1 <span class="token operator">+</span> t2
<span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span>           <span class="token comment"># (30, 10, 55, &#39;骆昊&#39;, 40, True, &#39;四川成都&#39;)</span>

<span class="token comment"># 切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># (30, &#39;骆昊&#39;, &#39;四川成都&#39;)</span>

<span class="token comment"># 比较运算</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t3<span class="token punctuation">)</span>    <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">&gt;=</span> t3<span class="token punctuation">)</span>    <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个元组中如果有两个元素，我们就称之为二元组；一个元组中如果五个元素，我们就称之为五元组。需要提醒大家注意的是，<code>()</code>表示空元组，但是如果元组中只有一个元素，需要加上一个逗号，否则<code>()</code>就不是代表元组的字面量语法，而是改变运算优先级的圆括号，所以<code>(&#39;hello&#39;, )</code>和<code>(100, )</code>才是一元组，而<code>(&#39;hello&#39;)</code>和<code>(100)</code>只是字符串和整数。我们可以通过下面的代码来加以验证。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 空元组</span>
a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span>
<span class="token comment"># 不是元组</span>
b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;str&#39;&gt;</span>
c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;int&#39;&gt;</span>
<span class="token comment"># 一元组</span>
d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span>
e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组的应用场景" tabindex="-1"><a class="header-anchor" href="#元组的应用场景" aria-hidden="true">#</a> 元组的应用场景</h3><p>讲到这里，相信大家一定迫切的想知道元组有哪些应用场景，我们给大家举几个例子。</p><h4 id="例子1-打包和解包操作。" tabindex="-1"><a class="header-anchor" href="#例子1-打包和解包操作。" aria-hidden="true">#</a> 例子1：打包和解包操作。</h4><p>当我们把多个用逗号分隔的值赋给一个变量时，多个值会打包成一个元组类型；当我们把一个元组赋值给多个变量时，元组会解包成多个值然后分别赋给对应的变量，如下面的代码所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 打包</span>
a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment"># &lt;class &#39;tuple&#39;&gt; (1, 10, 100)</span>
<span class="token comment"># 解包</span>
i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">=</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>       <span class="token comment"># 1 10 100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在解包时，如果解包出来的元素个数和变量个数不对应，会引发<code>ValueError</code>异常，错误信息为：<code>too many values to unpack</code>（解包的值太多）或<code>not enough values to unpack</code>（解包的值不足）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span>
<span class="token comment"># i, j, k = a             # ValueError: too many values to unpack (expected 3)</span>
<span class="token comment"># i, j, k, l, m, n = a    # ValueError: not enough values to unpack (expected 6, got 4)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有一种解决变量个数少于元素的个数方法，就是使用星号表达式，我们之前讲函数的可变参数时使用过星号表达式。有了星号表达式，我们就可以让一个变量接收多个值，代码如下所示。需要注意的是，用星号表达式修饰的变量会变成一个列表，列表中有0个或多个元素。还有在解包语法中，星号表达式只能出现一次。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span>
i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token operator">*</span>k <span class="token operator">=</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>          <span class="token comment"># 1 10 [100, 1000]</span>
i<span class="token punctuation">,</span> <span class="token operator">*</span>j<span class="token punctuation">,</span> k <span class="token operator">=</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>          <span class="token comment"># 1 [10, 100] 1000</span>
<span class="token operator">*</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">=</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>          <span class="token comment"># [1, 10] 100 1000</span>
<span class="token operator">*</span>i<span class="token punctuation">,</span> j <span class="token operator">=</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>             <span class="token comment"># [1, 10, 100] 1000</span>
i<span class="token punctuation">,</span> <span class="token operator">*</span>j <span class="token operator">=</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>             <span class="token comment"># 1 [10, 100, 1000]</span>
i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token operator">*</span>l <span class="token operator">=</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">)</span>       <span class="token comment"># 1 10 100 [1000]</span>
i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token operator">*</span>m <span class="token operator">=</span> a
<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    <span class="token comment"># 1 10 100 1000 []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明一点，解包语法对所有的序列都成立，这就意味着对列表以及我们之前讲到的<code>range</code>函数返回的范围序列都可以使用解包语法。大家可以尝试运行下面的代码，看看会出现怎样的结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子2-交换两个变量的值。" tabindex="-1"><a class="header-anchor" href="#例子2-交换两个变量的值。" aria-hidden="true">#</a> 例子2：交换两个变量的值。</h4><p>交换两个变量的值是编程语言中的一个经典案例，在很多编程语言中，交换两个变量的值都需要借助一个中间变量才能做到，如果不用中间变量就需要使用比较晦涩的位运算来实现。在Python中，交换两个变量<code>a</code>和<code>b</code>的值只需要使用如下所示的代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同理，如果要将三个变量<code>a</code>、<code>b</code>、<code>c</code>的值互换，即<code>b</code>赋给<code>a</code>，<code>c</code>赋给<code>b</code>，<code>a</code>赋给<code>c</code>，也可以如法炮制。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要说明的是，上面并没有用到打包和解包语法，Python的字节码指令中有<code>ROT_TWO</code>和<code>ROT_THREE</code>这样的指令可以实现这个操作，效率是非常高的。但是如果有多于三个变量的值要依次互换，这个时候没有直接可用的字节码指令，执行的原理就是我们上面讲解的打包和解包操作。</p><h3 id="元组和列表的比较" tabindex="-1"><a class="header-anchor" href="#元组和列表的比较" aria-hidden="true">#</a> 元组和列表的比较</h3><p>这里还有一个非常值得探讨的问题，Python中已经有了列表类型，为什么还需要元组这样的类型呢？这个问题对于初学者来说似乎有点困难，不过没有关系，我们先抛出观点，大家可以一边学习一边慢慢体会。</p><ol><li><p>元组是不可变类型，<strong>不可变类型更适合多线程环境</strong>，因为它降低了并发访问变量的同步化开销。关于这一点，我们会在后面讲解多线程的时候为大家详细论述。</p></li><li><p>元组是不可变类型，通常<strong>不可变类型在创建时间和占用空间上面都优于对应的可变类型</strong>。我们可以使用<code>sys</code>模块的<code>getsizeof</code>函数来检查保存相同元素的元组和列表各自占用了多少内存空间。我们也可以使用<code>timeit</code>模块的<code>timeit</code>函数来看看创建保存相同元素的元组和列表各自花费的时间，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">import</span> timeit

a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 900120 800056</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token string">&#39;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token string">&#39;(1, 2, 3, 4, 5, 6, 7, 8, 9)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Python中的元组和列表是可以相互转换的，我们可以通过下面的代码来做到。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将元组转换成列表</span>
info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;骆昊&#39;</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;四川成都&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># [&#39;骆昊&#39;, 175, True, &#39;四川成都&#39;]</span>
<span class="token comment"># 将列表转换成元组</span>
fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># (&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="简单的总结-4" tabindex="-1"><a class="header-anchor" href="#简单的总结-4" aria-hidden="true">#</a> 简单的总结</h3><p><strong>列表和元组都是容器型的数据类型</strong>，即一个变量可以保存多个数据。<strong>列表是可变数据类型</strong>，<strong>元组是不可变数据类型</strong>，所以列表添加元素、删除元素、清空、排序等方法对于元组来说是不成立的。但是列表和元组都可以进行<strong>拼接</strong>、<strong>成员运算</strong>、<strong>索引和切片</strong>这些操作，后面我们要讲到的字符串类型也是这样，因为字符串就是字符按一定顺序构成的序列，在这一点上三者并没有什么区别。我们<strong>推荐大家使用列表的生成式语法来创建列表</strong>，它很好用，也是Python中非常有特色的语法。</p><h2 id="第10课-字符串的使用" tabindex="-1"><a class="header-anchor" href="#第10课-字符串的使用" aria-hidden="true">#</a> 第10课：字符串的使用</h2><p>第二次世界大战促使了现代电子计算机的诞生，世界上的第一台通用电子计算机叫ENIAC（电子数值积分计算机），诞生于美国的宾夕法尼亚大学，占地167平米，重量27吨，每秒钟大约能够完成约5000次浮点运算，如下图所示。ENIAC诞生之后被应用于导弹弹道的计算，而数值计算也是现代电子计算机最为重要的一项功能。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250723950.jpg" alt="" loading="lazy"></p><p>随着时间的推移，虽然数值运算仍然是计算机日常工作中最为重要的组成部分，但是今天的计算机还要处理大量的以文本形式存在的信息。如果我们希望通过Python程序来操作本这些文本信息，就必须要先了解字符串这种数据类型以及与它相关的知识。</p><h3 id="字符串的定义" tabindex="-1"><a class="header-anchor" href="#字符串的定义" aria-hidden="true">#</a> 字符串的定义</h3><p>所谓<strong>字符串</strong>，就是<strong>由零个或多个字符组成的有限序列</strong>，一般记为：</p>`,38),qn=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"s"),n("mo",null,"="),n("msub",null,[n("mi",null,"a"),n("mn",null,"1")]),n("msub",null,[n("mi",null,"a"),n("mn",null,"2")]),n("mo",null,"⋯"),n("msub",null,[n("mi",null,"a"),n("mi",null,"n")]),n("mtext",null," "),n("mtext",null," "),n("mtext",null," "),n("mtext",null," "),n("mtext",null," "),n("mo",{stretchy:"false"},"("),n("mn",null,"0"),n("mo",null,"≤"),n("mi",null,"n"),n("mo",null,"≤"),n("mi",{mathvariant:"normal"},"∞"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"}," s = a_1a_2 \\cdots a_n \\,\\,\\,\\,\\, (0 \\le n \\le \\infty) ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"minner"},"⋯"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"0"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≤"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7719em","vertical-align":"-0.136em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"≤"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"∞"),n("span",{class:"mclose"},")")])])])])],-1),_n={href:"http://www.ruanyifeng.com/blog/2017/04/emoji.html",target:"_blank",rel:"noopener noreferrer"},Pn=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;hello, world!&#39;</span>
s2 <span class="token operator">=</span> <span class="token string">&quot;你好，世界！&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
<span class="token comment"># 以三个双引号或单引号开头的字符串可以折行</span>
s3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;
hello, 
world!
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>提示</strong>：<code>print</code>函数中的<code>end=&#39;&#39;</code>表示输出后不换行，即将默认的结束符<code>\\n</code>（换行符）更换为<code>&#39;&#39;</code>（空字符）。</p></blockquote><h3 id="转义字符和原始字符串" tabindex="-1"><a class="header-anchor" href="#转义字符和原始字符串" aria-hidden="true">#</a> 转义字符和原始字符串</h3><p>可以在字符串中使用<code>\\</code>（反斜杠）来表示转义，也就是说<code>\\</code>后面的字符不再是它原来的意义，例如：<code>\\n</code>不是代表反斜杠和字符<code>n</code>，而是表示换行；<code>\\t</code>也不是代表反斜杠和字符<code>t</code>，而是表示制表符。所以如果字符串本身又包含了<code>&#39;</code>、<code>&quot;</code>、<code>\\</code>这些特殊的字符，必须要通过<code>\\</code>进行转义处理。例如要输出一个带单引号或反斜杠的字符串，需要用如下所示的方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;\\&#39;hello, world!\\&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
s2 <span class="token operator">=</span> <span class="token string">&#39;\\\\hello, world!\\\\&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python中的字符串可以<code>r</code>或<code>R</code>开头，这种字符串被称为原始字符串，意思是字符串中的每个字符都是它本来的含义，没有所谓的转义字符。例如，在字符串<code>&#39;hello\\n&#39;</code>中，<code>\\n</code>表示换行；而在<code>r&#39;hello\\n&#39;</code>中，<code>\\n</code>不再表示换行，就是反斜杠和字符<code>n</code>。大家可以运行下面的代码，看看会输出什么。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字符串s1中\\t是制表符，\\n是换行符</span>
s1 <span class="token operator">=</span> <span class="token string">&#39;\\time up \\now&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
<span class="token comment"># 字符串s2中没有转义字符，每个字符都是原始含义</span>
s2 <span class="token operator">=</span> <span class="token string">r&#39;\\time up \\now&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python中还允许在<code>\\</code>后面还可以跟一个八进制或者十六进制数来表示字符，例如<code>\\141</code>和<code>\\x61</code>都代表小写字母<code>a</code>，前者是八进制的表示法，后者是十六进制的表示法。另外一种表示字符的方式是在<code>\\u</code>后面跟Unicode字符编码，例如<code>\\u9a86\\u660a</code>代表的是中文“骆昊”。运行下面的代码，看看输出了什么。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;\\141\\142\\143\\x61\\x62\\x63&#39;</span>
s2 <span class="token operator">=</span> <span class="token string">&#39;\\u9a86\\u660a&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串的运算" tabindex="-1"><a class="header-anchor" href="#字符串的运算" aria-hidden="true">#</a> 字符串的运算</h3><p>Python为字符串类型提供了非常丰富的运算符，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串，我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符。</p><h4 id="拼接和重复" tabindex="-1"><a class="header-anchor" href="#拼接和重复" aria-hidden="true">#</a> 拼接和重复</h4><p>下面的例子演示了使用<code>+</code>和<code>*</code>运算符来实现字符串的拼接和重复操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token string">&#39;world&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token comment"># hello world</span>
s2 <span class="token operator">=</span> <span class="token string">&#39;!&#39;</span> <span class="token operator">*</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    <span class="token comment"># !!!</span>
s1 <span class="token operator">+=</span> s2     <span class="token comment"># s1 = s1 + s2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token comment"># hello world!!!</span>
s1 <span class="token operator">*=</span> <span class="token number">2</span>      <span class="token comment"># s1 = s1 * 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    <span class="token comment"># hello world!!!hello world!!!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用<code>*</code>实现字符串的重复是非常有意思的一个运算符，在很多编程语言中，要表示一个有10个<code>a</code>的字符串，你只能写成<code>&quot;aaaaaaaaaa&quot;</code>，但是在Python中，你可以写成<code>&#39;a&#39; * 10</code>。你可能觉得<code>&quot;aaaaaaaaaa&quot;</code>这种写法也没有什么不方便的，那么想一想，如果字符<code>a</code>要重复100次或者1000次又会如何呢？</p><h4 id="比较运算" tabindex="-1"><a class="header-anchor" href="#比较运算" aria-hidden="true">#</a> 比较运算</h4><p>对于两个字符串类型的变量，可以直接使用比较运算符比较两个字符串的相等性或大小。需要说明的是，因为字符串在计算机内存中也是以二进制形式存在的，那么字符串的大小比较比的是每个字符对应的编码的大小。例如<code>A</code>的编码是<code>65</code>， 而<code>a</code>的编码是<code>97</code>，所以<code>&#39;A&#39; &lt; &#39;a&#39;</code>的结果相当于就是<code>65 &lt; 97</code>的结果，很显然是<code>True</code>；而<code>&#39;boy&#39; &lt; &#39;bad&#39;</code>，因为第一个字符都是<code>&#39;b&#39;</code>比不出大小，所以实际比较的是第二个字符的大小，显然<code>&#39;o&#39; &lt; &#39;a&#39;</code>的结果是<code>False</code>，所以<code>&#39;boy&#39; &lt; &#39;bad&#39;</code>的结果也是<code>False</code>。如果不清楚两个字符对应的编码到底是多少，可以使用<code>ord</code>函数来获得，例如<code>ord(&#39;A&#39;)</code>的值是<code>65</code>，而<code>ord(&#39;昊&#39;)</code>的值是<code>26122</code>。下面的代码为大家展示了字符串的比较运算。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;a whole new world&#39;</span>
s2 <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">,</span> s1 <span class="token operator">&lt;</span> s2<span class="token punctuation">)</span>      <span class="token comment"># False True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">!=</span> <span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># True</span>
s3 <span class="token operator">=</span> <span class="token string">&#39;骆昊&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;骆&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;昊&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment"># 39558 26122</span>
s4 <span class="token operator">=</span> <span class="token string">&#39;王大锤&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;王&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;大&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;锤&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 29579 22823 38180</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s3 <span class="token operator">&gt;</span> s4<span class="token punctuation">,</span> s3 <span class="token operator">&lt;=</span> s4<span class="token punctuation">)</span>      <span class="token comment"># True False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要强调一下的是，字符串的比较运算比较的是字符串的内容，Python中还有一个<code>is</code>运算符（身份运算符），如果用<code>is</code>来比较两个字符串，它比较的是两个变量对应的字符串对象的内存地址（不理解先跳过），简单的说就是两个变量是否对应内存中的同一个字符串。看看下面的代码就比较清楚<code>is</code>运算符的作用了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
s2 <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
s3 <span class="token operator">=</span> s2
<span class="token comment"># 比较字符串的内容</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">,</span> s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span>    <span class="token comment"># True True</span>
<span class="token comment"># 比较字符串的内存地址</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token keyword">is</span> s2<span class="token punctuation">,</span> s2 <span class="token keyword">is</span> s3<span class="token punctuation">)</span>    <span class="token comment"># False True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="成员运算" tabindex="-1"><a class="header-anchor" href="#成员运算" aria-hidden="true">#</a> 成员运算</h4><p>Python中可以用<code>in</code>和<code>not in</code>判断一个字符串中是否存在另外一个字符或字符串，<code>in</code>和<code>not in</code>运算通常称为成员运算，会产生布尔值<code>True</code>或<code>False</code>，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;hello, world&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;wo&#39;</span> <span class="token keyword">in</span> s1<span class="token punctuation">)</span>    <span class="token comment"># True</span>
s2 <span class="token operator">=</span> <span class="token string">&#39;goodbye&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token keyword">in</span> s1<span class="token punctuation">)</span>      <span class="token comment"># False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取字符串长度" tabindex="-1"><a class="header-anchor" href="#获取字符串长度" aria-hidden="true">#</a> 获取字符串长度</h4><p>获取字符串长度没有直接的运算符，而是使用内置函数<code>len</code>，我们在上节课的提到过这个内置函数，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;hello, world&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment"># 12</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">&#39;goodbye, world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引和切片" tabindex="-1"><a class="header-anchor" href="#索引和切片" aria-hidden="true">#</a> 索引和切片</h4><p>如果希望从字符串中取出某个字符，我们可以对字符串进行索引运算，运算符是<code>[n]</code>，其中<code>n</code>是一个整数，假设字符串的长度为<code>N</code>，那么<code>n</code>可以是从<code>0</code>到<code>N-1</code>的整数，其中<code>0</code>是字符串中第一个字符的索引，而<code>N-1</code>是字符串中最后一个字符的索引，通常称之为正向索引；在Python中，字符串的索引也可以是从<code>-1</code>到<code>-N</code>的整数，其中<code>-1</code>是最后一个字符的索引，而<code>-N</code>则是第一个字符的索引，通常称之为负向索引。注意，因为<strong>字符串是不可变类型</strong>，所以<strong>不能通过索引运算修改字符串中的字符</strong>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;abc123456&#39;</span>
N <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

<span class="token comment"># 获取第一个字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># a a</span>

<span class="token comment"># 获取最后一个字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 6 6</span>

<span class="token comment"># 获取索引为2或-7的字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># c c</span>

<span class="token comment"># 获取索引为5和-4的字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 3 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要提醒大家注意的是，在进行索引操作时，如果索引越界（正向索引不在<code>0</code>到<code>N-1</code>范围，负向索引不在<code>-1</code>到<code>-N</code>范围），会引发<code>IndexError</code>异常，错误提示信息为：<code>string index out of range</code>（字符串索引超出范围）。</p><p>如果要从字符串中取出多个字符，我们可以对字符串进行切片，运算符是<code>[i:j:k]</code>，其中<code>i</code>是开始索引，索引对应的字符可以取到；<code>j</code>是结束索引，索引对应的字符不能取到；<code>k</code>是步长，默认值为<code>1</code>，表示从前向后获取相邻字符的连续切片，所以<code>:k</code>部分可以省略。假设字符串的长度为<code>N</code>，当<code>k &gt; 0</code>时表示正向切片（从前向后获取字符），如果没有给出<code>i</code>和<code>j</code>的值，则<code>i</code>的默认值是<code>0</code>，<code>j</code>的默认值是<code>N</code>；当<code>k &lt; 0</code>时表示负向切片（从后向前获取字符），如果没有给出<code>i</code>和<code>j</code>的值，则<code>i</code>的默认值是<code>-1</code>，j的默认值是<code>-N - 1</code>。如果不理解，直接看下面的例子，记住第一个字符的索引是<code>0</code>或<code>-N</code>，最后一个字符的索引是<code>N-1</code>或<code>-1</code>就行了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;abc123456&#39;</span>

<span class="token comment"># i=2, j=5, k=1的正向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># c12</span>

<span class="token comment"># i=-7, j=-4, k=1的正向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># c12</span>

<span class="token comment"># i=2, j=9, k=1的正向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># c123456</span>

<span class="token comment"># i=-7, j=9, k=1的正向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># c123456</span>

<span class="token comment"># i=2, j=9, k=2的正向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># c246</span>

<span class="token comment"># i=-7, j=9, k=2的正向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># c246</span>

<span class="token comment"># i=0, j=9, k=2的正向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># ac246</span>

<span class="token comment"># i=1, j=-1, k=2的正向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># b135</span>

<span class="token comment"># i=7, j=1, k=-1的负向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 54321c</span>

<span class="token comment"># i=-2, j=-8, k=-1的负向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 54321c</span>

<span class="token comment"># i=7, j=-10, k=-1的负向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># 54321cba</span>

<span class="token comment"># i=-1, j=1, k=-1的负向切片操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># 654321c</span>

<span class="token comment"># i=0, j=9, k=1的正向切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># abc123456</span>

<span class="token comment"># i=0, j=9, k=2的正向切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># ac246</span>

<span class="token comment"># i=-1, j=-10, k=-1的负向切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 654321cba</span>

<span class="token comment"># i=-1, j=-10, k=-2的负向切片</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 642ca</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="循环遍历每个字符" tabindex="-1"><a class="header-anchor" href="#循环遍历每个字符" aria-hidden="true">#</a> 循环遍历每个字符</h4><p>如果希望从字符串中取出每个字符，可以使用<code>for</code>循环对字符串进行遍历，有两种方式。</p><p>方式一：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
<span class="token keyword">for</span> ch <span class="token keyword">in</span> s1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串的方法" tabindex="-1"><a class="header-anchor" href="#字符串的方法" aria-hidden="true">#</a> 字符串的方法</h3><p>在Python中，我们可以通过字符串类型自带的方法对字符串进行操作和处理，对于一个字符串类型的变量，我们可以用<code>变量名.方法名()</code>的方式来调用它的方法。所谓方法其实就是跟某个类型的变量绑定的函数，后面我们讲面向对象编程的时候还会对这一概念详加说明。</p><h4 id="大小写相关操作" tabindex="-1"><a class="header-anchor" href="#大小写相关操作" aria-hidden="true">#</a> 大小写相关操作</h4><p>下面的代码演示了和字符串大小写变换相关的方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;hello, world!&#39;</span>

<span class="token comment"># 使用capitalize方法获得字符串首字母大写后的字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># Hello, world!</span>
<span class="token comment"># 使用title方法获得字符串每个单词首字母大写后的字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># Hello, World!</span>
<span class="token comment"># 使用upper方法获得字符串大写后的字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># HELLO, WORLD!</span>

s2 <span class="token operator">=</span> <span class="token string">&#39;GOODBYE&#39;</span>
<span class="token comment"># 使用lower方法获得字符串小写后的字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># goodbye</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查找操作" tabindex="-1"><a class="header-anchor" href="#查找操作" aria-hidden="true">#</a> 查找操作</h4><p>如果想在一个字符串中从前向后查找有没有另外一个字符串，可以使用字符串的<code>find</code>或<code>index</code>方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;hello, world!&#39;</span>

<span class="token comment"># find方法从字符串中查找另一个字符串所在的位置</span>
<span class="token comment"># 找到了返回字符串中另一个字符串首字符的索引</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;or&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 8</span>
<span class="token comment"># 找不到返回-1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;shit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># -1</span>
<span class="token comment"># index方法与find方法类似</span>
<span class="token comment"># 找到了返回字符串中另一个字符串首字符的索引</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;or&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 8</span>
<span class="token comment"># 找不到引发异常</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;shit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># ValueError: substring not found</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用<code>find</code>和<code>index</code>方法时还可以通过方法的参数来指定查找的范围，也就是查找不必从索引为<code>0</code>的位置开始。<code>find</code>和<code>index</code>方法还有逆向查找（从后向前查找）的版本，分别是<code>rfind</code>和<code>rindex</code>，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;hello good world!&#39;</span>

<span class="token comment"># 从前向后查找字符o出现的位置(相当于第一次出现)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 4</span>
<span class="token comment"># 从索引为5的位置开始查找字符o出现的位置</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 7</span>
<span class="token comment"># 从后向前查找字符o出现的位置(相当于最后一次出现)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="性质判断" tabindex="-1"><a class="header-anchor" href="#性质判断" aria-hidden="true">#</a> 性质判断</h4><p>可以通过字符串的<code>startswith</code>、<code>endswith</code>来判断字符串是否以某个字符串开头和结尾；还可以用<code>is</code>开头的方法判断字符串的特征，这些方法都返回布尔值，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;hello, world!&#39;</span>

<span class="token comment"># startwith方法检查字符串是否以指定的字符串开头返回布尔值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;He&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;hel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># True</span>
<span class="token comment"># endswith方法检查字符串是否以指定的字符串结尾返回布尔值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># True</span>

s2 <span class="token operator">=</span> <span class="token string">&#39;abc123456&#39;</span>

<span class="token comment"># isdigit方法检查字符串是否由数字构成返回布尔值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># False</span>
<span class="token comment"># isalpha方法检查字符串是否以字母构成返回布尔值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># False</span>
<span class="token comment"># isalnum方法检查字符串是否以数字和字母构成返回布尔值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="格式化字符串" tabindex="-1"><a class="header-anchor" href="#格式化字符串" aria-hidden="true">#</a> 格式化字符串</h4><p>在Python中，字符串类型可以通过<code>center</code>、<code>ljust</code>、<code>rjust</code>方法做居中、左对齐和右对齐的处理。如果要在字符串的左侧补零，也可以使用<code>zfill</code>方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;hello, world&#39;</span>

<span class="token comment"># center方法以宽度20将字符串居中并在两侧填充*</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># ****hello, world****</span>
<span class="token comment"># rjust方法以宽度20将字符串右对齐并在左侧填充空格</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#         hello, world</span>
<span class="token comment"># ljust方法以宽度20将字符串左对齐并在右侧填充~</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># hello, world~~~~~~~~</span>
<span class="token comment"># 在字符串的左侧补零</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;33&#39;</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 00033</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-33&#39;</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># -0033</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们之前讲过，在用<code>print</code>函数输出字符串时，可以用下面的方式对字符串进行格式化。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">321</span>
b <span class="token operator">=</span> <span class="token number">123</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d * %d = %d&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我们也可以用字符串的方法来完成字符串的格式，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">321</span>
b <span class="token operator">=</span> <span class="token number">123</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0} * {1} = {2}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从Python 3.6开始，格式化字符串还有更为简洁的书写方式，就是在字符串前加上<code>f</code>来格式化字符串，在这种以<code>f</code>打头的字符串中，<code>{变量名}</code>是一个占位符，会被变量对应的值将其替换掉，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">321</span>
b <span class="token operator">=</span> <span class="token number">123</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string"> * </span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">{</span>a <span class="token operator">*</span> b<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要进一步控制格式化语法中变量值的形式，可以参照下面的表格来进行字符串格式化操作。</p><table><thead><tr><th>变量值</th><th>占位符</th><th>格式化结果</th><th>说明</th></tr></thead><tbody><tr><td><code>3.1415926</code></td><td><code>{:.2f}</code></td><td><code>&#39;3.14&#39;</code></td><td>保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:+.2f}</code></td><td><code>&#39;+3.14&#39;</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>-1</code></td><td><code>{:+.2f}</code></td><td><code>&#39;-1.00&#39;</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:.0f}</code></td><td><code>&#39;3&#39;</code></td><td>不带小数</td></tr><tr><td><code>123</code></td><td><code>{:0&gt;10d}</code></td><td><code>&#39;0000000123&#39;</code></td><td>左边补<code>0</code>，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:x&lt;10d}</code></td><td><code>&#39;123xxxxxxx&#39;</code></td><td>右边补<code>x</code> ，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&gt;10d}</code></td><td><code>&#39; 123&#39;</code></td><td>左边补空格，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&lt;10d}</code></td><td><code>&#39;123 &#39;</code></td><td>右边补空格，补够10位</td></tr><tr><td><code>123456789</code></td><td><code>{:,}</code></td><td><code>&#39;123,456,789&#39;</code></td><td>逗号分隔格式</td></tr><tr><td><code>0.123</code></td><td><code>{:.2%}</code></td><td><code>&#39;12.30%&#39;</code></td><td>百分比格式</td></tr><tr><td><code>123456789</code></td><td><code>{:.2e}</code></td><td><code>&#39;1.23e+08&#39;</code></td><td>科学计数法格式</td></tr></tbody></table><h4 id="修剪操作" tabindex="-1"><a class="header-anchor" href="#修剪操作" aria-hidden="true">#</a> 修剪操作</h4><p>字符串的<code>strip</code>方法可以帮我们获得将原字符串修剪掉左右两端空格之后的字符串。这个方法非常有实用价值，通常用来将用户输入中因为不小心键入的头尾空格去掉，<code>strip</code>方法还有<code>lstrip</code>和<code>rstrip</code>两个版本，相信从名字大家已经猜出来这两个方法是做什么用的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;   jackfrued@126.com  \\t\\r\\n&#39;</span>
<span class="token comment"># strip方法获得字符串修剪左右两侧空格之后的字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># jackfrued@126.com</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="替换操作" tabindex="-1"><a class="header-anchor" href="#替换操作" aria-hidden="true">#</a> 替换操作</h4><p>如果希望用新的内容替换字符串中指定的内容，可以使用<code>replace</code>方法，代码如下所示。<code>replace</code>方法的第一个参数是被替换的内容，第二个参数是替换后的内容，还可以通过第三个参数指定替换的次数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;hello, world&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># hell@, w@rld</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># hell@, world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="拆分-合并操作" tabindex="-1"><a class="header-anchor" href="#拆分-合并操作" aria-hidden="true">#</a> 拆分/合并操作</h4><p>可以使用字符串的<code>split</code>方法将一个字符串拆分为多个字符串（放在一个列表中），也可以使用字符串的<code>join</code>方法将列表中的多个字符串连接成一个字符串，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;I love you&#39;</span>
words <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>            <span class="token comment"># [&#39;I&#39;, &#39;love&#39;, &#39;you&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># I#love#you</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是，<code>split</code>方法默认使用空格进行拆分，我们也可以指定其他的字符来拆分字符串，而且还可以指定最大拆分次数来控制拆分的效果，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;I#love#you#so#much&#39;</span>
words <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>  <span class="token comment"># [&#39;I&#39;, &#39;love&#39;, &#39;you&#39;, &#39;so&#39;, &#39;much&#39;]</span>
words <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>  <span class="token comment"># [&#39;I&#39;, &#39;love&#39;, &#39;you&#39;, &#39;so#much&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="编码-解码操作" tabindex="-1"><a class="header-anchor" href="#编码-解码操作" aria-hidden="true">#</a> 编码/解码操作</h4><p>Python中除了字符串<code>str</code>类型外，还有一种表示二进制数据的字节串类型（<code>bytes</code>）。所谓字节串，就是<strong>由零个或多个字节组成的有限序列</strong>。通过字符串的<code>encode</code>方法，我们可以按照某种编码方式将字符串编码为字节串，我们也可以使用字节串的<code>decode</code>方法，将字节串解码为字符串，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&#39;骆昊&#39;</span>
b <span class="token operator">=</span> a<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
c <span class="token operator">=</span> a<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>  <span class="token comment"># b&#39;\\xe9\\xaa\\x86\\xe6\\x98\\x8a&#39; b&#39;\\xc2\\xe6\\xea\\xbb&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果编码和解码的方式不一致，会导致乱码问题（无法再现原始的内容）或引发<code>UnicodeDecodeError</code>错误导致程序崩溃。</p><h4 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法" aria-hidden="true">#</a> 其他方法</h4><p>对于字符串类型来说，还有一个常用的操作是对字符串进行匹配检查，即检查字符串是否满足某种特定的模式。例如，一个网站对用户注册信息中用户名和邮箱的检查，就属于模式匹配检查。实现模式匹配检查的工具叫做正则表达式，Python语言通过标准库中的<code>re</code>模块提供了对正则表达式的支持，我们会在后续的课程中为大家讲解这个知识点。</p><h3 id="简单的总结-5" tabindex="-1"><a class="header-anchor" href="#简单的总结-5" aria-hidden="true">#</a> 简单的总结</h3><p>知道如何表示和操作字符串对程序员来说是非常重要的，因为我们需要处理文本信息，Python中操作字符串可以用拼接、切片等运算符，也可以使用字符串类型的方法。</p><h2 id="第11课-常用数据结构之集合" tabindex="-1"><a class="header-anchor" href="#第11课-常用数据结构之集合" aria-hidden="true">#</a> 第11课：常用数据结构之集合</h2><p>在学习了列表和元组之后，我们再来学习一种容器型的数据类型，它的名字叫集合（set）。说到集合这个词大家一定不会陌生，在数学课本上就有这个概念。通常我们对集合的定义是“<strong>把一定范围的、确定的、可以区别的事物当作一个整体来看待</strong>”，集合中的各个事物通常称为集合的<strong>元素</strong>。集合应该满足以下特性：</p><ol><li><strong>无序性</strong>：一个集合中，每个元素的地位都是相同的，元素之间是无序的。</li><li><strong>互异性</strong>：一个集合中，任何两个元素都是不相同的，即元素在集合中只能出现一次。</li><li><strong>确定性</strong>：给定一个集合和一个任意元素，该元素要么属这个集合，要么不属于这个集合，二者必居其一，不允许有模棱两可的情况出现。</li></ol><p>Python程序中的集合跟数学上的集合是完全一致的，需要强调的是上面所说的无序性和互异性。无序性说明集合中的元素并不像列中的元素那样一个挨着一个，可以通过索引实现随机访问（随机访问指的是给定一个有效的范围，随机抽取出一个数字，然后通过这个数字可以获取到对应的元素），所以Python中的<strong>集合肯定不能够支持索引运算</strong>。另外，集合的互异性决定了<strong>集合中不能有重复元素</strong>，这一点也是集合区别于列表的关键，说得更直白一些就是，Python中的集合类型会对其中的元素做去重处理。Python中的集合一定是支持<code>in</code>和<code>not in</code>成员运算的，这样就可以确定一个元素是否属于集合，也就是上面所说的集合的确定性。<strong>集合的成员运算在性能上要优于列表的成员运算</strong>，这是集合的底层存储特性（哈希存储）决定的，此处我们暂时不做讨论，大家可以先记下这个结论。</p><h3 id="创建集合" tabindex="-1"><a class="header-anchor" href="#创建集合" aria-hidden="true">#</a> 创建集合</h3><p>在Python中，创建集合可以使用<code>{}</code>字面量语法，<code>{}</code>中需要至少有一个元素，因为没有元素的<code>{}</code>并不是空集合而是一个空字典，我们下一节课就会大家介绍字典的知识。当然，也可以使用内置函数<code>set</code>来创建一个集合，准确的说<code>set</code>并不是一个函数，而是创建集合对象的构造器，这个知识点我们很快也会讲到，现在不理解跳过它就可以了。要创建空集合可以使用<code>set()</code>；也可以将其他序列转换成集合，例如：<code>set(&#39;hello&#39;)</code>会得到一个包含了4个字符的集合（重复的<code>l</code>会被去掉）。除了这两种方式，我们还可以使用生成式语法来创建集合，就像我们之前用生成式创建列表那样。要知道集合中有多少个元素，还是使用内置函数<code>len</code>；使用<code>for</code>循环可以实现对集合元素的遍历。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建集合的字面量语法(重复元素不会出现在集合中)</span>
set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>         <span class="token comment"># {1, 2, 3}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 3</span>

<span class="token comment"># 创建集合的构造器语法(后面会讲到什么是构造器)</span>
set2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span>         <span class="token comment"># {&#39;h&#39;, &#39;l&#39;, &#39;o&#39;, &#39;e&#39;}</span>

<span class="token comment"># 将列表转换成集合(可以去掉列表中的重复元素)</span>
set3 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set3<span class="token punctuation">)</span>         <span class="token comment"># {1, 2, 3}</span>

<span class="token comment"># 创建集合的生成式语法(将列表生成式的[]换成{})</span>
set4 <span class="token operator">=</span> <span class="token punctuation">{</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> num <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set4<span class="token punctuation">)</span>         <span class="token comment"># {3, 5, 6, 9, 10, 12, 15, 18}</span>

<span class="token comment"># 集合元素的循环遍历</span>
<span class="token keyword">for</span> elem <span class="token keyword">in</span> set4<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要提醒大家，集合中的元素必须是<code>hashable</code>类型。所谓<code>hashable</code>类型指的是能够计算出哈希码的数据类型，大家可以暂时将哈希码理解为和变量对应的唯一的ID值。通常不可变类型都是<code>hashable</code>类型，如整数、浮点、字符串、元组等，而可变类型都不是<code>hashable</code>类型，因为可变类型无法确定唯一的ID值，所以也就不能放到集合中。集合本身也是可变类型，所以集合不能够作为集合中的元素，这一点在使用集合的时候一定要注意。</p><h3 id="集合的运算" tabindex="-1"><a class="header-anchor" href="#集合的运算" aria-hidden="true">#</a> 集合的运算</h3><p>Python为集合类型提供了非常丰富的运算符，主要包括：成员运算、交集运算、并集运算、差集运算、比较运算（相等性、子集、超集）等。</p><h4 id="成员运算-1" tabindex="-1"><a class="header-anchor" href="#成员运算-1" aria-hidden="true">#</a> 成员运算</h4><p>可以通过成员运算<code>in</code>和<code>not in </code>检查元素是否在集合中，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">in</span> set1<span class="token punctuation">)</span>        <span class="token comment"># False </span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token keyword">in</span> set1<span class="token punctuation">)</span>        <span class="token comment"># True</span>
set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Swift&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Ruby&#39;</span> <span class="token keyword">in</span> set2<span class="token punctuation">)</span>    <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Java&#39;</span> <span class="token keyword">in</span> set2<span class="token punctuation">)</span>    <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="交并差运算" tabindex="-1"><a class="header-anchor" href="#交并差运算" aria-hidden="true">#</a> 交并差运算</h4><p>Python中的集合跟数学上的集合一样，可以进行交集、并集、差集等运算，而且可以通过运算符和方法调用两种方式来进行操作，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>
set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span>

<span class="token comment"># 交集</span>
<span class="token comment"># 方法一: 使用 &amp; 运算符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">&amp;</span> set2<span class="token punctuation">)</span>                <span class="token comment"># {2, 4, 6}</span>
<span class="token comment"># 方法二: 使用intersection方法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># {2, 4, 6}</span>

<span class="token comment"># 并集</span>
<span class="token comment"># 方法一: 使用 | 运算符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">|</span> set2<span class="token punctuation">)</span>         <span class="token comment"># {1, 2, 3, 4, 5, 6, 7, 8, 10}</span>
<span class="token comment"># 方法二: 使用union方法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># {1, 2, 3, 4, 5, 6, 7, 8, 10}</span>

<span class="token comment"># 差集</span>
<span class="token comment"># 方法一: 使用 - 运算符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">-</span> set2<span class="token punctuation">)</span>              <span class="token comment"># {1, 3, 5, 7}</span>
<span class="token comment"># 方法二: 使用difference方法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># {1, 3, 5, 7}</span>

<span class="token comment"># 对称差</span>
<span class="token comment"># 方法一: 使用 ^ 运算符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">^</span> set2<span class="token punctuation">)</span>                        <span class="token comment"># {1, 3, 5, 7, 8, 10}</span>
<span class="token comment"># 方法二: 使用symmetric_difference方法</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># {1, 3, 5, 7, 8, 10}</span>
<span class="token comment"># 方法三: 对称差相当于两个集合的并集减去交集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>set1 <span class="token operator">|</span> set2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>set1 <span class="token operator">&amp;</span> set2<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># {1, 3, 5, 7, 8, 10}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码可以看出，对两个集合求交集，<code>&amp;</code>运算符和<code>intersection</code>方法的作用是完全相同的，使用运算符的方式更直观而且代码也比较简短。相信大家对交集、并集、差集、对称差这几个概念是比较清楚的，如果没什么印象了可以看看下面的图。</p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711255.png" width="90%"><p>集合的交集、并集、差集运算还可以跟赋值运算一起构成复合赋值运算，如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span>
set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
<span class="token comment"># 将set1和set2求并集再赋值给set1</span>
<span class="token comment"># 也可以通过set1.update(set2)来实现</span>
set1 <span class="token operator">|</span><span class="token operator">=</span> set2
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>    <span class="token comment"># {1, 2, 3, 4, 5, 6, 7}</span>
set3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span>
<span class="token comment"># 将set1和set3求交集再赋值给set1</span>
<span class="token comment"># 也可以通过set1.intersection_update(set3)来实现</span>
set1 <span class="token operator">&amp;</span><span class="token operator">=</span> set3
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>    <span class="token comment"># {3, 6}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="比较运算-1" tabindex="-1"><a class="header-anchor" href="#比较运算-1" aria-hidden="true">#</a> 比较运算</h4>`,102),En=n("p",null,[s("两个集合可以用"),n("code",null,"=="),s("和"),n("code",null,"!="),s("进行相等性判断，如果两个集合中的元素完全相同，那么"),n("code",null,"=="),s("比较的结果就是"),n("code",null,"True"),s("，否则就是"),n("code",null,"False"),s("。如果集合"),n("code",null,"A"),s("的任意一个元素都是集合"),n("code",null,"B"),s("的元素，那么集合"),n("code",null,"A"),s("称为集合"),n("code",null,"B"),s("的子集，即对于$ \\forall{a} \\in {A}"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"，均有")]),n("annotation",{encoding:"application/x-tex"},"，均有")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord cjk_fallback"},"，均有")])])]),s(" {a} \\in {B} "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mtext",null,"，则")]),n("annotation",{encoding:"application/x-tex"},"，则")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord cjk_fallback"},"，则")])])]),s(" {A} \\subseteq {B} $，"),n("code",null,"A"),s("是"),n("code",null,"B"),s("的子集，反过来也可以称"),n("code",null,"B"),s("是"),n("code",null,"A"),s("的超集。如果"),n("code",null,"A"),s("是"),n("code",null,"B"),s("的子集且"),n("code",null,"A"),s("不等于"),n("code",null,"B"),s("，那么"),n("code",null,"A"),s("就是"),n("code",null,"B"),s("的真子集。Python为集合类型提供了判断子集和超集的运算符，其实就是我们非常熟悉的"),n("code",null,"<"),s("和"),n("code",null,">"),s("运算符，代码如下所示。")],-1),Sn=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
set3 <span class="token operator">=</span> set2
<span class="token comment"># &lt;运算符表示真子集，&lt;=运算符表示子集</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">&lt;</span> set2<span class="token punctuation">,</span> set1 <span class="token operator">&lt;=</span> set2<span class="token punctuation">)</span>    <span class="token comment"># True True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set2 <span class="token operator">&lt;</span> set3<span class="token punctuation">,</span> set2 <span class="token operator">&lt;=</span> set3<span class="token punctuation">)</span>    <span class="token comment"># False True</span>
<span class="token comment"># 通过issubset方法也能进行子集判断</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># True</span>

<span class="token comment"># 反过来可以用issuperset或&gt;运算符进行超集判断</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set2 <span class="token operator">&gt;</span> set1<span class="token punctuation">)</span>              <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集合的方法" tabindex="-1"><a class="header-anchor" href="#集合的方法" aria-hidden="true">#</a> 集合的方法</h3><p>Python中的集合是可变类型，我们可以通过集合类型的方法为集合添加或删除元素。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建一个空集合</span>
set1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 通过add方法添加元素</span>
set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span>
set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span>
set1<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>    <span class="token comment"># {33, 1, 100, 55, 1000, 10}</span>

<span class="token comment"># 通过discard方法删除指定元素</span>
set1<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
set1<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>    <span class="token comment"># {1, 10, 33, 55, 1000}</span>

<span class="token comment"># 通过remove方法删除指定元素，建议先做成员运算再删除</span>
<span class="token comment"># 否则元素如果不在集合中就会引发KeyError异常</span>
<span class="token keyword">if</span> <span class="token number">10</span> <span class="token keyword">in</span> set1<span class="token punctuation">:</span>
    set1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>    <span class="token comment"># {33, 1, 55, 1000}</span>

<span class="token comment"># pop方法可以从集合中随机删除一个元素并返回该元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># clear方法可以清空整个集合</span>
set1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>    <span class="token comment"># set()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要判断两个集合有没有相同的元素可以使用<code>isdisjoint</code>方法，没有相同元素返回<code>True</code>，否则返回<code>False</code>，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">}</span>
set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Swift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Objective-C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Dart&#39;</span><span class="token punctuation">}</span>
set3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;HTML&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CSS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>set3<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不可变集合" tabindex="-1"><a class="header-anchor" href="#不可变集合" aria-hidden="true">#</a> 不可变集合</h3><p>Python中还有一种不可变类型的集合，名字叫<code>frozenset</code>。<code>set</code>跟<code>frozenset</code>的区别就如同<code>list</code>跟<code>tuple</code>的区别，<code>frozenset</code>由于是不可变类型，能够计算出哈希码，因此它可以作为<code>set</code>中的元素。除了不能添加和删除元素，<code>frozenset</code>在其他方面跟<code>set</code>基本是一样的，下面的代码简单的展示了<code>frozenset</code>的用法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1 <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
set2 <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">&amp;</span> set2<span class="token punctuation">)</span>    <span class="token comment"># frozenset({1, 3, 5})</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">|</span> set2<span class="token punctuation">)</span>    <span class="token comment"># frozenset({1, 2, 3, 4, 5, 7})</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">-</span> set2<span class="token punctuation">)</span>    <span class="token comment"># frozenset({7})</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">&lt;</span> set2<span class="token punctuation">)</span>    <span class="token comment"># False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-6" tabindex="-1"><a class="header-anchor" href="#简单的总结-6" aria-hidden="true">#</a> 简单的总结</h3><p>Python中的集合底层使用了<strong>哈希存储</strong>的方式，对于这一点我们暂时不做介绍，在后面的课程有需要的时候再为大家讲解集合的底层原理，现阶段大家只需要知道<strong>集合是一种容器</strong>，元素必须是<code>hashable</code>类型，与列表不同的地方在于集合中的元素<strong>没有序</strong>、<strong>不能用索引运算</strong>、<strong>不能重复</strong>。</p><h2 id="第12课-常用数据结构之字典" tabindex="-1"><a class="header-anchor" href="#第12课-常用数据结构之字典" aria-hidden="true">#</a> 第12课：常用数据结构之字典</h2><p>迄今为止，我们已经为大家介绍了Python中的三种容器型数据类型，但是这些数据类型仍然不足以帮助我们解决所有的问题。例如，我们要保存一个人的信息，包括姓名、年龄、体重、单位地址、家庭住址、本人手机号、紧急联系人手机号等信息，你会发现我们之前学过的列表、元组和集合都不是最理想的选择。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>person1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;科华北路62号&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;中同仁路8号&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13122334455&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13800998877&#39;</span><span class="token punctuation">]</span>
person2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;科华北路62号&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;中同仁路8号&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13122334455&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13800998877&#39;</span><span class="token punctuation">)</span>
person3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;科华北路62号&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;中同仁路8号&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13122334455&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13800998877&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>集合肯定是最不合适的，因为集合有去重特性，如果一个人的年龄和体重相同，那么集合中就会少一项信息；同理，如果这个人的家庭住址和单位地址是相同的，那么集合中又会少一项信息。另一方面，虽然列表和元组可以把一个人的所有信息都保存下来，但是当你想要获取这个人的手机号时，你得先知道他的手机号是列表或元组中的第6个还是第7个元素；当你想获取一个人的家庭住址时，你还得知道家庭住址是列表或元组中的第几项。总之，在遇到上述的场景时，列表、元组、字典都不是最合适的选择，我们还需字典（dictionary）类型，这种数据类型最适合把相关联的信息组装到一起，并且可以帮助我们解决程序中为真实事物建模的问题。</p><p>说到字典这个词，大家一定不陌生，读小学的时候每个人基本上都有一本《新华字典》，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711406.jpg" alt="dictionary" loading="lazy"></p><p>Python程序中的字典跟现实生活中的字典很像，它以键值对（键和值的组合）的方式把数据组织到一起，我们可以通过键找到与之对应的值并进行操作。就像《新华字典》中，每个字（键）都有与它对应的解释（值）一样，每个字和它的解释合在一起就是字典中的一个条目，而字典中通常包含了很多个这样的条目。</p><h3 id="创建和使用字典" tabindex="-1"><a class="header-anchor" href="#创建和使用字典" aria-hidden="true">#</a> 创建和使用字典</h3><p>在Python中创建字典可以使用<code>{}</code>字面量语法，这一点跟上一节课讲的集合是一样的。但是字典的<code>{}</code>中的元素是以键值对的形式存在的，每个元素由<code>:</code>分隔的两个值构成，<code>:</code>前面是键，<code>:</code>后面是值，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>xinhua <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;麓&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;山脚下&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;路&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;道，往来通行的地方；方面，地区：南～货，外～货；种类：他俩是一～人&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;蕗&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;甘草的别名&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;潞&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;潞水，水名，即今山西省的浊漳河；潞江，水名，即云南省的怒江&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>xinhua<span class="token punctuation">)</span>
person <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">&#39;weight&#39;</span><span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;office&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;科华北路62号&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;home&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;中同仁路8号&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tel&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;13122334455&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;econtact&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;13800998877&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码，相信大家已经看出来了，用字典来保存一个人的信息远远优于使用列表或元组，因为我们可以用<code>:</code>前面的键来表示条目的含义，而<code>:</code>后面就是这个条目所对应的值。</p><p>当然，如果愿意，我们也可以使用内置函数<code>dict</code>或者是字典的生成式语法来创建字典，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># dict函数(构造器)中的每一组参数就是字典中的一组键值对</span>
person <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> home<span class="token operator">=</span><span class="token string">&#39;中同仁路8号&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>    <span class="token comment"># {&#39;name&#39;: &#39;王大锤&#39;, &#39;age&#39;: 55, &#39;weight&#39;: 60, &#39;home&#39;: &#39;中同仁路8号&#39;}</span>

<span class="token comment"># 可以通过Python内置函数zip压缩两个序列并创建字典</span>
items1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token string">&#39;ABCDE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items1<span class="token punctuation">)</span>    <span class="token comment"># {&#39;A&#39;: &#39;1&#39;, &#39;B&#39;: &#39;2&#39;, &#39;C&#39;: &#39;3&#39;, &#39;D&#39;: &#39;4&#39;, &#39;E&#39;: &#39;5&#39;}</span>
items2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token string">&#39;ABCDE&#39;</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items2<span class="token punctuation">)</span>    <span class="token comment"># {&#39;A&#39;: 1, &#39;B&#39;: 2, &#39;C&#39;: 3, &#39;D&#39;: 4, &#39;E&#39;: 5}</span>

<span class="token comment"># 用字典生成式语法创建字典</span>
items3 <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">3</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">)</span>     <span class="token comment"># {1: 1, 2: 8, 3: 27, 4: 64, 5: 125}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想知道字典中一共有多少组键值对，仍然是使用<code>len</code>函数；如果想对字典进行遍历，可以用<code>for</code>循环，但是需要注意，<code>for</code>循环只是对字典的键进行了遍历，不过没关系，在讲完字典的运算后，我们可以通过字典的键获取到和这个键对应的值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">&#39;weight&#39;</span><span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;office&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;科华北路62号&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 4</span>
<span class="token keyword">for</span> key <span class="token keyword">in</span> person<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典的运算" tabindex="-1"><a class="header-anchor" href="#字典的运算" aria-hidden="true">#</a> 字典的运算</h3><p>对于字典类型来说，成员运算和索引运算肯定是最为重要的，前者可以判定指定的键在不在字典中，后者可以通过键获取对应的值或者向字典中加入新的键值对。值得注意的是，字典的索引不同于列表的索引，列表中的元素因为有属于自己有序号，所以列表的索引是一个整数；字典中因为保存的是键值对，所以字典的索引是键值对中的键，通过索引操作可以修改原来的值或者向字典中存入新的键值对。需要<strong>特别提醒</strong>大家注意的是，<strong>字典中的键必须是不可变类型</strong>，例如整数（<code>int</code>）、浮点数（<code>float</code>）、字符串（<code>str</code>）、元组（<code>tuple</code>）等类型的值；显然，列表（<code>list</code>）和集合（<code>set</code>）是不能作为字典中的键的，当然字典类型本身也不能再作为字典中的键，因为字典也是可变类型，但是字典可以作为字典中的值。关于可变类型不能作为字典中的键的原因，我们在后面的课程中再为大家详细说明。这里，我们先看看下面的代码，了解一下字典的成员运算和索引运算。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">&#39;weight&#39;</span><span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;office&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;科华北路62号&#39;</span><span class="token punctuation">}</span>
<span class="token comment"># 检查name和tel两个键在不在person字典中</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">,</span> <span class="token string">&#39;tel&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span>    <span class="token comment"># True False</span>
<span class="token comment"># 通过age修将person字典中对应的值修改为25</span>
<span class="token keyword">if</span> <span class="token string">&#39;age&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">:</span>
    person<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span>
<span class="token comment"># 通过索引操作向person字典中存入新的键值对</span>
person<span class="token punctuation">[</span><span class="token string">&#39;tel&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;13122334455&#39;</span>
person<span class="token punctuation">[</span><span class="token string">&#39;signature&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;你的男朋友是一个盖世垃圾，他会踏着五彩祥云去迎娶你的闺蜜&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">,</span> <span class="token string">&#39;tel&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span>    <span class="token comment"># True True</span>
<span class="token comment"># 检查person字典中键值对的数量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 6</span>
<span class="token comment"># 对字典的键进行循环并通索引运算获取键对应的值</span>
<span class="token keyword">for</span> key <span class="token keyword">in</span> person<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意，在通过索引运算获取字典中的值时，如指定的键没有在字典中，将会引发<code>KeyError</code>异常。</p><h3 id="字典的方法" tabindex="-1"><a class="header-anchor" href="#字典的方法" aria-hidden="true">#</a> 字典的方法</h3><p>字典类型的方法基本上都跟字典的键值对操作相关，可以通过下面的例子来了解这些方法的使用。例如，我们要用一个字典来保存学生的信息，我们可以使用学生的学号作为字典中的键，通过学号做索引运算就可以得到对应的学生；我们可以把字典的值也做成一个字典，这样就可以用多组键值对分别存储学生的姓名、性别、年龄、籍贯等信息，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 字典中的值又是一个字典(嵌套的字典)</span>
students <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">1001</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;狄仁杰&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&#39;place&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;山西大同&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token number">1002</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;白元芳&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">&#39;place&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;河北保定&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token number">1003</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;武则天&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;place&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;四川广元&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment"># 使用get方法通过键获取对应的值，如果取不到不会引发KeyError异常而是返回None或设定的默认值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># {&#39;name&#39;: &#39;白元芳&#39;, &#39;sex&#39;: True, &#39;age&#39;: 23, &#39;place&#39;: &#39;河北保定&#39;}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># None</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;无名氏&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># {&#39;name&#39;: &#39;无名氏&#39;}</span>

<span class="token comment"># 获取字典中所有的键</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># dict_keys([1001, 1002, 1003])</span>
<span class="token comment"># 获取字典中所有的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># dict_values([{...}, {...}, {...}])</span>
<span class="token comment"># 获取字典中所有的键值对</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># dict_items([(1001, {...}), (1002, {....}), (1003, {...})])</span>
<span class="token comment"># 对字典中所有的键值对进行循环遍历</span>
<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> students<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&#39;---&gt;&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>

<span class="token comment"># 使用pop方法通过键删除对应的键值对并返回该值</span>
stu1 <span class="token operator">=</span> students<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span>             <span class="token comment"># {&#39;name&#39;: &#39;白元芳&#39;, &#39;sex&#39;: True, &#39;age&#39;: 23, &#39;place&#39;: &#39;河北保定&#39;}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 2</span>
<span class="token comment"># stu2 = students.pop(1005)    # KeyError: 1005</span>
stu2 <span class="token operator">=</span> students<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span>             <span class="token comment"># {}</span>

<span class="token comment"># 使用popitem方法删除字典中最后一组键值对并返回对应的二元组</span>
<span class="token comment"># 如果字典中没有元素，调用该方法将引发KeyError异常</span>
key<span class="token punctuation">,</span> value <span class="token operator">=</span> students<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment"># 1003 {&#39;name&#39;: &#39;武则天&#39;, &#39;sex&#39;: False, &#39;age&#39;: 20, &#39;place&#39;: &#39;四川广元&#39;}</span>

<span class="token comment"># 如果这个键在字典中存在，setdefault返回原来与这个键对应的值</span>
<span class="token comment"># 如果这个键在字典中不存在，向字典中添加键值对，返回第二个参数的值，默认为None</span>
result <span class="token operator">=</span> students<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;方启鹤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token comment"># {&#39;name&#39;: &#39;方启鹤&#39;, &#39;sex&#39;: True}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>      <span class="token comment"># {1001: {...}, 1005: {...}}</span>

<span class="token comment"># 使用update更新字典元素，相同的键会用新值覆盖掉旧值，不同的键会添加到字典中</span>
others <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">1005</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;乔峰&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">&#39;place&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;北京大兴&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token number">1010</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王语嫣&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token number">1008</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;钟灵&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
students<span class="token punctuation">.</span>update<span class="token punctuation">(</span>others<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>      <span class="token comment"># {1001: {...}, 1005: {...}, 1010: {...}, 1008: {...}}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟列表一样，从字典中删除元素也可以使用<code>del</code>关键字，在删除元素的时候如果指定的键索引不到对应的值，一样会引发<code>KeyError</code>异常，具体的做法如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span>
<span class="token keyword">del</span> person<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>    <span class="token comment"># {&#39;name&#39;: &#39;王大锤&#39;, &#39;sex&#39;: True}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字典的应用" tabindex="-1"><a class="header-anchor" href="#字典的应用" aria-hidden="true">#</a> 字典的应用</h3><p>我们通过几个简单的例子来讲解字典的应用。</p><p><strong>例子1</strong>：输入一段话，统计每个英文字母出现的次数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sentence <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入一段话: &#39;</span><span class="token punctuation">)</span>
counter <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> ch <span class="token keyword">in</span> sentence<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">&lt;=</span> ch <span class="token operator">&lt;=</span> <span class="token string">&#39;Z&#39;</span> <span class="token keyword">or</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">&lt;=</span> ch <span class="token operator">&lt;=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">:</span>
        counter<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> counter<span class="token punctuation">.</span>get<span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> counter<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;字母</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">出现了</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">次.&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>例子2</strong>：在一个字典中保存了股票的代码和价格，找出股价大于100元的股票并创建一个新的字典。</p><blockquote><p><strong>说明</strong>：可以用字典的生成式语法来创建这个新字典。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>stocks <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;AAPL&#39;</span><span class="token punctuation">:</span> <span class="token number">191.88</span><span class="token punctuation">,</span>
    <span class="token string">&#39;GOOG&#39;</span><span class="token punctuation">:</span> <span class="token number">1186.96</span><span class="token punctuation">,</span>
    <span class="token string">&#39;IBM&#39;</span><span class="token punctuation">:</span> <span class="token number">149.24</span><span class="token punctuation">,</span>
    <span class="token string">&#39;ORCL&#39;</span><span class="token punctuation">:</span> <span class="token number">48.44</span><span class="token punctuation">,</span>
    <span class="token string">&#39;ACN&#39;</span><span class="token punctuation">:</span> <span class="token number">166.89</span><span class="token punctuation">,</span>
    <span class="token string">&#39;FB&#39;</span><span class="token punctuation">:</span> <span class="token number">208.09</span><span class="token punctuation">,</span>
    <span class="token string">&#39;SYMC&#39;</span><span class="token punctuation">:</span> <span class="token number">21.29</span>
<span class="token punctuation">}</span>
stocks2 <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> stocks<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stocks2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-7" tabindex="-1"><a class="header-anchor" href="#简单的总结-7" aria-hidden="true">#</a> 简单的总结</h3><p>Python程序中的字典跟现实生活中字典非常像，允许我们<strong>以键值对的形式保存数据</strong>，再<strong>通过键索引对应的值</strong>。这是一种非常<strong>有利于数据检索</strong>的数据类型，底层原理我们在后续的课程中为大家讲解。再次提醒大家注意，<strong>字典中的键必须是不可变类型</strong>，字典中的值可以是任意类型。</p><h2 id="第13课-函数和模块" tabindex="-1"><a class="header-anchor" href="#第13课-函数和模块" aria-hidden="true">#</a> 第13课：函数和模块</h2><p>在讲解本节课的内容之前，我们先来研究一道数学题，请说出下面的方程有多少组正整数解。</p>`,46),Cn=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"x"),n("mn",null,"1")]),n("mo",null,"+"),n("msub",null,[n("mi",null,"x"),n("mn",null,"2")]),n("mo",null,"+"),n("msub",null,[n("mi",null,"x"),n("mn",null,"3")]),n("mo",null,"+"),n("msub",null,[n("mi",null,"x"),n("mn",null,"4")]),n("mo",null,"="),n("mn",null,"8")]),n("annotation",{encoding:"application/x-tex"}," x_1 + x_2 + x_3 + x_4 = 8 ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"3")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"4")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"8")])])])])],-1),Bn=n("p",null,[s("你可能已经想到了，这个问题其实等同于将"),n("code",null,"8"),s("个苹果分成四组且每组至少一个苹果有多少种方案，因此该问题还可以进一步等价于在分隔"),n("code",null,"8"),s("个苹果的"),n("code",null,"7"),s("个空隙之间插入三个隔板将苹果分成四组有多少种方案，也就是从"),n("code",null,"7"),s("个空隙选出"),n("code",null,"3"),s("个空隙放入隔板的组合数，所以答案是$ C_7^3=35 $。组合数的计算公式如下所示。")],-1),jn=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("msubsup",null,[n("mi",null,"C"),n("mi",null,"M"),n("mi",null,"N")]),n("mo",null,"="),n("mfrac",null,[n("mrow",null,[n("mi",null,"M"),n("mo",{stretchy:"false"},"!")]),n("mrow",null,[n("mi",null,"N"),n("mo",{stretchy:"false"},"!"),n("mo",{stretchy:"false"},"("),n("mi",null,"M"),n("mo",null,"−"),n("mi",null,"N"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},"!")])])]),n("annotation",{encoding:"application/x-tex"}," C_M^N = \\frac {M!} {N!(M-N)!} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.1383em","vertical-align":"-0.247em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8913em"}},[n("span",{style:{top:"-2.453em","margin-left":"-0.0715em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"M")])]),n("span",{style:{top:"-3.113em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.247em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.3074em","vertical-align":"-0.936em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3714em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mclose"},"!"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mclose"},")!")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mclose"},"!")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.936em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])])])],-1),Tn=e(`<p>根据我们前面学习的知识，可以用循环做累乘的方式来计算阶乘，那么通过下面的Python代码我们就可以计算出组合数$ C_M^N $的值，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
输入M和N计算C(M,N)


&quot;&quot;&quot;</span>
m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;m = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;n = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 计算m的阶乘</span>
fm <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fm <span class="token operator">*=</span> num
<span class="token comment"># 计算n的阶乘</span>
fn <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fn <span class="token operator">*=</span> num
<span class="token comment"># 计算m-n的阶乘</span>
fk <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fk <span class="token operator">*=</span> num
<span class="token comment"># 计算C(M,N)的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fm <span class="token operator">//</span> fn <span class="token operator">//</span> fk<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数的作用" tabindex="-1"><a class="header-anchor" href="#函数的作用" aria-hidden="true">#</a> 函数的作用</h3><p>不知大家是否注意到，上面的代码中我们做了三次求阶乘，虽然<code>m</code>、<code>n</code>、<code>m - n</code>的值各不相同，但是三段代码并没有实质性的区别，属于重复代码。世界级的编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”。要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称为“函数”的代码块中，在需要计算阶乘的地方，我们只需要“调用函数”就可以了。</p><h3 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数" aria-hidden="true">#</a> 定义函数</h3><p>数学上的函数通常形如<code>y = f(x)</code>或者<code>z = g(x, y)</code>这样的形式，在<code>y = f(x)</code>中，<code>f</code>是函数的名字，<code>x</code>是函数的自变量，<code>y</code>是函数的因变量；而在<code>z = g(x, y)</code>中，<code>g</code>是函数名，<code>x</code>和<code>y</code>是函数的自变量，<code>z</code>是函数的因变量。Python中的函数跟这个结构是一致的，每个函数都有自己的名字、自变量和因变量。我们通常把Python中函数的自变量称为函数的参数，而因变量称为函数的返回值。</p><p>在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也应该有一个漂亮的名字，命名规则跟变量的命名规则是一致的（赶紧想一想我们之前讲过的变量的命名规则）。在函数名后面的圆括号中可以放置传递给函数的参数，就是我们刚才说到的函数的自变量，而函数执行完成后我们会通过<code>return</code>关键字来返回函数的执行结果，就是我们刚才说的函数的因变量。一个函数要执行的代码块（要做的事情）也是通过缩进的方式来表示的，跟之前分支和循环结构的代码块是一样的。大家不要忘了<code>def</code>那一行的最后面还有一个<code>:</code>，之前提醒过大家，那是在英文输入法状态下输入的冒号。</p><p>我们可以通过函数对上面的代码进行重构。**所谓重构，是在不影响代码执行结果的前提下对代码的结构进行调整。**重构之后的代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
输入M和N计算C(M,N)


&quot;&quot;&quot;</span>


<span class="token comment"># 定义函数：def是定义函数的关键字、fac是函数名，num是参数（自变量）</span>
<span class="token keyword">def</span> <span class="token function">fac</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;求阶乘&quot;&quot;&quot;</span>
    result <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">*=</span> n
    <span class="token comment"># 返回num的阶乘（因变量）</span>
    <span class="token keyword">return</span> result


m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;m = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;n = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 当需要计算阶乘的时候不用再写重复的代码而是直接调用函数fac</span>
<span class="token comment"># 调用函数的语法是在函数名后面跟上圆括号并传入参数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">//</span> fac<span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：事实上，Python标准库的<code>math</code>模块中有一个名为<code>factorial</code>的函数已经实现了求阶乘的功能，我们可以直接使用该函数来计算阶乘。<strong>将来我们使用的函数，要么是自定义的函数，要么是Python标准库或者三方库中提供的函数</strong>。</p></blockquote><h3 id="函数的参数" tabindex="-1"><a class="header-anchor" href="#函数的参数" aria-hidden="true">#</a> 函数的参数</h3><h4 id="参数的默认值" tabindex="-1"><a class="header-anchor" href="#参数的默认值" aria-hidden="true">#</a> 参数的默认值</h4><p>如果函数中没有<code>return</code>语句，那么函数默认返回代表空值的<code>None</code>。另外，在定义函数时，函数也可以没有自变量，但是函数名后面的圆括号是必须有的。Python中还允许函数的参数拥有默认值，我们可以把之前讲过的一个例子“CRAPS赌博游戏”中摇色子获得点数的功能封装成函数，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
参数的默认值


&quot;&quot;&quot;</span>
<span class="token keyword">from</span> random <span class="token keyword">import</span> randint


<span class="token comment"># 定义摇色子的函数，n表示色子的个数，默认值为2</span>
<span class="token keyword">def</span> <span class="token function">roll_dice</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;摇色子返回总的点数&quot;&quot;&quot;</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        total <span class="token operator">+=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> total


<span class="token comment"># 如果没有指定参数，那么n使用默认值2，表示摇两颗色子</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>roll_dice<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 传入参数3，变量n被赋值为3，表示摇三颗色子获得点数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>roll_dice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再来看一个更为简单的例子。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;三个数相加求和&quot;&quot;&quot;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c


<span class="token comment"># 调用add函数，没有传入参数，那么a、b、c都使用默认值0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 0</span>
<span class="token comment"># 调用add函数，传入一个参数，那么该参数赋值给变量a, 变量b和c使用默认值0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 1</span>
<span class="token comment"># 调用add函数，传入两个参数，1和2分别赋值给变量a和b，变量c使用默认值0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 3</span>
<span class="token comment"># 调用add函数，传入三个参数，分别赋值给a、b、c三个变量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>
<span class="token comment"># 传递参数时可以不按照设定的顺序进行传递，但是要用“参数名=参数值”的形式</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 350</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：带默认值的参数必须放在不带默认值的参数之后，否则将产生<code>SyntaxError</code>错误，错误消息是：<code>non-default argument follows default argument</code>，翻译成中文的意思是“没有默认值的参数放在了带默认值的参数后面”。</p></blockquote><h4 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数" aria-hidden="true">#</a> 可变参数</h4><p>接下来，我们还可以实现一个对任意多个数求和的<code>add</code>函数，因为Python语言中的函数可以通过星号表达式语法来支持可变参数。所谓可变参数指的是在调用函数时，可以向函数传入<code>0</code>个或任意多个参数。将来我们以团队协作的方式开发商业项目时，很有可能要设计函数给其他人使用，但有的时候我们并不知道函数的调用者会向该函数传入多少个参数，这个时候可变参数就可以派上用场。下面的代码演示了用可变参数实现对任意多个数求和的<code>add</code>函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
可变参数


&quot;&quot;&quot;</span>


<span class="token comment"># 用星号表达式来表示args可以接收0个或任意多个参数</span>
<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment"># 可变参数可以放在for循环中取出每个参数的值</span>
    <span class="token keyword">for</span> val <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            total <span class="token operator">+=</span> val
    <span class="token keyword">return</span> total


<span class="token comment"># 在调用add函数时可以传入0个或任意多个参数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用模块管理函数" tabindex="-1"><a class="header-anchor" href="#用模块管理函数" aria-hidden="true">#</a> 用模块管理函数</h3><p>不管用什么样的编程语言来写代码，给变量、函数起名字都是一个让人头疼的问题，因为我们会遇到<strong>命名冲突</strong>这种尴尬的情况。最简单的场景就是在同一个<code>.py</code>文件中定义了两个同名的函数，如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello, world!&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;goodbye, world!&#39;</span><span class="token punctuation">)</span>

    
foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 大家猜猜调用foo函数会输出什么</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然上面的这种情况我们很容易就能避免，但是如果项目是团队协作多人开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，这种情况下怎么解决命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过<code>import</code>关键字导入指定的模块再使用<strong>完全限定名</strong>的调用方式就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p><code>module1.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello, world!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>module2.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;goodbye, world!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>test.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> module1
<span class="token keyword">import</span> module2

<span class="token comment"># 用“模块名.函数名”的方式（完全限定名）调用函数，</span>
module1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># hello, world!</span>
module2<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># goodbye, world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在导入模块时，还可以使用<code>as</code>关键字对模块进行别名，这样我们可以使用更为简短的完全限定名。</p><p><code>test.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> module1 <span class="token keyword">as</span> m1
<span class="token keyword">import</span> module2 <span class="token keyword">as</span> m2

m1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># hello, world!</span>
m2<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># goodbye, world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码我们导入了定义函数的模块，我们也可以使用<code>from...import...</code>语法从模块中直接导入需要使用的函数，代码如下所示。</p><p><code>test.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo

foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># hello, world!</span>

<span class="token keyword">from</span> module2 <span class="token keyword">import</span> foo

foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># goodbye, world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，如果我们如果从两个不同的模块中导入了同名的函数，后导入的函数会覆盖掉先前的导入，就像下面的代码中，调用<code>foo</code>会输出<code>hello, world!</code>，因为我们先导入了<code>module2</code>的<code>foo</code>，后导入了<code>module1</code>的<code>foo</code> 。如果两个<code>from...import...</code>反过来写，就是另外一番光景了。</p><p><code>test.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> module2 <span class="token keyword">import</span> foo
<span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo

foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># hello, world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想在上面的代码中同时使用来自两个模块中的<code>foo</code>函数也是有办法的，大家可能已经猜到了，还是用<code>as</code>关键字对导入的函数进行别名，代码如下所示。</p><p><code>test.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo <span class="token keyword">as</span> f1
<span class="token keyword">from</span> module2 <span class="token keyword">import</span> foo <span class="token keyword">as</span> f2

f1<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># hello, world!</span>
f2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># goodbye, world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标准库中的模块和函数" tabindex="-1"><a class="header-anchor" href="#标准库中的模块和函数" aria-hidden="true">#</a> 标准库中的模块和函数</h3><p>Python标准库中提供了大量的模块和函数来简化我们的开发工作，我们之前用过的<code>random</code>模块就为我们提供了生成随机数和进行随机抽样的函数；而<code>time</code>模块则提供了和时间操作相关的函数；上面求阶乘的函数在Python标准库中的<code>math</code>模块中已经有了，实际开发中并不需要我们自己编写，而<code>math</code>模块中还包括了计算正弦、余弦、指数、对数等一系列的数学函数。随着我们进一步的学习Python编程知识，我们还会用到更多的模块和函数。</p><p>Python标准库中还有一类函数是不需要<code>import</code>就能够直接使用的，我们将其称之为内置函数，这些内置函数都是很有用也是最常用的，下面的表格列出了一部分的内置函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>abs</code></td><td>返回一个数的绝对值，例如：<code>abs(-1.3)</code>会返回<code>1.3</code>。</td></tr><tr><td><code>bin</code></td><td>把一个整数转换成以<code>&#39;0b&#39;</code>开头的二进制字符串，例如：<code>bin(123)</code>会返回<code>&#39;0b1111011&#39;</code>。</td></tr><tr><td><code>chr</code></td><td>将Unicode编码转换成对应的字符，例如：<code>chr(8364)</code>会返回<code>&#39;€&#39;</code>。</td></tr><tr><td><code>hex</code></td><td>将一个整数转换成以<code>&#39;0x&#39;</code>开头的十六进制字符串，例如：<code>hex(123)</code>会返回<code>&#39;0x7b&#39;</code>。</td></tr><tr><td><code>input</code></td><td>从输入中读取一行，返回读到的字符串。</td></tr><tr><td><code>len</code></td><td>获取字符串、列表等的长度。</td></tr><tr><td><code>max</code></td><td>返回多个参数或一个可迭代对象中的最大值，例如：<code>max(12, 95, 37)</code>会返回<code>95</code>。</td></tr><tr><td><code>min</code></td><td>返回多个参数或一个可迭代对象中的最小值，例如：<code>min(12, 95, 37)</code>会返回<code>12</code>。</td></tr><tr><td><code>oct</code></td><td>把一个整数转换成以<code>&#39;0o&#39;</code>开头的八进制字符串，例如：<code>oct(123)</code>会返回<code>&#39;0o173&#39;</code>。</td></tr><tr><td><code>open</code></td><td>打开一个文件并返回文件对象。</td></tr><tr><td><code>ord</code></td><td>将字符转换成对应的Unicode编码，例如：<code>ord(&#39;€&#39;)</code>会返回<code>8364</code>。</td></tr><tr><td><code>pow</code></td><td>求幂运算，例如：<code>pow(2, 3)</code>会返回<code>8</code>；<code>pow(2, 0.5)</code>会返回<code>1.4142135623730951</code>。</td></tr><tr><td><code>print</code></td><td>打印输出。</td></tr><tr><td><code>range</code></td><td>构造一个范围序列，例如：<code>range(100)</code>会产生<code>0</code>到<code>99</code>的整数序列。</td></tr><tr><td><code>round</code></td><td>按照指定的精度对数值进行四舍五入，例如：<code>round(1.23456, 4)</code>会返回<code>1.2346</code>。</td></tr><tr><td><code>sum</code></td><td>对一个序列中的项从左到右进行求和运算，例如：<code>sum(range(1, 101))</code>会返回<code>5050</code>。</td></tr><tr><td><code>type</code></td><td>返回对象的类型，例如：<code>type(10)</code>会返回<code>int</code>；而<code> type(&#39;hello&#39;)</code>会返回<code>str</code>。</td></tr></tbody></table><h3 id="简单的总结-8" tabindex="-1"><a class="header-anchor" href="#简单的总结-8" aria-hidden="true">#</a> 简单的总结</h3><p><strong>函数是对功能相对独立且会重复使用的代码的封装</strong>。学会使用定义和使用函数，就能够写出更为优质的代码。当然，Python语言的标准库中已经为我们提供了大量的模块和常用的函数，用好这些模块和函数就能够用更少的代码做更多的事情；如果这些模块和函数不能满足我们的要求，我们就需要自定义函数，然后用模块的概念来管理这些自定义函数。</p><h2 id="第14课-函数的应用" tabindex="-1"><a class="header-anchor" href="#第14课-函数的应用" aria-hidden="true">#</a> 第14课：函数的应用</h2><p>接下来我们通过一些案例来为大家讲解函数的应用。</p><h3 id="经典小案例-1" tabindex="-1"><a class="header-anchor" href="#经典小案例-1" aria-hidden="true">#</a> 经典小案例</h3><h4 id="案例1-设计一个生成验证码的函数。" tabindex="-1"><a class="header-anchor" href="#案例1-设计一个生成验证码的函数。" aria-hidden="true">#</a> 案例1：设计一个生成验证码的函数。</h4><blockquote><p><strong>说明</strong>：验证码由数字和英文大小写字母构成，长度可以用参数指定。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">import</span> string

ALL_CHARS <span class="token operator">=</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters


<span class="token keyword">def</span> <span class="token function">generate_code</span><span class="token punctuation">(</span>code_len<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;生成指定长度的验证码
    
    :param code_len: 验证码的长度(默认4个字符)
    :return: 由大小写英文字母和数字构成的随机验证码字符串
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>ALL_CHARS<span class="token punctuation">,</span> k<span class="token operator">=</span>code_len<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用下面的代码生成10组随机验证码来测试上面的函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>generate_code<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：<code>random</code>模块的<code>sample</code>和<code>choices</code>函数都可以实现随机抽样，<code>sample</code>实现无放回抽样，这意味着抽样取出的字符是不重复的；<code>choices</code>实现有放回抽样，这意味着可能会重复选中某些字符。这两个函数的第一个参数代表抽样的总体，而参数<code>k</code>代表抽样的数量。</p></blockquote><h4 id="案例2-设计一个函数返回给定文件的后缀名。" tabindex="-1"><a class="header-anchor" href="#案例2-设计一个函数返回给定文件的后缀名。" aria-hidden="true">#</a> 案例2：设计一个函数返回给定文件的后缀名。</h4><blockquote><p><strong>说明</strong>：文件名通常是一个字符串，而文件的后缀名指的是文件名中最后一个<code>.</code>后面的部分，也称为文件的扩展名，它是某些操作系统用来标记文件类型的一种机制，例如在Windows系统上，后缀名<code>exe</code>表示这是一个可执行程序，而后缀名<code>txt</code>表示这是一个纯文本文件。需要注意的是，在Linux和macOS系统上，文件名可以以<code>.</code>开头，表示这是一个隐藏文件，像<code>.gitignore</code>这样的文件名，<code>.</code>后面并不是后缀名，这个文件没有后缀名或者说后缀名为<code>&#39;&#39;</code>。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_suffix</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> ignore_dot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;获取文件名的后缀名
    
    :param filename: 文件名
    :param ignore_dot: 是否忽略后缀名前面的点
    :return: 文件的后缀名
    &quot;&quot;&quot;</span>
    <span class="token comment"># 从字符串中逆向查找.出现的位置</span>
    pos <span class="token operator">=</span> filename<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 通过切片操作从文件名中取出后缀名</span>
    <span class="token keyword">if</span> pos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">return</span> filename<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> ignore_dot <span class="token keyword">else</span> filename<span class="token punctuation">[</span>pos<span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用下面的代码对上面的函数做一个简单的测验。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>get_suffix<span class="token punctuation">(</span><span class="token string">&#39;readme.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># txt</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>get_suffix<span class="token punctuation">(</span><span class="token string">&#39;readme.txt.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># md</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>get_suffix<span class="token punctuation">(</span><span class="token string">&#39;.readme&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">#</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>get_suffix<span class="token punctuation">(</span><span class="token string">&#39;readme.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">#</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>get_suffix<span class="token punctuation">(</span><span class="token string">&#39;readme&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>get_suffix</code>函数还有一个更为便捷的实现方式，就是直接使用<code>os.path</code>模块的<code>splitext</code>函数，这个函数会将文件名拆分成带路径的文件名和扩展名两个部分，然后返回一个二元组，二元组中的第二个元素就是文件的后缀名（包含<code>.</code>），如果要去掉后缀名中的<code>.</code>，可以做一个字符串的切片操作，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> splitext


<span class="token keyword">def</span> <span class="token function">get_suffix</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> ignore_dot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> splitext<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>思考</strong>：如果要给上面的函数增加一个参数，用来控制文件的后缀名是否包含<code>.</code>，应该怎么做？</p></blockquote><h4 id="案例3-写一个判断给定的正整数是不是质数的函数。" tabindex="-1"><a class="header-anchor" href="#案例3-写一个判断给定的正整数是不是质数的函数。" aria-hidden="true">#</a> 案例3：写一个判断给定的正整数是不是质数的函数。</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_prime</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;判断一个正整数是不是质数

    :param num: 正整数
    :return: 如果是质数返回True，否则返回False
    &quot;&quot;&quot;</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> num <span class="token operator">!=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例4-写出计算两个正整数最大公约数和最小公倍数的函数。" tabindex="-1"><a class="header-anchor" href="#案例4-写出计算两个正整数最大公约数和最小公倍数的函数。" aria-hidden="true">#</a> 案例4：写出计算两个正整数最大公约数和最小公倍数的函数。</h4><p>代码一：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">gcd_and_lcm</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;求最大公约数和最小公倍数&quot;&quot;&quot;</span>
    a<span class="token punctuation">,</span> b <span class="token operator">=</span> x<span class="token punctuation">,</span> y
    <span class="token keyword">while</span> b <span class="token operator">%</span> a <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b <span class="token operator">%</span> a<span class="token punctuation">,</span> a
    <span class="token keyword">return</span> a<span class="token punctuation">,</span> x <span class="token operator">*</span> y <span class="token operator">//</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码二：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;求最大公约数&quot;&quot;&quot;</span>
    <span class="token keyword">while</span> y <span class="token operator">%</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y <span class="token operator">%</span> x<span class="token punctuation">,</span> x
    <span class="token keyword">return</span> x


<span class="token keyword">def</span> <span class="token function">lcm</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;求最小公倍数&quot;&quot;&quot;</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> y <span class="token operator">//</span> gcd<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>思考</strong>：请比较上面的代码一和代码二，想想哪种做法是更好的选择。</p></blockquote><h4 id="案例5-写出计算一组样本数据描述性统计信息的函数。" tabindex="-1"><a class="header-anchor" href="#案例5-写出计算一组样本数据描述性统计信息的函数。" aria-hidden="true">#</a> 案例5：写出计算一组样本数据描述性统计信息的函数。</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math


<span class="token keyword">def</span> <span class="token function">ptp</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;求极差（全距）&quot;&quot;&quot;</span>
    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">min</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;求均值&quot;&quot;&quot;</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">variance</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;求方差&quot;&quot;&quot;</span>
    x_bar <span class="token operator">=</span> average<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>num <span class="token operator">-</span> x_bar<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">standard_deviation</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;求标准差&quot;&quot;&quot;</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>variance<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">median</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;找中位数&quot;&quot;&quot;</span>
    temp<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> size <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> temp<span class="token punctuation">[</span>size <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> average<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>size <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>size <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-9" tabindex="-1"><a class="header-anchor" href="#简单的总结-9" aria-hidden="true">#</a> 简单的总结</h3><p>在写代码尤其是开发商业项目的时候，一定要有意识的<strong>将相对独立且重复出现的功能封装成函数</strong>，这样不管是自己还是团队的其他成员都可以通过调用函数的方式来使用这些功能。</p><h2 id="第15课-函数使用进阶" tabindex="-1"><a class="header-anchor" href="#第15课-函数使用进阶" aria-hidden="true">#</a> 第15课：函数使用进阶</h2><p>前面我们讲到了关于函数的知识，我们还讲到过Python中常用的数据类型，这些类型的变量都可以作为函数的参数或返回值，用好函数还可以让我们做更多的事情。</p><h3 id="关键字参数" tabindex="-1"><a class="header-anchor" href="#关键字参数" aria-hidden="true">#</a> 关键字参数</h3><p>下面是一个判断传入的三条边长能否构成三角形的函数，在调用函数传入参数时，我们可以指定参数名，也可以不指定参数名，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_triangle</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;a = </span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b = </span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">, c = </span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">&gt;</span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">&gt;</span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">&gt;</span> b


<span class="token comment"># 调用函数传入参数不指定参数名按位置对号入座</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_triangle<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 调用函数通过“参数名=参数值”的形式按顺序传入参数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_triangle<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 调用函数通过“参数名=参数值”的形式不按顺序传入参数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_triangle<span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有特殊处理的情况下，函数的参数都是<strong>位置参数</strong>，也就意味着传入参数的时候对号入座即可，如上面代码的第7行所示，传入的参数值<code>1</code>、<code>2</code>、<code>3</code>会依次赋值给参数<code>a</code>、<code>b</code>、<code>c</code>。当然，也可以通过<code>参数名=参数值</code>的方式传入函数所需的参数，因为指定了参数名，传入参数的顺序可以进行调整，如上面代码的第9行和第11行所示。</p><p>调用函数时，如果希望函数的调用者必须以<code>参数名=参数值</code>的方式传参，可以用<strong>命名关键字参数</strong>（keyword-only argument）取代位置参数。所谓命名关键字参数，是在函数的参数列表中，写在<code>*</code>之后的参数，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_triangle</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;a = </span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b = </span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">, c = </span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">&gt;</span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">&gt;</span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">&gt;</span> b


<span class="token comment"># TypeError: is_triangle() takes 0 positional arguments but 3 were given</span>
<span class="token comment"># print(is_triangle(3, 4, 5))</span>
<span class="token comment"># 传参时必须使用“参数名=参数值”的方式，位置不重要</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_triangle<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_triangle<span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：上面的<code>is_triangle</code>函数，参数列表中的<code>*</code>是一个分隔符，<code>*</code>前面的参数都是位置参数，而<code>*</code>后面的参数就是命名关键字参数。</p></blockquote><p>我们之前讲过在函数的参数列表中可以使用<strong>可变参数</strong><code>*args</code>来接收任意数量的参数，但是我们需要看看，<code>*args</code>是否能够接收带参数名的参数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> arg <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> arg
    <span class="token keyword">return</span> result


<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的代码会引发<code>TypeError</code>错误，错误消息为<code>calc() got an unexpected keyword argument &#39;a&#39;</code>，由此可见，<code>*args</code>并不能处理带参数名的参数。我们在设计函数时，如果既不知道调用者会传入的参数个数，也不知道调用者会不会指定参数名，那么同时使用可变参数和<strong>关键字参数</strong>。关键字参数会将传入的带参数名的参数组装成一个字典，参数名就是字典中键值对的键，而参数值就是字典中键值对的值，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> arg <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> arg
    <span class="token keyword">for</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> value
    <span class="token keyword">return</span> result


<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment"># 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># 6</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 6</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>提示</strong>：<strong>不带参数名的参数（位置参数）必须出现在带参数名的参数（关键字参数）之前</strong>，否则将会引发异常。例如，执行<code>calc(1, 2, c=3, d=4, 5)</code>将会引发<code>SyntaxError</code>错误，错误消息为<code>positional argument follows keyword argument</code>，翻译成中文意思是“位置参数出现在关键字参数之后”。</p></blockquote><h3 id="高阶函数的用法" tabindex="-1"><a class="header-anchor" href="#高阶函数的用法" aria-hidden="true">#</a> 高阶函数的用法</h3><p>在前面几节课中，我们讲到了面向对象程序设计，在面向对象的世界中，一切皆为对象，所以类和函数也是对象。函数的参数和返回值可以是任意类型的对象，这就意味着<strong>函数本身也可以作为函数的参数或返回值</strong>，这就是所谓的<strong>高阶函数</strong>。</p><p>如果我们希望上面的<code>calc</code>函数不仅仅可以做多个参数求和，还可以做多个参数求乘积甚至更多的二元运算，我们就可以使用高阶函数的方式来改写上面的代码，将加法运算从函数中移除掉，具体的做法如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> init_value<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> init_value
    <span class="token keyword">for</span> arg <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> op<span class="token punctuation">(</span>result<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>
    <span class="token keyword">for</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> op<span class="token punctuation">(</span>result<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，上面的函数增加了两个参数，其中<code>init_value</code>代表运算的初始值，<code>op</code>代表二元运算函数。经过改造的<code>calc</code>函数不仅仅可以实现多个参数的累加求和，也可以实现多个参数的累乘运算，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y


<span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> y


<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> init_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> op<span class="token operator">=</span>add<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 15</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> init_value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> op<span class="token operator">=</span>mul<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过对高阶函数的运用，<code>calc</code>函数不再和加法运算耦合，所以灵活性和通用性会变强，这是一种解耦合的编程技巧，但是最初学者来说可能会稍微有点难以理解。需要注意的是，将函数作为参数和调用函数是有显著的区别的，<strong>调用函数需要在函数名后面跟上圆括号，而把函数作为参数时只需要函数名即可</strong>。上面的代码也可以不用定义<code>add</code>和<code>mul</code>函数，因为Python标准库中的<code>operator</code>模块提供了代表加法运算的<code>add</code>和代表乘法运算的<code>mul</code>函数，我们直接使用即可，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> operator

<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> init_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> op<span class="token operator">=</span>operator<span class="token punctuation">.</span>add<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 15</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> init_value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> op<span class="token operator">=</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python内置函数中有不少高阶函数，我们前面提到过的<code>filter</code>和<code>map</code>函数就是高阶函数，前者可以实现对序列中元素的过滤，后者可以实现对序列中元素的映射，例如我们要去掉一个整数列表中的奇数，并对所有的偶数求平方得到一个新的列表，就可以直接使用这两个函数来做到，具体的做法是如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_even</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>


<span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> num <span class="token operator">**</span> <span class="token number">2</span>


numbers1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">]</span>
numbers2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>is_even<span class="token punctuation">,</span> numbers1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>numbers2<span class="token punctuation">)</span>    <span class="token comment"># [144, 64, 3600, 2704]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，要完成上面代码的功能，也可以使用列表生成式，列表生成式的做法更为简单优雅。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>numbers1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">]</span>
numbers2 <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> numbers1 <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>numbers2<span class="token punctuation">)</span>    <span class="token comment"># [144, 64, 3600, 2704]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lambda函数" tabindex="-1"><a class="header-anchor" href="#lambda函数" aria-hidden="true">#</a> Lambda函数</h3><p>在使用高阶函数的时候，如果作为参数或者返回值的函数本身非常简单，一行代码就能够完成，那么我们可以使用<strong>Lambda函数</strong>来表示。Python中的Lambda函数是没有的名字函数，所以很多人也把它叫做<strong>匿名函数</strong>，匿名函数只能有一行代码，代码中的表达式产生的运算结果就是这个匿名函数的返回值。上面代码中的<code>is_even</code>和<code>square</code>函数都只有一行代码，我们可以用Lambda函数来替换掉它们，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>numbers1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">]</span>
numbers2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> numbers1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>numbers2<span class="token punctuation">)</span>    <span class="token comment"># [144, 64, 3600, 2704]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码可以看出，定义Lambda函数的关键字是<code>lambda</code>，后面跟函数的参数，如果有多个参数用逗号进行分隔；冒号后面的部分就是函数的执行体，通常是一个表达式，表达式的运算结果就是Lambda函数的返回值，不需要写<code>return</code> 关键字。</p><p>如果需要使用加减乘除这种简单的二元函数，也可以用Lambda函数来书写，例如调用上面的<code>calc</code>函数时，可以通过传入Lambda函数来作为<code>op</code>参数的参数值。当然，<code>op</code>参数也可以有默认值，例如我们可以用一个代表加法运算的Lambda函数来作为<code>op</code>参数的默认值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> init_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> op<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> init_value
    <span class="token keyword">for</span> arg <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> op<span class="token punctuation">(</span>result<span class="token punctuation">,</span> arg<span class="token punctuation">)</span>
    <span class="token keyword">for</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">=</span> op<span class="token punctuation">(</span>result<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result


<span class="token comment"># 调用calc函数，使用init_value和op的默认值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 15</span>
<span class="token comment"># 调用calc函数，通过lambda函数给op参数赋值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>calc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> init_value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> op<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>提示</strong>：注意上面的代码中的<code>calc</code>函数，它同时使用了可变参数、关键字参数、命名关键字参数，其中命名关键字参数要放在可变参数和关键字参数之间，传参时先传入可变参数，关键字参数和命名关键字参数的先后顺序并不重要。</p></blockquote><p>有很多函数在Python中用一行代码就能实现，我们可以用Lambda函数来定义这些函数，调用Lambda函数就跟调用普通函数一样，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> operator<span class="token punctuation">,</span> functools

<span class="token comment"># 一行代码定义求阶乘的函数</span>
fac <span class="token operator">=</span> <span class="token keyword">lambda</span> num<span class="token punctuation">:</span> functools<span class="token punctuation">.</span><span class="token builtin">reduce</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 一行代码定义判断素数的函数</span>
is_prime <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">and</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> f<span class="token punctuation">:</span> x <span class="token operator">%</span> f<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 调用Lambda函数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 3628800</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>提示1</strong>：上面使用的<code>reduce</code>函数是Python标准库<code>functools</code>模块中的函数，它可以实现对数据的归约操作，通常情况下，<strong>过滤</strong>（filter）、<strong>映射</strong>（map）和<strong>归约</strong>（reduce）是处理数据中非常关键的三个步骤，而Python的标准库也提供了对这三个操作的支持。</p><p><strong>提示2</strong>：上面使用的<code>all</code>函数是Python内置函数，如果传入的序列中所有布尔值都是<code>True</code>，<code>all</code>函数就返回<code>True</code>，否则<code>all</code>函数就返回<code>False</code>。</p></blockquote><h3 id="简单的总结-10" tabindex="-1"><a class="header-anchor" href="#简单的总结-10" aria-hidden="true">#</a> 简单的总结</h3><p>Python中的函数可以使用可变参数<code>*args</code>和关键字参数<code>**kwargs</code>来接收任意数量的参数，而且传入参数时可以带上参数名也可以没有参数名，可变参数会被处理成一个元组，而关键字参数会被处理成一个字典。<strong>Python中的函数是一等函数，可以赋值给变量，也可以作为函数的参数和返回值</strong>，这也就意味着我们可以在Python中使用高阶函数。如果我们要定义的函数非常简单，只有一行代码且不需要函数名，可以使用Lambda函数（匿名函数）。</p><h2 id="第16课-函数的高级应用" tabindex="-1"><a class="header-anchor" href="#第16课-函数的高级应用" aria-hidden="true">#</a> 第16课：函数的高级应用</h2><p>在上一节课中，我们已经对函数进行了更为深入的研究，还探索了Python中的高阶函数和Lambda函数。在这些知识的基础上，这节课我们为大家分享两个和函数相关的内容，一个是装饰器，一个是函数的递归调用。</p><h3 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器" aria-hidden="true">#</a> 装饰器</h3><p>装饰器是Python中<strong>用一个函数装饰另外一个函数或类并为其提供额外功能</strong>的语法现象。装饰器本身是一个函数，它的参数是被装饰的函数或类，它的返回值是一个带有装饰功能的函数。很显然，装饰器是一个高阶函数，它的参数和返回值都是函数。下面我们先通过一个简单的例子来说明装饰器的写法和作用，假设已经有名为<code>downlaod</code>和<code>upload</code>的两个函数，分别用于文件的上传和下载，下面的代码用休眠一段随机时间的方式模拟了下载和上传需要花费的时间，并没有联网做上传下载。</p><blockquote><p><strong>说明</strong>：用Python语言实现联网的上传下载也很简单，继续你的学习，这个环节很快就会来到。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;开始下载</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">下载完成.&#39;</span></span><span class="token punctuation">)</span>

    
<span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;开始上传</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">上传完成.&#39;</span></span><span class="token punctuation">)</span>

    
download<span class="token punctuation">(</span><span class="token string">&#39;MySQL从删库到跑路.avi&#39;</span><span class="token punctuation">)</span>
upload<span class="token punctuation">(</span><span class="token string">&#39;Python从入门到住院.pdf&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们希望知道调用<code>download</code>和<code>upload</code>函数做文件上传下载到底用了多少时间，这个应该如何实现呢？相信很多小伙伴已经想到了，我们可以在函数开始执行的时候记录一个时间，在函数调用结束后记录一个时间，两个时间相减就可以计算出下载或上传的时间，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
download<span class="token punctuation">(</span><span class="token string">&#39;MySQL从删库到跑路.avi&#39;</span><span class="token punctuation">)</span>
end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;花费时间: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">}</span></span><span class="token string">秒&#39;</span></span><span class="token punctuation">)</span>
start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
upload<span class="token punctuation">(</span><span class="token string">&#39;Python从入门到住院.pdf&#39;</span><span class="token punctuation">)</span>
end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;花费时间: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">}</span></span><span class="token string">秒&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码，我们可以得到下载和上传花费的时间，但不知道大家是否注意到，上面记录时间、计算和显示执行时间的代码都是重复代码。有编程经验的人都知道，<strong>重复的代码是万恶之源</strong>，那么有没有办法在不写重复代码的前提下，用一种简单优雅的方式记录下函数的执行时间呢？在Python中，装饰器就是解决这类问题的最佳选择。我们可以把记录函数执行时间的功能封装到一个装饰器中，在有需要的地方直接使用这个装饰器就可以了，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time


<span class="token comment"># 定义装饰器函数，它的参数是被装饰的函数或类</span>
<span class="token keyword">def</span> <span class="token function">record_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token comment"># 定义一个带装饰功能（记录被装饰函数的执行时间）的函数</span>
    <span class="token comment"># 因为不知道被装饰的函数有怎样的参数所以使用*args和**kwargs接收所有参数</span>
    <span class="token comment"># 在Python中函数可以嵌套的定义（函数中可以再定义函数）</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 在执行被装饰的函数之前记录开始时间</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 执行被装饰的函数并获取返回值</span>
        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token comment"># 在执行被装饰的函数之后记录结束时间</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 计算和显示被装饰函数的执行时间</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">执行时间: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">}</span></span><span class="token string">秒&#39;</span></span><span class="token punctuation">)</span>
        <span class="token comment"># 返回被装饰函数的返回值（装饰器通常不会改变被装饰函数的执行结果）</span>
        <span class="token keyword">return</span> result
    
    <span class="token comment"># 返回带装饰功能的wrapper函数</span>
    <span class="token keyword">return</span> wrapper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上面的装饰器函数有两种方式，第一种方式就是直接调用装饰器函数，传入被装饰的函数并获得返回值，我们可以用这个返回值直接覆盖原来的函数，那么在调用时就已经获得了装饰器提供的额外的功能（记录执行时间），大家可以试试下面的代码就明白了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>download <span class="token operator">=</span> record_time<span class="token punctuation">(</span>download<span class="token punctuation">)</span>
upload <span class="token operator">=</span> record_time<span class="token punctuation">(</span>upload<span class="token punctuation">)</span>
download<span class="token punctuation">(</span><span class="token string">&#39;MySQL从删库到跑路.avi&#39;</span><span class="token punctuation">)</span>
upload<span class="token punctuation">(</span><span class="token string">&#39;Python从入门到住院.pdf&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中已经没有重复代码了，虽然写装饰器会花费一些心思，但是这是一个一劳永逸的骚操作，如果还有其他的函数也需要记录执行时间，按照上面的代码如法炮制即可。</p><p>在Python中，使用装饰器很有更为便捷的<strong>语法糖</strong>（编程语言中添加的某种语法，这种语法对语言的功能没有影响，但是使用更加方法，代码的可读性也更强，我们将其称之为“语法糖”或“糖衣语法”），可以用<code>@装饰器函数</code>将装饰器函数直接放在被装饰的函数上，效果跟上面的代码相同，下面是完整的代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">import</span> time


<span class="token keyword">def</span> <span class="token function">record_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">执行时间: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">}</span></span><span class="token string">秒&#39;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> result

    <span class="token keyword">return</span> wrapper


<span class="token decorator annotation punctuation">@record_time</span>
<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;开始下载</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">下载完成.&#39;</span></span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@record_time</span>
<span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;开始上传</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">上传完成.&#39;</span></span><span class="token punctuation">)</span>


download<span class="token punctuation">(</span><span class="token string">&#39;MySQL从删库到跑路.avi&#39;</span><span class="token punctuation">)</span>
upload<span class="token punctuation">(</span><span class="token string">&#39;Python从入门到住院.pdf&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码，我们通过装饰器语法糖为<code>download</code>和<code>upload</code>函数添加了装饰器，这样调用<code>download</code>和<code>upload</code>函数时，会记录下函数的执行时间。事实上，被装饰后的<code>download</code>和<code>upload</code>函数是我们在装饰器<code>record_time</code>中返回的<code>wrapper</code>函数，调用它们其实就是在调用<code>wrapper</code>函数，所以拥有了记录函数执行时间的功能。</p><p>如果希望取消装饰器的作用，那么在定义装饰器函数的时候，需要做一些额外的工作。Python标准库<code>functools</code>模块的<code>wraps</code>函数也是一个装饰器，我们将它放在<code>wrapper</code>函数上，这个装饰器可以帮我们保留被装饰之前的函数，这样在需要取消装饰器时，可以通过被装饰函数的<code>__wrapped__</code>属性获得被装饰之前的函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random
<span class="token keyword">import</span> time

<span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps


<span class="token keyword">def</span> <span class="token function">record_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">执行时间: </span><span class="token interpolation"><span class="token punctuation">{</span>end <span class="token operator">-</span> start<span class="token punctuation">:</span><span class="token format-spec">.3f</span><span class="token punctuation">}</span></span><span class="token string">秒&#39;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> result

    <span class="token keyword">return</span> wrapper


<span class="token decorator annotation punctuation">@record_time</span>
<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;开始下载</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">下载完成.&#39;</span></span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@record_time</span>
<span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;开始上传</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">上传完成.&#39;</span></span><span class="token punctuation">)</span>


download<span class="token punctuation">(</span><span class="token string">&#39;MySQL从删库到跑路.avi&#39;</span><span class="token punctuation">)</span>
upload<span class="token punctuation">(</span><span class="token string">&#39;Python从入门到住院.pdf&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 取消装饰器</span>
download<span class="token punctuation">.</span>__wrapped__<span class="token punctuation">(</span><span class="token string">&#39;MySQL必知必会.pdf&#39;</span><span class="token punctuation">)</span>
upload <span class="token operator">=</span> upload<span class="token punctuation">.</span>__wrapped__
upload<span class="token punctuation">(</span><span class="token string">&#39;Python从新手到大师.pdf&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>装饰器函数本身也可以参数化</strong>，简单的说就是通过我们的装饰器也是可以通过调用者传入的参数来定制的，这个知识点我们在后面用到它的时候再为大家讲解。</p><h3 id="递归调用" tabindex="-1"><a class="header-anchor" href="#递归调用" aria-hidden="true">#</a> 递归调用</h3><p>Python中允许函数嵌套定义，也允许函数之间相互调用，而且一个函数还可以直接或间接的调用自身。函数自己调用自己称为递归调用，那么递归调用有什么用处呢？现实中，有很多问题的定义本身就是一个递归定义，例如我们之前讲到的阶乘，非负整数<code>N</code>的阶乘是<code>N</code>乘以<code>N-1</code>的阶乘，即$ N! = N \\times (N-1)! $，定义的左边和右边都出现了阶乘的概念，所以这是一个递归定义。既然如此，我们可以使用递归调用的方式来写一个求阶乘的函数，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fac</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> num <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> fac<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，<code>fac</code>函数中又调用了<code>fac</code>函数，这就是所谓的递归调用。代码第2行的<code>if</code>条件叫做递归的收敛条件，简单的说就是什么时候要结束函数的递归调用，在计算阶乘时，如果计算到<code>0</code>或<code>1</code>的阶乘，就停止递归调用，直接返回<code>1</code>；代码第4行的<code>num * fac(num - 1)</code>是递归公式，也就是阶乘的递归定义。下面，我们简单的分析下，如果用<code>fac(5)</code>计算<code>5</code>的阶乘，整个过程会是怎样的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 递归调用函数入栈</span>
<span class="token comment"># 5 * fac(4)</span>
<span class="token comment"># 5 * (4 * fac(3))</span>
<span class="token comment"># 5 * (4 * (3 * fac(2)))</span>
<span class="token comment"># 5 * (4 * (3 * (2 * fac(1))))</span>
<span class="token comment"># 停止递归函数出栈</span>
<span class="token comment"># 5 * (4 * (3 * (2 * 1)))</span>
<span class="token comment"># 5 * (4 * (3 * 2))</span>
<span class="token comment"># 5 * (4 * 6)</span>
<span class="token comment"># 5 * 24</span>
<span class="token comment"># 120</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fac<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，函数调用会通过内存中称为“栈”（stack）的数据结构来保存当前代码的执行现场，函数调用结束后会通过这个栈结构恢复之前的执行现场。栈是一种先进后出的数据结构，这也就意味着最早入栈的函数最后才会返回，而最后入栈的函数会最先返回。例如调用一个名为<code>a</code>的函数，函数<code>a</code>的执行体中又调用了函数<code>b</code>，函数<code>b</code>的执行体中又调用了函数<code>c</code>，那么最先入栈的函数是<code>a</code>，最先出栈的函数是<code>c</code>。每进入一个函数调用，栈就会增加一层栈帧（stack frame），栈帧就是我们刚才提到的保存当前代码执行现场的结构；每当函数调用结束后，栈就会减少一层栈帧。通常，内存中的栈空间很小，因此递归调用的次数如果太多，会导致栈溢出（stack overflow），所以<strong>递归调用一定要确保能够快速收敛</strong>。我们可以尝试执行<code>fac(5000)</code>，看看是不是会提示<code>RecursionError</code>错误，错误消息为：<code>maximum recursion depth exceeded in comparison</code>（超出最大递归深度），其实就是发生了栈溢出。</p><p>我们使用的Python官方解释器，默认将函数调用的栈结构最大深度设置为<code>1000</code>层。如果超出这个深度，就会发生上面说的<code>RecursionError</code>。当然，我们可以使用<code>sys</code>模块的<code>setrecursionlimit</code>函数来改变递归调用的最大深度，例如：<code>sys.setrecursionlimit(10000)</code>，这样就可以让上面的<code>fac(5000)</code>顺利执行出结果，但是我们不建议这样做，因为让递归快速收敛才是我们应该做的事情，否则就应该考虑使用循环递推而不是递归。</p><p>再举一个之前讲过的生成斐波那契数列的例子，因为斐波那契数列前两个数都是<code>1</code>，从第3个数开始，每个数是前两个数相加的和，可以记为<code>f(n) = f(n - 1) + f(n - 2)</code>，很显然这又是一个递归的定义，所以我们可以用下面的递归调用函数来计算第​<code>n</code>个斐波那契数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>


<span class="token comment"># 打印前20个斐波那契数</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要提醒大家，上面计算斐波那契数的代码虽然看起来非常简单明了，但执行性能是比较糟糕的，原因大家可以自己思考一下，更好的做法还是之前讲过的使用循环递推的方式，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
    <span class="token keyword">return</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-11" tabindex="-1"><a class="header-anchor" href="#简单的总结-11" aria-hidden="true">#</a> 简单的总结</h3><p>装饰器是Python中的特色语法，<strong>可以通过装饰器来增强现有的函数</strong>，这是一种非常有用的编程技巧。一些复杂的问题用函数递归调用的方式写起来真的很简单，但是<strong>函数的递归调用一定要注意收敛条件和递归公式</strong>，找到递归公式才有机会使用递归调用，而收敛条件确定了递归什么时候停下来。函数调用通过内存中的栈空间来保存现场和恢复现场，栈空间通常都很小，所以<strong>递归如果不能迅速收敛，很可能会引发栈溢出错误，从而导致程序的崩溃</strong>。</p><h2 id="第17课-面向对象编程入门" tabindex="-1"><a class="header-anchor" href="#第17课-面向对象编程入门" aria-hidden="true">#</a> 第17课：面向对象编程入门</h2><p>面向对象编程是一种非常流行的<strong>编程范式</strong>（programming paradigm），所谓编程范式就是<strong>程序设计的方法论</strong>，简单的说就是程序员对程序的认知和理解以及他们编写代码的方式。</p><p>在前面的课程中，我们说过“<strong>程序是指令的集合</strong>”，运行程序时，程序中的语句会变成一条或多条指令，然后由CPU（中央处理器）去执行。为了简化程序的设计，我们又讲到了函数，<strong>把相对独立且经常重复使用的代码放置到函数中</strong>，在需要使用这些代码的时候调用函数即可。如果一个函数的功能过于复杂和臃肿，我们又可以进一步<strong>将函数进一步拆分为多个子函数</strong>来降低系统的复杂性。</p><p>不知大家是否发现，我们的编程工作其实是写程序的人按照计算机的工作方式通过代码控制机器完成任务。但是，计算机的工作方式与人类正常的思维模式是不同的，如果编程就必须抛弃人类正常的思维方式去迎合计算机，编程的乐趣就少了很多，而“每个人都应该学习编程”的豪言壮语也就只能喊喊口号而已。这里，我想说的并不是我们不能按照计算机的工作方式去编写代码，但是当我们需要开发一个复杂的系统时，这种方式会让代码过于复杂，从而导致开发和维护工作都变得举步维艰。</p><p>随着软件复杂性的增加，编写正确可靠的代码会变成了一项极为艰巨的任务，这也是很多人都坚信“软件开发是人类改造世界所有活动中最为复杂的活动”的原因。如何用程序描述复杂系统和解决复杂问题，就成为了所有程序员必须要思考和直面的问题。诞生于上世纪70年代的Smalltalk语言让软件开发者看到了希望，因为它引入了一种新的编程范式叫面向对象编程。在面向对象编程的世界里，程序中的<strong>数据和操作数据的函数是一个逻辑上的整体</strong>，我们称之为<strong>对象</strong>，<strong>对象可以接收消息</strong>，解决问题的方法就是<strong>创建对象并向对象发出各种各样的消息</strong>；通过消息传递，程序中的多个对象可以协同工作，这样就能构造出复杂的系统并解决现实中的问题。当然，面向对象编程的雏形还可以向前追溯到更早期的Simula语言，但这不是我们现在要讨论的重点。</p><blockquote><p><strong>说明：</strong> 今天我们使用的很多高级程序设计语言都支持面向对象编程，但是面向对象编程也不是解决软件开发中所有问题的“银弹”，或者说在软件开发这个行业目前还找不到这种所谓的“银弹”。关于这个问题，大家可以参考IBM360系统之父弗雷德里克·布鲁克斯所发表的论文《没有银弹：软件工程的本质性与附属性工作》或软件工程的经典著作《人月神话》一书。</p></blockquote><h3 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象" aria-hidden="true">#</a> 类和对象</h3><p>如果要用一句话来概括面向对象编程，我认为下面的说法是相当精辟和准确的。</p><blockquote><p><strong>面向对象编程</strong>：把一组数据和处理数据的方法组成<strong>对象</strong>，把行为相同的对象归纳为<strong>类</strong>，通过<strong>封装</strong>隐藏对象的内部细节，通过<strong>继承</strong>实现类的特化和泛化，通过<strong>多态</strong>实现基于对象类型的动态分派。</p></blockquote><p>这句话对初学者来说可能不那么容易理解，但是我可以先为大家圈出几个关键词：<strong>对象</strong>（object）、<strong>类</strong>（class）、<strong>封装</strong>（encapsulation）、<strong>继承</strong>（inheritance）、<strong>多态</strong>（polymorphism）。</p><p>我们先说说类和对象这两个词。在面向对象编程中，<strong>类是一个抽象的概念，对象是一个具体的概念</strong>。我们把同一类对象的共同特征抽取出来就是一个类，比如我们经常说的人类，这是一个抽象概念，而我们每个人就是人类的这个抽象概念下的实实在在的存在，也就是一个对象。简而言之，<strong>类是对象的蓝图和模板，对象是类的实例，是可以接受消息的实体</strong>。</p><p>在面向对象编程的世界中，<strong>一切皆为对象</strong>，<strong>对象都有属性和行为</strong>，<strong>每个对象都是独一无二的</strong>，而且<strong>对象一定属于某个类</strong>。对象的属性是对象的静态特征，对象的行为是对象的动态特征。按照上面的说法，如果我们把拥有共同特征的对象的属性和行为都抽取出来，就可以定义出一个类。</p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711908.png" width="75%"><h3 id="定义类" tabindex="-1"><a class="header-anchor" href="#定义类" aria-hidden="true">#</a> 定义类</h3><p>在Python中，可以使用<code>class</code>关键字加上类名来定义类，通过缩进我们可以确定类的代码块，就如同定义函数那样。在类的代码块中，我们需要写一些函数，我们说过类是一个抽象概念，那么这些函数就是我们对一类对象共同的动态特征的提取。写在类里面的函数我们通常称之为<strong>方法</strong>，方法就是对象的行为，也就是对象可以接收的消息。方法的第一个参数通常都是<code>self</code>，它代表了接收这个消息的对象本身。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">study</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> course_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;学生正在学习</span><span class="token interpolation"><span class="token punctuation">{</span>course_name<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;学生正在玩游戏.&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建和使用对象" tabindex="-1"><a class="header-anchor" href="#创建和使用对象" aria-hidden="true">#</a> 创建和使用对象</h3><p>在我们定义好一个类之后，可以使用构造器语法来创建对象，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>stu1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>
stu2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span>    <span class="token comment"># &lt;__main__.Student object at 0x10ad5ac50&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span>    <span class="token comment"># &lt;__main__.Student object at 0x10ad5acd0&gt; </span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 0x10ad5ac50 0x10ad5acd0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在类的名字后跟上圆括号就是所谓的构造器语法，上面的代码创建了两个学生对象，一个赋值给变量<code>stu1</code>，一个复制给变量<code>stu2</code>。当我们用<code>print</code>函数打印<code>stu1</code>和<code>stu2</code>两个变量时，我们会看到输出了对象在内存中的地址（十六进制形式），跟我们用<code>id</code>函数查看对象标识获得的值是相同的。现在我们可以告诉大家，我们定义的变量其实保存的是一个对象在内存中的逻辑地址（位置），通过这个逻辑地址，我们就可以在内存中找到这个对象。所以<code>stu3 = stu2</code>这样的赋值语句并没有创建新的对象，只是用一个新的变量保存了已有对象的地址。</p><p>接下来，我们尝试给对象发消息，即调用对象的方法。刚才的<code>Student</code>类中我们定义了<code>study</code>和<code>play</code>两个方法，两个方法的第一个参数<code>self</code>代表了接收消息的学生对象，<code>study</code>方法的第二个参数是学习的课程名称。Python中，给对象发消息有两种方式，请看下面的代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 通过“类.方法”调用方法，第一个参数是接收消息的对象，第二个参数是学习的课程名称</span>
Student<span class="token punctuation">.</span>study<span class="token punctuation">(</span>stu1<span class="token punctuation">,</span> <span class="token string">&#39;Python程序设计&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># 学生正在学习Python程序设计.</span>
<span class="token comment"># 通过“对象.方法”调用方法，点前面的对象就是接收消息的对象，只需要传入第二个参数</span>
stu1<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token string">&#39;Python程序设计&#39;</span><span class="token punctuation">)</span>             <span class="token comment"># 学生正在学习Python程序设计.</span>

Student<span class="token punctuation">.</span>play<span class="token punctuation">(</span>stu2<span class="token punctuation">)</span>    <span class="token comment"># 学生正在玩游戏.</span>
stu2<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment"># 学生正在玩游戏. </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化方法" tabindex="-1"><a class="header-anchor" href="#初始化方法" aria-hidden="true">#</a> 初始化方法</h3><p>大家可能已经注意到了，刚才我们创建的学生对象只有行为没有属性，如果要给学生对象定义属性，我们可以修改<code>Student</code>类，为其添加一个名为<code>__init__</code>的方法。在我们调用<code>Student</code>类的构造器创建对象时，首先会在内存中获得保存学生对象所需的内存空间，然后通过自动执行<code>__init__</code>方法，完成对内存的初始化操作，也就是把数据放到内存空间中。所以我们可以通过给<code>Student</code>类添加<code>__init__</code>方法的方式为学生对象指定属性，同时完成对属性赋初始值的操作，正因如此，<code>__init__</code>方法通常也被称为初始化方法。</p><p>我们对上面的<code>Student</code>类稍作修改，给学生对象添加<code>name</code>（姓名）和<code>age</code>（年龄）两个属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">study</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> course_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;学习&quot;&quot;&quot;</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">正在学习</span><span class="token interpolation"><span class="token punctuation">{</span>course_name<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;玩耍&quot;&quot;&quot;</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">正在玩游戏.&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改刚才创建对象和给对象发消息的代码，重新执行一次，看看程序的执行结果有什么变化。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 由于初始化方法除了self之外还有两个参数</span>
<span class="token comment"># 所以调用Student类的构造器创建对象时要传入这两个参数</span>
stu1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;骆昊&#39;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>
stu2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>
stu1<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token string">&#39;Python程序设计&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># 骆昊正在学习Python程序设计.</span>
stu2<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># 王大锤正在玩游戏.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打印对象" tabindex="-1"><a class="header-anchor" href="#打印对象" aria-hidden="true">#</a> 打印对象</h3><p>上面我们通过<code>__init__</code>方法在创建对象时为对象绑定了属性并赋予了初始值。在Python中，以两个下划线<code>__</code>（读作“dunder”）开头和结尾的方法通常都是有特殊用途和意义的方法，我们一般称之为<strong>魔术方法</strong>或<strong>魔法方法</strong>。如果我们在打印对象的时候不希望看到对象的地址而是看到我们自定义的信息，可以通过在类中放置<code>__repr__</code>魔术方法来做到，该方法返回的字符串就是用<code>print</code>函数打印对象的时候会显示的内容，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">study</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> course_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;学习&quot;&quot;&quot;</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">正在学习</span><span class="token interpolation"><span class="token punctuation">{</span>course_name<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;玩耍&quot;&quot;&quot;</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">正在玩游戏.&#39;</span></span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>


stu1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;骆昊&#39;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span>        <span class="token comment"># 骆昊: 40</span>
students <span class="token operator">=</span> <span class="token punctuation">[</span>stu1<span class="token punctuation">,</span> Student<span class="token punctuation">(</span><span class="token string">&#39;李元芳&#39;</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Student<span class="token punctuation">(</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span>    <span class="token comment"># [骆昊: 40, 李元芳: 36, 王大锤: 25]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="面向对象的支柱" tabindex="-1"><a class="header-anchor" href="#面向对象的支柱" aria-hidden="true">#</a> 面向对象的支柱</h3><p>面向对象编程有三大支柱，就是我们之前给大家划重点的时候圈出的三个词：<strong>封装</strong>、<strong>继承</strong>和<strong>多态</strong>。后面两个概念在下一节课中会详细说明，这里我们先说一下什么是封装。我自己对封装的理解是：<strong>隐藏一切可以隐藏的实现细节，只向外界暴露简单的调用接口</strong>。我们在类中定义的对象方法其实就是一种封装，这种封装可以让我们在创建对象之后，只需要给对象发送一个消息就可以执行方法中的代码，也就是说我们在只知道方法的名字和参数（方法的外部视图），不知道方法内部实现细节（方法的内部视图）的情况下就完成了对方法的使用。</p><p>举一个例子，假如要控制一个机器人帮我倒杯水，如果不使用面向对象编程，不做任何的封装，那么就需要向这个机器人发出一系列的指令，如站起来、向左转、向前走5步、拿起面前的水杯、向后转、向前走10步、弯腰、放下水杯、按下出水按钮、等待10秒、松开出水按钮、拿起水杯、向右转、向前走5步、放下水杯等，才能完成这个简单的操作，想想都觉得麻烦。按照面向对象编程的思想，我们可以将倒水的操作封装到机器人的一个方法中，当需要机器人帮我们倒水的时候，只需要向机器人对象发出倒水的消息就可以了，这样做不是更好吗？</p><p>在很多场景下，面向对象编程其实就是一个三步走的问题。第一步定义类，第二步创建对象，第三步给对象发消息。当然，有的时候我们是不需要第一步的，因为我们想用的类可能已经存在了。之前我们说过，Python内置的<code>list</code>、<code>set</code>、<code>dict</code>其实都不是函数而是类，如果要创建列表、集合、字典对象，我们就不用自定义类了。当然，有的类并不是Python标准库中直接提供的，它可能来自于第三方的代码，如何安装和使用三方代码在后续课程中会进行讨论。在某些特殊的场景中，我们会用到名为“内置对象”的对象，所谓“内置对象”就是说上面三步走的第一步和第二步都不需要了，因为类已经存在而且对象已然创建过了，直接向对象发消息就可以了，这也就是我们常说的“开箱即用”。</p><h3 id="经典案例" tabindex="-1"><a class="header-anchor" href="#经典案例" aria-hidden="true">#</a> 经典案例</h3><h4 id="案例1-定义一个类描述数字时钟。" tabindex="-1"><a class="header-anchor" href="#案例1-定义一个类描述数字时钟。" aria-hidden="true">#</a> 案例1：定义一个类描述数字时钟。</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time


<span class="token comment"># 定义数字时钟类</span>
<span class="token keyword">class</span> <span class="token class-name">Clock</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;初始化方法
        :param hour: 时
        :param minute: 分
        :param second: 秒
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>hour <span class="token operator">=</span> hour
        self<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token operator">=</span> minute
        self<span class="token punctuation">.</span>sec <span class="token operator">=</span> second

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>sec <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>sec <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>sec <span class="token operator">=</span> <span class="token number">0</span>
            self<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token operator">=</span> <span class="token number">0</span>
                self<span class="token punctuation">.</span>hour <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> self<span class="token punctuation">.</span>hour <span class="token operator">==</span> <span class="token number">24</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>hour<span class="token punctuation">:</span><span class="token format-spec">0&gt;2d</span><span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">:</span><span class="token format-spec">0&gt;2d</span><span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>sec<span class="token punctuation">:</span><span class="token format-spec">0&gt;2d</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>


<span class="token comment"># 创建时钟对象</span>
clock <span class="token operator">=</span> Clock<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># 给时钟对象发消息读取时间</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>clock<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 休眠1秒钟</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment"># 给时钟对象发消息使其走字</span>
    clock<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例2-定义一个类描述平面上的点-要求提供计算到另一个点距离的方法。" tabindex="-1"><a class="header-anchor" href="#案例2-定义一个类描述平面上的点-要求提供计算到另一个点距离的方法。" aria-hidden="true">#</a> 案例2：定义一个类描述平面上的点，要求提供计算到另一个点距离的方法。</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;屏面上的点&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;初始化方法
        :param x: 横坐标
        :param y: 纵坐标
        &quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">=</span> x<span class="token punctuation">,</span> y

    <span class="token keyword">def</span> <span class="token function">distance_to</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;计算与另一个点的距离
        :param other: 另一个点
        &quot;&quot;&quot;</span>
        dx <span class="token operator">=</span> self<span class="token punctuation">.</span>x <span class="token operator">-</span> other<span class="token punctuation">.</span>x
        dy <span class="token operator">=</span> self<span class="token punctuation">.</span>y <span class="token operator">-</span> other<span class="token punctuation">.</span>y
        <span class="token keyword">return</span> <span class="token punctuation">(</span>dx <span class="token operator">*</span> dx <span class="token operator">+</span> dy <span class="token operator">*</span> dy<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&#39;(</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>x<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>y<span class="token punctuation">}</span></span><span class="token string">)&#39;</span></span>


p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
p2 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>distance_to<span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-12" tabindex="-1"><a class="header-anchor" href="#简单的总结-12" aria-hidden="true">#</a> 简单的总结</h3><p>面向对象编程是一种非常流行的编程范式，除此之外还有<strong>指令式编程</strong>、<strong>函数式编程</strong>等编程范式。由于现实世界是由对象构成的，而对象是可以接收消息的实体，所以<strong>面向对象编程更符合人类正常的思维习惯</strong>。类是抽象的，对象是具体的，有了类就能创建对象，有了对象就可以接收消息，这就是面向对象编程的基础。定义类的过程是一个抽象的过程，找到对象公共的属性属于数据抽象，找到对象公共的方法属于行为抽象。抽象的过程是一个仁者见仁智者见智的过程，对同一类对象进行抽象可能会得到不同的结果，如下图所示。</p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711315.png" width="75%"><blockquote><p><strong>说明：</strong> 本节课的插图来自于 Grady Booc 等撰写的《面向对象分析与设计》一书，该书是讲解面向对象编程的经典著作，有兴趣的读者可以购买和阅读这本书来了解更多的面向对象的相关知识。</p></blockquote><h2 id="第18课-面向对象编程进阶" tabindex="-1"><a class="header-anchor" href="#第18课-面向对象编程进阶" aria-hidden="true">#</a> 第18课：面向对象编程进阶</h2><p>上一节课我们讲解了Python面向对象编程的基础知识，这一节课我们继续来讨论面向对象编程相关的内容。</p><h3 id="可见性和属性装饰器" tabindex="-1"><a class="header-anchor" href="#可见性和属性装饰器" aria-hidden="true">#</a> 可见性和属性装饰器</h3><p>在很多面向对象编程语言中，对象的属性通常会被设置为私有（private）或受保护（protected）的成员，简单的说就是不允许直接访问这些属性；对象的方法通常都是公开的（public），因为公开的方法是对象能够接受的消息，也是对象暴露给外界的调用接口，这就是所谓的访问可见性。在Python中，可以通过给对象属性名添加前缀下划线的方式来说明属性的访问可见性，例如，可以用<code>__name</code>表示一个私有属性，<code>_name</code>表示一个受保护属性，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">study</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> course_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">}</span></span><span class="token string">正在学习</span><span class="token interpolation"><span class="token punctuation">{</span>course_name<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>


stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
stu<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token string">&#39;Python程序设计&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>__name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的最后一行会引发<code>AttributeError</code>（属性错误）异常，异常消息为：<code>&#39;Student&#39; object has no attribute &#39;__name&#39;</code>。由此可见，以<code>__</code>开头的属性<code>__name</code>是私有的，在类的外面无法直接访问，但是类里面的<code>study</code>方法中可以通过<code>self.__name</code>访问该属性。</p><p>需要提醒大家的是，Python并没有从语法上严格保证私有属性的私密性，它只是给私有的属性和方法换了一个名字来阻挠对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，我们可以对上面的代码稍作修改就可以访问到私有的属性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">study</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> course_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">}</span></span><span class="token string">正在学习</span><span class="token interpolation"><span class="token punctuation">{</span>course_name<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>


stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
stu<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token string">&#39;Python程序设计&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>_Student__name<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>_Student__age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python中有一句名言：“<strong>We are all consenting adults here</strong>”（大家都是成年人）。Python语言的设计者认为程序员要为自己的行为负责，而不是由Python语言本身来严格限制访问可见性，而大多数的程序员都认为<strong>开放比封闭要好</strong>，把对象的属性私有化并不是编程语言必须的东西，所以Python并没有从语法上做出最严格的限定。</p><p>Python中可以通过<code>property</code>装饰器为“私有”属性提供读取和修改的方法，之前我们提到过，装饰器通常会放在类、函数或方法的声明之前，通过一个<code>@</code>符号表示将装饰器应用于类、函数或方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age

    <span class="token comment"># 属性访问器(getter方法) - 获取__name属性</span>
    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name
    
    <span class="token comment"># 属性修改器(setter方法) - 修改__name属性</span>
    <span class="token decorator annotation punctuation">@name<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 如果name参数不为空就赋值给对象的__name属性</span>
        <span class="token comment"># 否则将__name属性赋值为&#39;无名氏&#39;，有两种写法</span>
        <span class="token comment"># self.__name = name if name else &#39;无名氏&#39;</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name <span class="token keyword">or</span> <span class="token string">&#39;无名氏&#39;</span>
    
    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__age


stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token comment"># 王大锤 20</span>
stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment"># 无名氏</span>
<span class="token comment"># stu.age = 30     # AttributeError: can&#39;t set attribute</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际项目开发中，我们并不经常使用私有属性，属性装饰器的使用也比较少，所以上面的知识点大家简单了解一下就可以了。</p><h3 id="动态属性" tabindex="-1"><a class="header-anchor" href="#动态属性" aria-hidden="true">#</a> 动态属性</h3><p>Python是一门动态语言，维基百科对动态语言的解释是：“在运行时可以改变其结构的语言，例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。动态语言非常灵活，目前流行的Python和JavaScript都是动态语言，除此之外如PHP、Ruby等也都属于动态语言，而C、C++等语言则不属于动态语言”。</p><p>在Python中，我们可以动态为对象添加属性，这是Python作为动态类型语言的一项特权，代码如下所示。需要提醒大家的是，对象的方法其实本质上也是对象的属性，如果给对象发送一个无法接收的消息，引发的异常仍然是<code>AttributeError</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age


stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token comment"># 为Student对象动态添加sex属性</span>
stu<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不希望在使用对象时动态的为对象添加属性，可以使用Python的<code>__slots__</code>魔法。对于<code>Student</code>类来说，可以在类中指定<code>__slots__ = (&#39;name&#39;, &#39;age&#39;)</code>，这样<code>Student</code>类的对象只能有<code>name</code>和<code>age</code>属性，如果想动态添加其他属性将会引发异常，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>
    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age


stu <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token comment"># AttributeError: &#39;Student&#39; object has no attribute &#39;sex&#39;</span>
stu<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态方法和类方法" tabindex="-1"><a class="header-anchor" href="#静态方法和类方法" aria-hidden="true">#</a> 静态方法和类方法</h3><p>之前我们在类中定义的方法都是对象方法，换句话说这些方法都是对象可以接收的消息。除了对象方法之外，类中还可以有静态方法和类方法，这两类方法是发给类的消息，二者并没有实质性的区别。在面向对象的世界里，一切皆为对象，我们定义的每一个类其实也是一个对象，而静态方法和类方法就是发送给类对象的消息。那么，什么样的消息会直接发送给类对象呢？</p><p>举一个例子，定义一个三角形类，通过传入三条边的长度来构造三角形，并提供计算周长和面积的方法。计算周长和面积肯定是三角形对象的方法，这一点毫无疑问。但是在创建三角形对象时，传入的三条边长未必能构造出三角形，为此我们可以先写一个方法来验证给定的三条边长是否可以构成三角形，这种方法很显然就不是对象方法，因为在调用这个方法时三角形对象还没有创建出来。我们可以把这类方法设计为静态方法或类方法，也就是说这类方法不是发送给三角形对象的消息，而是发送给三角形类的消息，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;三角形类&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a
        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b
        self<span class="token punctuation">.</span>c <span class="token operator">=</span> c

    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">is_valid</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;判断三条边长能否构成三角形(静态方法)&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">&gt;</span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">&gt;</span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">&gt;</span> b

    <span class="token comment"># @classmethod</span>
    <span class="token comment"># def is_valid(cls, a, b, c):</span>
    <span class="token comment">#     &quot;&quot;&quot;判断三条边长能否构成三角形(类方法)&quot;&quot;&quot;</span>
    <span class="token comment">#     return a + b &gt; c and b + c &gt; a and a + c &gt; b</span>

    <span class="token keyword">def</span> <span class="token function">perimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;计算周长&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token operator">+</span> self<span class="token punctuation">.</span>c

    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;计算面积&quot;&quot;&quot;</span>
        p <span class="token operator">=</span> self<span class="token punctuation">.</span>perimeter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> self<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> self<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> self<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码使用<code>staticmethod</code>装饰器声明了<code>is_valid</code>方法是<code>Triangle</code>类的静态方法，如果要声明类方法，可以使用<code>classmethod</code>装饰器。可以直接使用<code>类名.方法名</code>的方式来调用静态方法和类方法，二者的区别在于，类方法的第一个参数是类对象本身，而静态方法则没有这个参数。简单的总结一下，<strong>对象方法、类方法、静态方法都可以通过<code>类名.方法名</code>的方式来调用，区别在于方法的第一个参数到底是普通对象还是类对象，还是没有接受消息的对象</strong>。静态方法通常也可以直接写成一个独立的函数，因为它并没有跟特定的对象绑定。</p><h3 id="继承和多态" tabindex="-1"><a class="header-anchor" href="#继承和多态" aria-hidden="true">#</a> 继承和多态</h3><p>面向对象的编程语言支持在已有类的基础上创建新类，从而减少重复代码的编写。提供继承信息的类叫做父类（超类、基类），得到继承信息的类叫做子类（派生类、衍生类）。例如，我们定义一个学生类和一个老师类，我们会发现他们有大量的重复代码，而这些重复代码都是老师和学生作为人的公共属性和行为，所以在这种情况下，我们应该先定义人类，再通过继承，从人类派生出老师类和学生类，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;人类&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
    
    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">正在吃饭.&#39;</span></span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">正在睡觉.&#39;</span></span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;学生类&quot;&quot;&quot;</span>
    
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># super(Student, self).__init__(name, age)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">study</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> course_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">正在学习</span><span class="token interpolation"><span class="token punctuation">{</span>course_name<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;老师类&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># super(Teacher, self).__init__(name, age)</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>title <span class="token operator">=</span> title
    
    <span class="token keyword">def</span> <span class="token function">teach</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> course_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span><span class="token string">正在讲授</span><span class="token interpolation"><span class="token punctuation">{</span>course_name<span class="token punctuation">}</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span>



stu1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;白元芳&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
stu2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;狄仁杰&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>
teacher <span class="token operator">=</span> Teacher<span class="token punctuation">(</span><span class="token string">&#39;武则天&#39;</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token string">&#39;副教授&#39;</span><span class="token punctuation">)</span>
stu1<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>
stu2<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>
teacher<span class="token punctuation">.</span>teach<span class="token punctuation">(</span><span class="token string">&#39;Python程序设计&#39;</span><span class="token punctuation">)</span>
stu1<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token string">&#39;Python程序设计&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承的语法是在定义类的时候，在类名后的圆括号中指定当前类的父类。如果定义一个类的时候没有指定它的父类是谁，那么默认的父类是<code>object</code>类。<code>object</code>类是Python中的顶级类，这也就意味着所有的类都是它的子类，要么直接继承它，要么间接继承它。Python语言允许多重继承，也就是说一个类可以有一个或多个父类，关于多重继承的问题我们在后面会有更为详细的讨论。在子类的初始化方法中，我们可以通过<code>super().__init__()</code>来调用父类初始化方法，<code>super</code>函数是Python内置函数中专门为获取当前对象的父类对象而设计的。从上面的代码可以看出，子类除了可以通过继承得到父类提供的属性和方法外，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力。在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，也叫做“里氏替换原则”（Liskov Substitution Principle）。</p><p>子类继承父类的方法后，还可以对方法进行重写（重新实现该方法），不同的子类可以对父类的同一个方法给出不同的实现版本，这样的方法在程序运行时就会表现出多态行为（调用相同的方法，做了不同的事情）。多态是面向对象编程中最精髓的部分，当然也是对初学者来说最难以理解和灵活运用的部分，我们会在下一节课中用专门的例子来讲解多态这个知识点。</p><h3 id="简单的总结-13" tabindex="-1"><a class="header-anchor" href="#简单的总结-13" aria-hidden="true">#</a> 简单的总结</h3><p>Python是动态语言，Python中的对象可以动态的添加属性。在面向对象的世界中，<strong>一切皆为对象</strong>，我们定义的类也是对象，所以<strong>类也可以接收消息</strong>，对应的方法是类方法或静态方法。通过继承，我们<strong>可以从已有的类创建新类</strong>，实现对已有类代码的复用。</p><h2 id="第19课-面向对象编程应用" tabindex="-1"><a class="header-anchor" href="#第19课-面向对象编程应用" aria-hidden="true">#</a> 第19课：面向对象编程应用</h2><p>面向对象编程对初学者来说不难理解但很难应用，虽然我们为大家总结过面向对象的三步走方法（定义类、创建对象、给对象发消息），但是说起来容易做起来难。<strong>大量的编程练习</strong>和<strong>阅读优质的代码</strong>可能是这个阶段最能够帮助到大家的两件事情。接下来我们还是通过经典的案例来剖析面向对象编程的知识，同时也通过这些案例为大家讲解如何运用之前学过的Python知识。</p><h3 id="经典案例-1" tabindex="-1"><a class="header-anchor" href="#经典案例-1" aria-hidden="true">#</a> 经典案例</h3><h4 id="案例1-扑克游戏。" tabindex="-1"><a class="header-anchor" href="#案例1-扑克游戏。" aria-hidden="true">#</a> 案例1：扑克游戏。</h4><blockquote><p><strong>说明</strong>：简单起见，我们的扑克只有52张牌（没有大小王），游戏需要将52张牌发到4个玩家的手上，每个玩家手上有13张牌，按照黑桃、红心、草花、方块的顺序和点数从小到大排列，暂时不实现其他的功能。</p></blockquote><p>使用面向对象编程方法，首先需要从问题的需求中找到对象并抽象出对应的类，此外还要找到对象的属性和行为。当然，这件事情并不是特别困难，我们可以从需求的描述中找出名词和动词，名词通常就是对象或者是对象的属性，而动词通常是对象的行为。扑克游戏中至少应该有三类对象，分别是牌、扑克和玩家，牌、扑克、玩家三个类也并不是孤立的。类和类之间的关系可以粗略的分为<strong>is-a关系（继承）</strong>、<strong>has-a关系（关联）<strong>和</strong>use-a关系（依赖）</strong>。很显然扑克和牌是has-a关系，因为一副扑克有（has-a）52张牌；玩家和牌之间不仅有关联关系还有依赖关系，因为玩家手上有（has-a）牌而且玩家使用了（use-a）牌。</p><p>牌的属性显而易见，有花色和点数。我们可以用0到3的四个数字来代表四种不同的花色，但是这样的代码可读性会非常糟糕，因为我们并不知道黑桃、红心、草花、方块跟0到3的数字的对应关系。如果一个变量的取值只有有限多个选项，我们可以使用枚举。与C、Java等语言不同的是，Python中没有声明枚举类型的关键字，但是可以通过继承<code>enum</code>模块的<code>Enum</code>类来创建枚举类型，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum


<span class="token keyword">class</span> <span class="token class-name">Suite</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;花色(枚举)&quot;&quot;&quot;</span>
    SPADE<span class="token punctuation">,</span> HEART<span class="token punctuation">,</span> CLUB<span class="token punctuation">,</span> DIAMOND <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的代码可以看出，定义枚举类型其实就是定义符号常量，如<code>SPADE</code>、<code>HEART</code>等。每个符号常量都有与之对应的值，这样表示黑桃就可以不用数字<code>0</code>，而是用<code>Suite.SPADE</code>；同理，表示方块可以不用数字<code>3</code>， 而是用<code>Suite.DIAMOND</code>。注意，使用符号常量肯定是优于使用字面常量的，因为能够读懂英文就能理解符号常量的含义，代码的可读性会提升很多。Python中的枚举类型是可迭代类型，简单的说就是可以将枚举类型放到<code>for-in</code>循环中，依次取出每一个符号常量及其对应的值，如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> suite <span class="token keyword">in</span> Suite<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>suite<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>suite<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们可以定义牌类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Card</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;牌&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> suite<span class="token punctuation">,</span> face<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>suite <span class="token operator">=</span> suite
        self<span class="token punctuation">.</span>face <span class="token operator">=</span> face

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        suites <span class="token operator">=</span> <span class="token string">&#39;♠♥♣♦&#39;</span>
        faces <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;J&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;K&#39;</span><span class="token punctuation">]</span>
        <span class="token comment"># 根据牌的花色和点数取到对应的字符</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>suites<span class="token punctuation">[</span>self<span class="token punctuation">.</span>suite<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>faces<span class="token punctuation">[</span>self<span class="token punctuation">.</span>face<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过下面的代码来测试下<code>Card</code>类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>card1 <span class="token operator">=</span> Card<span class="token punctuation">(</span>Suite<span class="token punctuation">.</span>SPADE<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
card2 <span class="token operator">=</span> Card<span class="token punctuation">(</span>Suite<span class="token punctuation">.</span>HEART<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>card1<span class="token punctuation">,</span> card2<span class="token punctuation">)</span>    <span class="token comment"># ♠5 ♥K</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们定义扑克类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random


<span class="token keyword">class</span> <span class="token class-name">Poker</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;扑克&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 通过列表的生成式语法创建一个装52张牌的列表</span>
        self<span class="token punctuation">.</span>cards <span class="token operator">=</span> <span class="token punctuation">[</span>Card<span class="token punctuation">(</span>suite<span class="token punctuation">,</span> face<span class="token punctuation">)</span> <span class="token keyword">for</span> suite <span class="token keyword">in</span> Suite
                      <span class="token keyword">for</span> face <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token comment"># current属性表示发牌的位置</span>
        self<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">def</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;洗牌&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment"># 通过random模块的shuffle函数实现列表的随机乱序</span>
        random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cards<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">deal</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;发牌&quot;&quot;&quot;</span>
        card <span class="token operator">=</span> self<span class="token punctuation">.</span>cards<span class="token punctuation">[</span>self<span class="token punctuation">.</span>current<span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>current <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> card

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">has_next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;还有没有牌可以发&quot;&quot;&quot;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>current <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>cards<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过下面的代码来测试下<code>Poker</code>类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>poker <span class="token operator">=</span> Poker<span class="token punctuation">(</span><span class="token punctuation">)</span>
poker<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>poker<span class="token punctuation">.</span>cards<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义玩家类。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Player</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;玩家&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>cards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">get_one</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> card<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;摸牌&quot;&quot;&quot;</span>
        self<span class="token punctuation">.</span>cards<span class="token punctuation">.</span>append<span class="token punctuation">(</span>card<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">arrange</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>cards<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建四个玩家并将牌发到玩家的手上。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>poker <span class="token operator">=</span> Poker<span class="token punctuation">(</span><span class="token punctuation">)</span>
poker<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span><span class="token punctuation">)</span>
players <span class="token operator">=</span> <span class="token punctuation">[</span>Player<span class="token punctuation">(</span><span class="token string">&#39;东邪&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Player<span class="token punctuation">(</span><span class="token string">&#39;西毒&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Player<span class="token punctuation">(</span><span class="token string">&#39;南帝&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Player<span class="token punctuation">(</span><span class="token string">&#39;北丐&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> player <span class="token keyword">in</span> players<span class="token punctuation">:</span>
        player<span class="token punctuation">.</span>get_one<span class="token punctuation">(</span>poker<span class="token punctuation">.</span>deal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> player <span class="token keyword">in</span> players<span class="token punctuation">:</span>
    player<span class="token punctuation">.</span>arrange<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>player<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">: &#39;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>cards<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的代码会在<code>player.arrange()</code>那里出现异常，因为<code>Player</code>的<code>arrange</code>方法使用了列表的<code>sort</code>对玩家手上的牌进行排序，排序需要比较两个<code>Card</code>对象的大小，而<code>&lt;</code>运算符又不能直接作用于<code>Card</code>类型，所以就出现了<code>TypeError</code>异常，异常消息为：<code>&#39;&lt;&#39; not supported between instances of &#39;Card&#39; and &#39;Card&#39;</code>。</p><p>为了解决这个问题，我们可以对<code>Card</code>类的代码稍作修改，使得两个<code>Card</code>对象可以直接用<code>&lt;</code>进行大小的比较。这里用到技术叫<strong>运算符重载</strong>，Python中要实现对<code>&lt;</code>运算符的重载，需要在类中添加一个名为<code>__lt__</code>的魔术方法。很显然，魔术方法<code>__lt__</code>中的<code>lt</code>是英文单词“less than”的缩写，以此类推，魔术方法<code>__gt__</code>对应<code>&gt;</code>运算符，魔术方法<code>__le__</code>对应<code>&lt;=</code>运算符，<code>__ge__</code>对应<code>&gt;=</code>运算符，<code>__eq__</code>对应<code>==</code>运算符，<code>__ne__</code>对应<code>!=</code>运算符。</p><p>修改后的<code>Card</code>类代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Card</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;牌&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> suite<span class="token punctuation">,</span> face<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>suite <span class="token operator">=</span> suite
        self<span class="token punctuation">.</span>face <span class="token operator">=</span> face

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        suites <span class="token operator">=</span> <span class="token string">&#39;♠♥♣♦&#39;</span>
        faces <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;7&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;8&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;J&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Q&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;K&#39;</span><span class="token punctuation">]</span>
        <span class="token comment"># 根据牌的花色和点数取到对应的字符</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>suites<span class="token punctuation">[</span>self<span class="token punctuation">.</span>suite<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>faces<span class="token punctuation">[</span>self<span class="token punctuation">.</span>face<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
    
    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 花色相同比较点数的大小</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>suite <span class="token operator">==</span> other<span class="token punctuation">.</span>suite<span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>face <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>face
        <span class="token comment"># 花色不同比较花色对应的值</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>suite<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>suite<span class="token punctuation">.</span>value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明：</strong> 大家可以尝试在上面代码的基础上写一个简单的扑克游戏，如21点游戏（Black Jack），游戏的规则可以自己在网上找一找。</p></blockquote><h4 id="案例2-工资结算系统。" tabindex="-1"><a class="header-anchor" href="#案例2-工资结算系统。" aria-hidden="true">#</a> 案例2：工资结算系统。</h4><blockquote><p><strong>要求</strong>：某公司有三种类型的员工，分别是部门经理、程序员和销售员。需要设计一个工资结算系统，根据提供的员工信息来计算员工的月薪。其中，部门经理的月薪是固定15000元；程序员按工作时间（以小时为单位）支付月薪，每小时200元；销售员的月薪由1800元底薪加上销售额5%的提成两部分构成。</p></blockquote><p>通过对上述需求的分析，可以看出部门经理、程序员、销售员都是员工，有相同的属性和行为，那么我们可以先设计一个名为<code>Employee</code>的父类，再通过继承的方式从这个父类派生出部门经理、程序员和销售员三个子类。很显然，后续的代码不会创建<code>Employee</code> 类的对象，因为我们需要的是具体的员工对象，所以这个类可以设计成专门用于继承的抽象类。Python中没有定义抽象类的关键字，但是可以通过<code>abc</code>模块中名为<code>ABCMeta</code> 的元类来定义抽象类。关于元类的知识，后面的课程中会有专门的讲解，这里不用太纠结这个概念，记住用法即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod


<span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;员工&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">get_salary</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;结算月薪&quot;&quot;&quot;</span>
        <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的员工类中，有一个名为<code>get_salary</code>的方法用于结算月薪，但是由于还没有确定是哪一类员工，所以结算月薪虽然是员工的公共行为但这里却没有办法实现。对于暂时无法实现的方法，我们可以使用<code>abstractmethod</code>装饰器将其声明为抽象方法，所谓<strong>抽象方法就是只有声明没有实现的方法</strong>，<strong>声明这个方法是为了让子类去重写这个方法</strong>。接下来的代码展示了如何从员工类派生出部门经理、程序员、销售员这三个子类以及子类如何重写父类的抽象方法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span>Employee<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;部门经理&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">get_salary</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">15000.0</span>


<span class="token keyword">class</span> <span class="token class-name">Programmer</span><span class="token punctuation">(</span>Employee<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;程序员&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> working_hour<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>working_hour <span class="token operator">=</span> working_hour

    <span class="token keyword">def</span> <span class="token function">get_salary</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">200</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>working_hour


<span class="token keyword">class</span> <span class="token class-name">Salesman</span><span class="token punctuation">(</span>Employee<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;销售员&quot;&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sales<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sales <span class="token operator">=</span> sales

    <span class="token keyword">def</span> <span class="token function">get_salary</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1800</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>sales <span class="token operator">*</span> <span class="token number">0.05</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的<code>Manager</code>、<code>Programmer</code>、<code>Salesman</code>三个类都继承自<code>Employee</code>，三个类都分别重写了<code>get_salary</code>方法。<strong>重写就是子类对父类已有的方法重新做出实现</strong>。相信大家已经注意到了，三个子类中的<code>get_salary</code>各不相同，所以这个方法在程序运行时会产生<strong>多态行为</strong>，多态简单的说就是<strong>调用相同的方法</strong>，<strong>不同的子类对象做不同的事情</strong>。</p><p>我们通过下面的代码来完成这个工资结算系统，由于程序员和销售员需要分别录入本月的工作时间和销售额，所以在下面的代码中我们使用了Python内置的<code>isinstance</code>函数来判断员工对象的类型。我们之前讲过的<code>type</code>函数也能识别对象的类型，但是<code>isinstance</code>函数更加强大，因为它可以判断出一个对象是不是某个继承结构下的子类型，你可以简答的理解为<code>type</code>函数是对对象类型的精准匹配，而<code>isinstance</code>函数是对对象类型的模糊匹配。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>emps <span class="token operator">=</span> <span class="token punctuation">[</span>
    Manager<span class="token punctuation">(</span><span class="token string">&#39;刘备&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Programmer<span class="token punctuation">(</span><span class="token string">&#39;诸葛亮&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Manager<span class="token punctuation">(</span><span class="token string">&#39;曹操&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    Programmer<span class="token punctuation">(</span><span class="token string">&#39;荀彧&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Salesman<span class="token punctuation">(</span><span class="token string">&#39;吕布&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Programmer<span class="token punctuation">(</span><span class="token string">&#39;张辽&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token keyword">for</span> emp <span class="token keyword">in</span> emps<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>emp<span class="token punctuation">,</span> Programmer<span class="token punctuation">)</span><span class="token punctuation">:</span>
        emp<span class="token punctuation">.</span>working_hour <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;请输入</span><span class="token interpolation"><span class="token punctuation">{</span>emp<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">本月工作时间: &#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>emp<span class="token punctuation">,</span> Salesman<span class="token punctuation">)</span><span class="token punctuation">:</span>
        emp<span class="token punctuation">.</span>sales <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;请输入</span><span class="token interpolation"><span class="token punctuation">{</span>emp<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">本月销售额: &#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>emp<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">本月工资为: ￥</span><span class="token interpolation"><span class="token punctuation">{</span>emp<span class="token punctuation">.</span>get_salary<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">元&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-14" tabindex="-1"><a class="header-anchor" href="#简单的总结-14" aria-hidden="true">#</a> 简单的总结</h3><p>面向对象的编程思想非常的好，也符合人类的正常思维习惯，但是要想灵活运用面向对象编程中的抽象、封装、继承、多态需要长时间的积累和沉淀，这件事情无法一蹴而就，属于“路漫漫其修远兮，吾将上下而求索”的东西。</p><h2 id="第20课-python标准库初探" tabindex="-1"><a class="header-anchor" href="#第20课-python标准库初探" aria-hidden="true">#</a> 第20课：Python标准库初探</h2><p>Python语言最可爱的地方在于它的标准库和三方库实在是太丰富了，日常开发工作中的很多任务都可以通过这些标准库或者三方库直接解决。下面我们先介绍Python标准库中的一些常用模块，后面的课程中再陆陆续续为大家介绍Python常用三方库的用途和用法。</p><h3 id="base64-base64编解码模块" tabindex="-1"><a class="header-anchor" href="#base64-base64编解码模块" aria-hidden="true">#</a> base64 - Base64编解码模块</h3>`,262),zn=n("p",null,[n("strong",null,"Base64"),s("是一种基于64个可打印字符来表示二进制数据的方法。由于"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"l"),n("mi",null,"o"),n("msub",null,[n("mi",null,"g"),n("mn",null,"2")]),n("mn",null,"64"),n("mo",null,"="),n("mn",null,"6")]),n("annotation",{encoding:"application/x-tex"},"log _{2}64=6")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},"64"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"6")])])]),s("，所以Base64以6个比特（二进制位，可以表示0或1）为一个单元，每个单元对应一个可打印字符。对于3字节（24比特）的二进制数据，我们可以将其处理成对应于4个Base64单元，即3个字节可由4个可打印字符来表示。Base64编码可用来作为电子邮件的传输编码，也可以用于其他需要将二进制数据转成文本字符的场景，这使得在XML、JSON、YAML这些文本数据格式中传输二进制内容成为可能。在Base64中的可打印字符包括"),n("code",null,"A-Z"),s("、"),n("code",null,"a-z"),s("、"),n("code",null,"0-9"),s("，这里一共是62个字符，另外两个可打印符号通常是"),n("code",null,"+"),s("和"),n("code",null,"/"),s("，"),n("code",null,"="),s("用于在Base64编码最后进行补位。")],-1),An={href:"http://www.ruanyifeng.com/blog/2008/06/base64.html",target:"_blank",rel:"noopener noreferrer"},Nn=n("code",null,"base64",-1),Fn=n("code",null,"b64encode",-1),In=n("code",null,"b64decode",-1),On=n("strong",null,"Python的交互式环境",-1),Mn=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> base64
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> content <span class="token operator">=</span> <span class="token string">&#39;Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>content<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string">b&#39;TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> content <span class="token operator">=</span> <span class="token string">b&#39;TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&#39;Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collections-容器数据类型模块" tabindex="-1"><a class="header-anchor" href="#collections-容器数据类型模块" aria-hidden="true">#</a> collections - 容器数据类型模块</h3><p><code>collections</code>模块提供了诸多非常好用的数据结构，主要包括：</p>`,3),Jn=n("ul",null,[n("li",null,[n("code",null,"namedtuple"),s("：命令元组，它是一个类工厂，接受类型的名称和属性列表来创建一个类。")]),n("li",null,[n("code",null,"deque"),s("：双端队列，是列表的替代实现。Python中的列表底层是基于数组来实现的，而"),n("code",null,"deque"),s("底层是双向链表，因此当你需要在头尾添加和删除元素是，"),n("code",null,"deque"),s("会表现出更好的性能，渐近时间复杂度为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),s("。")]),n("li",null,[n("code",null,"Counter"),s("："),n("code",null,"dict"),s("的子类，键是元素，值是元素的计数，它的"),n("code",null,"most_common()"),s("方法可以帮助我们获取出现频率最高的元素。"),n("code",null,"Counter"),s("和"),n("code",null,"dict"),s("的继承关系我认为是值得商榷的，按照CARP原则，"),n("code",null,"Counter"),s("跟"),n("code",null,"dict"),s("的关系应该设计为关联关系更为合理。")]),n("li",null,[n("code",null,"OrderedDict"),s("："),n("code",null,"dict"),s("的子类，它记录了键值对插入的顺序，看起来既有字典的行为，也有链表的行为。")]),n("li",null,[n("code",null,"defaultdict"),s("：类似于字典类型，但是可以通过默认的工厂函数来获得键对应的默认值，相比字典中的"),n("code",null,"setdefault()"),s("方法，这种做法更加高效。")])],-1),Gn=e(`<p>下面是在<strong>Python交互式环境中</strong>使用<code>namedtuple</code>创建扑克牌类的例子。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Card <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">&#39;Card&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;suite&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;face&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> card1 <span class="token operator">=</span> Card<span class="token punctuation">(</span><span class="token string">&#39;红桃&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> card2 <span class="token operator">=</span> Card<span class="token punctuation">(</span><span class="token string">&#39;草花&#39;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> card1
Card<span class="token punctuation">(</span>suite<span class="token operator">=</span><span class="token string">&#39;红桃&#39;</span><span class="token punctuation">,</span> face<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> card2
Card<span class="token punctuation">(</span>suite<span class="token operator">=</span><span class="token string">&#39;草花&#39;</span><span class="token punctuation">,</span> face<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>card1<span class="token punctuation">.</span>suite<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>card1<span class="token punctuation">.</span>face<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
红桃<span class="token number">5</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>card2<span class="token punctuation">.</span>suite<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>card2<span class="token punctuation">.</span>face<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
草花<span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是使用<code>Counter</code>类统计列表中出现次数最多的三个元素的例子。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter

words <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;look&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;into&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eyes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;look&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;into&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eyes&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;the&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eyes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;the&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eyes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;the&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eyes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;not&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;around&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;the&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eyes&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;don&#39;t&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;look&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;around&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;the&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eyes&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;look&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;into&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eyes&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;you&#39;re&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;under&#39;</span>
<span class="token punctuation">]</span>
counter <span class="token operator">=</span> Counter<span class="token punctuation">(</span>words<span class="token punctuation">)</span>
<span class="token comment"># 打印words列表中出现频率最高的3个元素及其出现次数</span>
<span class="token keyword">for</span> elem<span class="token punctuation">,</span> count <span class="token keyword">in</span> counter<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashlib-哈希函数模块" tabindex="-1"><a class="header-anchor" href="#hashlib-哈希函数模块" aria-hidden="true">#</a> hashlib - 哈希函数模块</h3>`,5),Ln={href:"https://zh.wikipedia.org/wiki/MD5",target:"_blank",rel:"noopener noreferrer"},Dn=n("a",{href:"%5Bhttps://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F%5D(https://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F)"},"SHA家族",-1),Rn=e(`<blockquote><p><strong>说明</strong>：在2011年的时候，RFC 6151中已经禁止将MD5用作密钥散列消息认证码，这个问题不在我们讨论的范围内。</p></blockquote><p>Python标准库的<code>hashlib</code>模块提供了对哈希函数的封装，通过使用<code>md5</code>、<code>sha1</code>、<code>sha256</code>等类，我们可以轻松的生成“数字指纹”。举一个简单的例子，用户注册时我们希望在数据库中保存用户的密码，很显然我们不能将用户密码直接保存在数据库中，这样可能会导致用户隐私的泄露，所以在数据库中保存用户密码时，通常都会将密码的“指纹”保存起来，用户登录时通过哈希函数计算密码的“指纹”再进行匹配来判断用户登录是否成功。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> hashlib

<span class="token comment"># 计算字符串&quot;123456&quot;的MD5摘要</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 计算文件&quot;python-3.7.1.tar.xz&quot;的MD5摘要</span>
hasher <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;python-3.7.1.tar.xz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> data<span class="token punctuation">:</span>
        hasher<span class="token punctuation">.</span>update<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hasher<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：很多网站在下载链接的旁边都提供了哈希摘要，完成文件下载后，我们可以计算该文件的哈希摘要并检查它与网站上提供的哈希摘要是否一致（指纹比对）。如果计算出的哈希摘要与网站提供的并不一致，很有可能是下载出错或该文件在传输过程中已经被篡改，这时候就不应该直接使用这个文件。</p></blockquote><h3 id="heapq-堆排序模块" tabindex="-1"><a class="header-anchor" href="#heapq-堆排序模块" aria-hidden="true">#</a> heapq - 堆排序模块</h3><p><code>heapq</code>模块实现了堆排序算法，如果希望使用堆排序，尤其是要解决<strong>TopK问题</strong>（从序列中找到K个最大或最小元素），直接使用该模块即可，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> heapq

list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">]</span>
<span class="token comment"># 找出列表中最大的三个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>heapq<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 找出列表中最小的三个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>heapq<span class="token punctuation">.</span>nsmallest<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token punctuation">)</span>

list2 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;IBM&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shares&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">:</span> <span class="token number">91.1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;AAPL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shares&#39;</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">:</span> <span class="token number">543.22</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;FB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shares&#39;</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">:</span> <span class="token number">21.09</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;HPQ&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shares&#39;</span><span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">:</span> <span class="token number">31.75</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;YHOO&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shares&#39;</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">:</span> <span class="token number">16.35</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ACME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shares&#39;</span><span class="token punctuation">:</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token string">&#39;price&#39;</span><span class="token punctuation">:</span> <span class="token number">115.65</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token comment"># 找出价格最高的三只股票</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>heapq<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> list2<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 找出持有数量最高的三只股票</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>heapq<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> list2<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">&#39;shares&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="itertools-迭代工具模块" tabindex="-1"><a class="header-anchor" href="#itertools-迭代工具模块" aria-hidden="true">#</a> itertools - 迭代工具模块</h3><p><code>itertools</code>可以帮助我们生成各种各样的迭代器，大家可以看看下面的例子。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> itertools

<span class="token comment"># 产生ABCD的全排列</span>
<span class="token keyword">for</span> value <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span><span class="token string">&#39;ABCD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

<span class="token comment"># 产生ABCDE的五选三组合</span>
<span class="token keyword">for</span> value <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>combinations<span class="token punctuation">(</span><span class="token string">&#39;ABCDE&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

<span class="token comment"># 产生ABCD和123的笛卡尔积</span>
<span class="token keyword">for</span> value <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token string">&#39;ABCD&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

<span class="token comment"># 产生ABC的无限循环序列</span>
it <span class="token operator">=</span> itertools<span class="token punctuation">.</span>cycle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="random-随机数和随机抽样模块" tabindex="-1"><a class="header-anchor" href="#random-随机数和随机抽样模块" aria-hidden="true">#</a> random - 随机数和随机抽样模块</h3><p>这个模块我们之前已经用过很多次了，生成随机数、实现随机乱序和随机抽样，下面是常用函数的列表。</p><ul><li><code>getrandbits(k)</code>：返回具有<code>k</code>个随机比特位的整数。</li><li><code>randrange(start, stop[, step])</code>：从<code>range(start, stop, step)</code> 返回一个随机选择的元素，但实际上并没有构建一个<code>range</code>对象。</li><li><code>randint(a, b)</code>：返回随机整数<code>N</code>满足<code>a &lt;= N &lt;= b</code>，相当于<code>randrange(a, b+1)</code>。</li><li><code>choice(seq)</code>：从非空序列<code>seq</code>返回一个随机元素。 如果<code>seq</code>为空，则引发<code>IndexError</code>。</li><li><code>choices(population, weight=None, *, cum_weights=None, k=1)</code>：从<code>population</code>中选择替换，返回大小为<code>k</code>的元素列表。 如果<code>population</code>为空，则引发<code>IndexError</code>。</li><li><code>shuffle(x[, random])</code>：将序列<code>x</code>随机打乱位置。</li><li><code>sample(population, k)</code>：返回从总体序列或集合中选择<code>k</code>个不重复元素构造的列表，用于无重复的随机抽样。</li><li><code>random()</code>：返回<code>[0.0, 1.0)</code>范围内的下一个随机浮点数。</li><li><code>expovariate(lambd)</code>：指数分布。</li><li><code>gammavariate(alpha, beta)</code>：伽玛分布。</li><li><code>gauss(mu, sigma)</code> / <code>normalvariate(mu, sigma)</code>：正态分布。</li><li><code>paretovariate(alpha)</code>：帕累托分布。</li><li><code>weibullvariate(alpha, beta)</code>：威布尔分布。</li></ul><h3 id="os-path-路径操作相关模块" tabindex="-1"><a class="header-anchor" href="#os-path-路径操作相关模块" aria-hidden="true">#</a> os.path - 路径操作相关模块</h3><p><code>os.path</code>模块封装了操作路径的工具函数，如果程序中需要对文件路径做拼接、拆分、获取以及获取文件的存在性和其他属性，这个模块将会非常有帮助，下面为大家罗列一些常用的函数。</p><ul><li><code>dirname(path)</code>：返回路径<code>path</code>的目录名称。</li><li><code>exists(path)</code>：如果<code>path</code>指向一个已存在的路径或已打开的文件描述符，返回 <code>True</code>。</li><li><code>getatime(path)</code> / <code>getmtime(path)</code> / <code>getctime(path)</code>：返回<code>path</code>的最后访问时间/最后修改时间/创建时间。</li><li><code>getsize(path)</code>：返回<code>path</code>的大小，以字节为单位。如果该文件不存在或不可访问，则抛出<code>OSError</code>异常。</li><li><code>isfile(path)</code>：如果<code>path</code>是普通文件，则返回 <code>True</code>。</li><li><code>isdir(path)</code>：如果<code>path</code>是目录（文件夹），则返回<code>True</code>。</li><li><code>join(path, *paths)</code>：合理地拼接一个或多个路径部分。返回值是<code>path</code>和<code>paths</code>所有值的连接，每个非空部分后面都紧跟一个目录分隔符 (<code>os.sep</code>)，除了最后一部分。这意味着如果最后一部分为空，则结果将以分隔符结尾。如果参数中某个部分是绝对路径，则绝对路径前的路径都将被丢弃，并从绝对路径部分开始连接。</li><li><code>splitext(path)</code>：将路径<code>path</code>拆分为一对，即<code>(root, ext)</code>，使得<code>root + ext == path</code>，其中<code>ext</code>为空或以英文句点开头，且最多包含一个句点。</li></ul><h3 id="uuid-uuid生成模块" tabindex="-1"><a class="header-anchor" href="#uuid-uuid生成模块" aria-hidden="true">#</a> uuid - UUID生成模块</h3><p><code>uuid</code>模块可以帮助我们生成全局唯一标识符（Universal Unique IDentity）。该模块提供了四个用于生成UUID的函数，分别是：</p><ul><li><code>uuid1()</code>：由MAC地址、当前时间戳、随机数生成，可以保证全球范围内的唯一性。</li><li><code>uuid3(namespace, name)</code>：通过计算命名空间和名字的MD5哈希摘要（“指纹”）值得到，保证了同一命名空间中不同名字的唯一性，和不同命名空间的唯一性，但同一命名空间的同一名字会生成相同的UUID。</li><li><code>uuid4()</code>：由伪随机数生成UUID，有一定的重复概率，该概率可以计算出来。</li><li><code>uuid5()</code>：算法与<code>uuid3</code>相同，只不过哈希函数用SHA-1取代了MD5。</li></ul><p>由于<code>uuid4</code>存在概率型重复，那么在真正需要全局唯一标识符的地方最好不用使用它。在分布式环境下，<code>uuid1</code>是很好的选择，因为它能够保证生成ID的全局唯一性。下面是在<strong>Python交互式环境中</strong>使用<code>uuid1</code>函数生成全局唯一标识符的例子。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> uuid
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span>
<span class="token string">&#39;622a8334baab11eaaa9c60f81da8d840&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span>
<span class="token string">&#39;62b066debaab11eaaa9c60f81da8d840&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span>
<span class="token string">&#39;642c0db0baab11eaaa9c60f81da8d840&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-15" tabindex="-1"><a class="header-anchor" href="#简单的总结-15" aria-hidden="true">#</a> 简单的总结</h3><p>Python标准库中有大量的模块，日常开发中有很多常见的任务在Python标准库中都有封装好的函数或类可供使用，这也是Python这门语言最可爱的地方。</p><h2 id="第21课-文件读写和异常处理" tabindex="-1"><a class="header-anchor" href="#第21课-文件读写和异常处理" aria-hidden="true">#</a> 第21课：文件读写和异常处理</h2><p>实际开发中常常会遇到对数据进行持久化的场景，所谓持久化是指将数据从无法长久保存数据的存储介质（通常是内存）转移到可以长久保存数据的存储介质（通常是硬盘）中。实现数据持久化最直接简单的方式就是通过<strong>文件系统</strong>将数据保存到<strong>文件</strong>中。</p><p>计算机的<strong>文件系统</strong>是一种存储和组织计算机数据的方法，它使得对数据的访问和查找变得容易，文件系统使用<strong>文件</strong>和<strong>树形目录</strong>的抽象逻辑概念代替了硬盘、光盘、闪存等物理设备的数据块概念，用户使用文件系统来保存数据时，不必关心数据实际保存在硬盘的哪个数据块上，只需要记住这个文件的路径和文件名。在写入新数据之前，用户不必关心硬盘上的哪个数据块没有被使用，硬盘上的存储空间管理（分配和释放）功能由文件系统自动完成，用户只需要记住数据被写入到了哪个文件中。</p><h3 id="打开和关闭文件" tabindex="-1"><a class="header-anchor" href="#打开和关闭文件" aria-hidden="true">#</a> 打开和关闭文件</h3><p>有了文件系统，我们可以非常方便的通过文件来读写数据；在Python中要实现文件操作是非常简单的。我们可以使用Python内置的<code>open</code>函数来打开文件，在使用<code>open</code>函数时，我们可以通过函数的参数指定<strong>文件名</strong>、<strong>操作模式</strong>和<strong>字符编码</strong>等信息，接下来就可以对文件进行读写操作了。这里所说的操作模式是指要打开什么样的文件（字符文件或二进制文件）以及做什么样的操作（读、写或追加），具体如下表所示。</p><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td><code>&#39;r&#39;</code></td><td>读取 （默认）</td></tr><tr><td><code>&#39;w&#39;</code></td><td>写入（会先截断之前的内容）</td></tr><tr><td><code>&#39;x&#39;</code></td><td>写入，如果文件已经存在会产生异常</td></tr><tr><td><code>&#39;a&#39;</code></td><td>追加，将内容写入到已有文件的末尾</td></tr><tr><td><code>&#39;b&#39;</code></td><td>二进制模式</td></tr><tr><td><code>&#39;t&#39;</code></td><td>文本模式（默认）</td></tr><tr><td><code>&#39;+&#39;</code></td><td>更新（既可以读又可以写）</td></tr></tbody></table><p>下图展示了如何根据程序的需要来设置<code>open</code>函数的操作模式。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250723794.png" alt="" loading="lazy"></p>`,31),Wn=n("code",null,"open",-1),Vn=n("code",null,"encoding",-1),Un={href:"https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html",target:"_blank",rel:"noopener noreferrer"},Hn=e(`<p>使用<code>open</code>函数打开文件成功后会返回一个文件对象，通过这个对象，我们就可以实现对文件的读写操作；如果打开文件失败，<code>open</code>函数会引发异常，稍后会对此加以说明。如果要关闭打开的文件，可以使用文件对象的<code>close</code>方法，这样可以在结束文件操作时释放掉这个文件。</p><h3 id="读写文本文件" tabindex="-1"><a class="header-anchor" href="#读写文本文件" aria-hidden="true">#</a> 读写文本文件</h3><p>用<code>open</code>函数打开文本文件时，需要指定文件名并将文件的操作模式设置为<code>&#39;r&#39;</code>，如果不指定，默认值也是<code>&#39;r&#39;</code>；如果需要指定字符编码，可以传入<code>encoding</code>参数，如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码。需要提醒大家，如果不能保证保存文件时使用的编码方式与<code>encoding</code>参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取文件失败。</p><p>下面的例子演示了如何读取一个纯文本文件（一般指只有字符原生编码构成的文件，与富文本相比，纯文本不包含字符样式的控制元素，能够被最简单的文本编辑器直接读取）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;致橡树.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),Kn=n("strong",null,"说明",-1),Zn={href:"http://www.china.org.cn/learning_english/2011-02/21/content_21967654.htm",target:"_blank",rel:"noopener noreferrer"},Yn=e(`<p>除了使用文件对象的<code>read</code>方法读取文件之外，还可以使用<code>for-in</code>循环逐行读取或者用<code>readlines</code>方法将文件按行读取到一个列表容器中，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;致橡树.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;致橡树.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
lines <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要向文件中写入内容，可以在打开文件时使用<code>w</code>或者<code>a</code>作为操作模式，前者会截断之前的文本内容写入新的内容，后者是在原来内容的尾部追加新的内容。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;致橡树.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;\\n标题：《致橡树》&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;\\n作者：舒婷&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;\\n时间：1977年3月&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常处理机制" tabindex="-1"><a class="header-anchor" href="#异常处理机制" aria-hidden="true">#</a> 异常处理机制</h3><p>请注意上面的代码，如果<code>open</code>函数指定的文件并不存在或者无法打开，那么将引发异常状况导致程序崩溃。为了让代码具有健壮性和容错性，我们可以<strong>使用Python的异常机制对可能在运行时发生状况的代码进行适当的处理</strong>。Python中和异常相关的关键字有五个，分别是<code>try</code>、<code>except</code>、<code>else</code>、<code>finally</code>和<code>raise</code>，我们先看看下面的代码，再来为大家介绍这些关键字的用法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;致橡树.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;无法打开指定的文件!&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> LookupError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;指定了未知的编码!&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;读取文件时解码错误!&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Python中，我们可以将运行时会出现状况的代码放在<code>try</code>代码块中，在<code>try</code>后面可以跟上一个或多个<code>except</code>块来捕获异常并进行相应的处理。例如，在上面的代码中，文件找不到会引发<code>FileNotFoundError</code>，指定了未知的编码会引发<code>LookupError</code>，而如果读取文件时无法按指定编码方式解码文件会引发<code>UnicodeDecodeError</code>，所以我们在<code>try</code>后面跟上了三个<code>except</code>分别处理这三种不同的异常状况。在<code>except</code>后面，我们还可以加上<code>else</code>代码块，这是<code>try</code> 中的代码没有出现异常时会执行的代码，而且<code>else</code>中的代码不会再进行异常捕获，也就是说如果遇到异常状况，程序会因异常而终止并报告异常信息。最后我们使用<code>finally</code>代码块来关闭打开的文件，释放掉程序中获取的外部资源。由于<code>finally</code>块的代码不论程序正常还是异常都会执行，甚至是调用了<code>sys</code>模块的<code>exit</code>函数终止Python程序，<code>finally</code>块中的代码仍然会被执行（因为<code>exit</code>函数的本质是引发了<code>SystemExit</code>异常），因此我们把<code>finally</code>代码块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。</p><p>Python中内置了大量的异常类型，除了上面代码中用到的异常类型以及之前的课程中遇到过的异常类型外，还有许多的异常类型，其继承结构如下所示。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StopAsyncIteration
      +-- ArithmeticError
      |    +-- FloatingPointError
      |    +-- OverflowError
      |    +-- ZeroDivisionError
      +-- AssertionError
      +-- AttributeError
      +-- BufferError
      +-- EOFError
      +-- ImportError
      |    +-- ModuleNotFoundError
      +-- LookupError
      |    +-- IndexError
      |    +-- KeyError
      +-- MemoryError
      +-- NameError
      |    +-- UnboundLocalError
      +-- OSError
      |    +-- BlockingIOError
      |    +-- ChildProcessError
      |    +-- ConnectionError
      |    |    +-- BrokenPipeError
      |    |    +-- ConnectionAbortedError
      |    |    +-- ConnectionRefusedError
      |    |    +-- ConnectionResetError
      |    +-- FileExistsError
      |    +-- FileNotFoundError
      |    +-- InterruptedError
      |    +-- IsADirectoryError
      |    +-- NotADirectoryError
      |    +-- PermissionError
      |    +-- ProcessLookupError
      |    +-- TimeoutError
      +-- ReferenceError
      +-- RuntimeError
      |    +-- NotImplementedError
      |    +-- RecursionError
      +-- SyntaxError
      |    +-- IndentationError
      |         +-- TabError
      +-- SystemError
      +-- TypeError
      +-- ValueError
      |    +-- UnicodeError
      |         +-- UnicodeDecodeError
      |         +-- UnicodeEncodeError
      |         +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
           +-- ImportWarning
           +-- UnicodeWarning
           +-- BytesWarning
           +-- ResourceWarning
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的继承结构可以看出，Python中所有的异常都是<code>BaseException</code>的子类型，它有四个直接的子类，分别是：<code>SystemExit</code>、<code>KeyboardInterrupt</code>、<code>GeneratorExit</code>和<code>Exception</code>。其中，<code>SystemExit</code>表示解释器请求退出，<code>KeyboardInterrupt</code>是用户中断程序执行（按下<code>Ctrl+c</code>），<code>GeneratorExit</code>表示生成器发生异常通知退出，不理解这些异常没有关系，继续学习就好了。值得一提的是<code>Exception</code>类，它是常规异常类型的父类型，很多的异常都是直接或间接的继承自<code>Exception</code>类。如果Python内置的异常类型不能满足应用程序的需要，我们可以自定义异常类型，而自定义的异常类型也应该直接或间接继承自<code>Exception</code>类，当然还可以根据需要重写或添加方法。</p><p>在Python中，可以使用<code>raise</code>关键字来引发异常（抛出异常对象），而调用者可以通过<code>try...except...</code>结构来捕获并处理异常。例如在函数中，当函数的执行条件不满足时，可以使用抛出异常的方式来告知调用者问题的所在，而调用者可以通过捕获处理异常来使得代码从异常中恢复，定义异常和抛出异常的代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">InputError</span><span class="token punctuation">(</span>ValueError<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;自定义异常类型&quot;&quot;&quot;</span>
    <span class="token keyword">pass</span>


<span class="token keyword">def</span> <span class="token function">fac</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;求阶乘&quot;&quot;&quot;</span>
    <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> InputError<span class="token punctuation">(</span><span class="token string">&#39;只能计算非负整数的阶乘&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> num <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> fac<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用求阶乘的函数<code>fac</code>，通过<code>try...except...</code>结构捕获输入错误的异常并打印异常对象（显示异常信息），如果输入正确就计算阶乘并结束程序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>flag <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token keyword">while</span> flag<span class="token punctuation">:</span>
    num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;n = &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>num<span class="token punctuation">}</span></span><span class="token string">! = </span><span class="token interpolation"><span class="token punctuation">{</span>fac<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">except</span> InputError <span class="token keyword">as</span> err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上下文语法" tabindex="-1"><a class="header-anchor" href="#上下文语法" aria-hidden="true">#</a> 上下文语法</h3><p>对于<code>open</code>函数返回的文件对象，还可以使用<code>with</code>上下文语法在文件操作完成后自动执行文件对象的<code>close</code>方法，这样可以让代码变得更加简单优雅，因为不需要再写<code>finally</code>代码块来执行关闭文件释放资源的操作。需要提醒大家的是，并不是所有的对象都可以放在<code>with</code>上下文语法中，只有符合<strong>上下文管理器协议</strong>（有<code>__enter__</code>和<code>__exit__</code>魔术方法）的对象才能使用这种语法，Python标准库中的<code>contextlib</code>模块也提供了对<code>with</code>上下文语法的支持，后面再为大家进行讲解。</p><p>用<code>with</code>上下文语法改写后的代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;致橡树.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;无法打开指定的文件!&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> LookupError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;指定了未知的编码!&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;读取文件时解码错误!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读写二进制文件" tabindex="-1"><a class="header-anchor" href="#读写二进制文件" aria-hidden="true">#</a> 读写二进制文件</h3><p>读写二进制文件跟读写文本文件的操作类似，但是需要注意，在使用<code>open</code>函数打开文件时，如果要进行读操作，操作模式是<code>&#39;rb&#39;</code>，如果要进行写操作，操作模式是<code>&#39;wb&#39;</code>。还有一点，读写文本文件时，<code>read</code>方法的返回值以及<code>write</code>方法的参数是<code>str</code>对象（字符串），而读写二进制文件时，<code>read</code>方法的返回值以及<code>write</code>方法的参数是<code>bytes-like</code>对象（字节串）。下面的代码实现了将当前路径下名为<code>guido.jpg</code>的图片文件复制到<code>吉多.jpg</code>文件中的操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;guido.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file1<span class="token punctuation">:</span>
        data <span class="token operator">=</span> file1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;吉多.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file2<span class="token punctuation">:</span>
        file2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;指定的文件无法打开.&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> IOError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;读写文件时出现错误.&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;程序执行结束.&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要复制的图片文件很大，一次将文件内容直接读入内存中可能会造成非常大的内存开销，为了减少对内存的占用，可以为<code>read</code>方法传入<code>size</code>参数来指定每次读取的字节数，通过循环读取和写入的方式来完成上面的操作，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;guido.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file1<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;吉多.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file2<span class="token punctuation">:</span>
        data <span class="token operator">=</span> file1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> data<span class="token punctuation">:</span>
            file2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
            data <span class="token operator">=</span> file1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;指定的文件无法打开.&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> IOError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;读写文件时出现错误.&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;程序执行结束.&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单的总结-16" tabindex="-1"><a class="header-anchor" href="#简单的总结-16" aria-hidden="true">#</a> 简单的总结</h3><p>通过读写文件的操作，我们可以实现数据持久化。在Python中可以通过<code>open</code>函数来获得文件对象，可以通过文件对象的<code>read</code>和<code>write</code>方法实现文件读写操作。程序在运行时可能遭遇无法预料的异常状况，可以使用Python的异常机制来处理这些状况。Python的异常机制主要包括<code>try</code>、<code>except</code>、<code>else</code>、<code>finally</code>和<code>raise</code>这五个核心关键字。<code>try</code>后面的<code>except</code>语句不是必须的，<code>finally</code>语句也不是必须的，但是二者必须要有一个；<code>except</code>语句可以有一个或多个，多个<code>except</code>会按照书写的顺序依次匹配指定的异常，如果异常已经处理就不会再进入后续的<code>except</code>语句；<code>except</code>语句中还可以通过元组同时指定多个异常类型进行捕获；<code>except</code>语句后面如果不指定异常类型，则默认捕获所有异常；捕获异常后可以使用<code>raise</code>要再次抛出，但是不建议捕获并抛出同一个异常；不建议在不清楚逻辑的情况下捕获所有异常，这可能会掩盖程序中严重的问题。最后强调一点，<strong>不要使用异常机制来处理正常业务逻辑或控制程序流程</strong>，简单的说就是不要滥用异常机制，这是初学者常犯的错误。</p><h2 id="第22课-对象的序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#第22课-对象的序列化和反序列化" aria-hidden="true">#</a> 第22课：对象的序列化和反序列化</h2><p>###JSON概述</p>`,28),Qn=n("strong",null,"实现跨语言跨平台数据交换",-1),Xn=n("strong",null,"异构系统间交换数据的事实标准",-1),$n={href:"https://www.json.org/json-zh.html",target:"_blank",rel:"noopener noreferrer"},ns=e(`<div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>{
    name: &quot;骆昊&quot;,
    age: 40,
    friends: [&quot;王大锤&quot;, &quot;白元芳&quot;],
    cars: [
        {&quot;brand&quot;: &quot;BMW&quot;, &quot;max_speed&quot;: 240},
        {&quot;brand&quot;: &quot;Benz&quot;, &quot;max_speed&quot;: 280},
        {&quot;brand&quot;: &quot;Audi&quot;, &quot;max_speed&quot;: 280}
    ]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是JSON的一个简单例子，大家可能已经注意到了，它跟Python中的字典非常类似而且支持嵌套结构，就好比Python字典中的值可以是另一个字典。我们可以尝试把下面的代码输入浏览器的控制台（对于Chrome浏览器，可以通过“更多工具”菜单找到“开发者工具”子菜单，就可以打开浏览器的控制台），浏览器的控制台提供了一个运行JavaScript代码的交互式环境（类似于Python的交互式环境），下面的代码会帮我们创建出一个JavaScript的对象，我们将其赋值给名为<code>obj</code>的变量。</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>let obj = {
    name: &quot;骆昊&quot;,
    age: 40,
    friends: [&quot;王大锤&quot;, &quot;白元芳&quot;],
    cars: [
        {&quot;brand&quot;: &quot;BMW&quot;, &quot;max_speed&quot;: 240},
        {&quot;brand&quot;: &quot;Benz&quot;, &quot;max_speed&quot;: 280},
        {&quot;brand&quot;: &quot;Audi&quot;, &quot;max_speed&quot;: 280}
    ]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250723863.png" alt="" loading="lazy"></p><p>上面的<code>obj</code>就是JavaScript中的一个对象，我们可以通过<code>obj.name</code>或<code>obj[&quot;name&quot;]</code>两种方式获取到<code>name</code>对应的值，如下图所示。可以注意到，<code>obj[&quot;name&quot;]</code>这种获取数据的方式跟Python字典通过键获取值的索引操作是完全一致的，而Python中也通过名为<code>json</code>的模块提供了字典与JSON双向转换的支持。</p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711063.png" width="85%"><p>我们在JSON中使用的数据类型（JavaScript数据类型）和Python中的数据类型也是很容易找到对应关系的，大家可以看看下面的两张表。</p><p>表1：JavaScript数据类型（值）对应的Python数据类型（值）</p><table><thead><tr><th>JSON</th><th>python</th></tr></thead><tbody><tr><td><code>object</code></td><td><code>dict</code></td></tr><tr><td><code>array</code></td><td><code>list</code></td></tr><tr><td><code>string</code></td><td><code>str</code></td></tr><tr><td><code>number </code></td><td><code>int</code> / <code>float</code></td></tr><tr><td><code>number</code> (real)</td><td><code>float</code></td></tr><tr><td><code>boolean</code> (<code>true</code> / <code>false</code>)</td><td><code>bool</code> (<code>True</code> / <code>False</code>)</td></tr><tr><td><code>null</code></td><td><code>None</code></td></tr></tbody></table><p>表2：Python数据类型（值）对应的JavaScript数据类型（值）</p><table><thead><tr><th>python</th><th>JSON</th></tr></thead><tbody><tr><td><code>dict</code></td><td><code>object</code></td></tr><tr><td><code>list</code> / <code>tuple</code></td><td><code>array</code></td></tr><tr><td><code>str</code></td><td><code>string</code></td></tr><tr><td><code>int</code> / <code>float</code></td><td><code>number</code></td></tr><tr><td><code>bool</code> （<code>True</code> / <code>False</code>）</td><td><code>boolean</code> (<code>true</code> / <code>false</code>)</td></tr><tr><td><code>None</code></td><td><code>null</code></td></tr></tbody></table><h3 id="读写json格式的数据" tabindex="-1"><a class="header-anchor" href="#读写json格式的数据" aria-hidden="true">#</a> 读写JSON格式的数据</h3><p>在Python中，如果要将字典处理成JSON格式（以字符串形式存在），可以使用<code>json</code>模块的<code>dumps</code>函数，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json

my_dict <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;骆昊&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>
    <span class="token string">&#39;friends&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;白元芳&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;cars&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">&#39;brand&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;BMW&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;max_speed&#39;</span><span class="token punctuation">:</span> <span class="token number">240</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;brand&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Audi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;max_speed&#39;</span><span class="token punctuation">:</span> <span class="token number">280</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;brand&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Benz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;max_speed&#39;</span><span class="token punctuation">:</span> <span class="token number">280</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面的代码，输出如下所示，可以注意到中文字符都是用Unicode编码显示的。</p><div class="language-JSON line-numbers-mode" data-ext="JSON"><pre class="language-JSON"><code>{&quot;name&quot;: &quot;\\u9a86\\u660a&quot;, &quot;age&quot;: 40, &quot;friends&quot;: [&quot;\\u738b\\u5927\\u9524&quot;, &quot;\\u767d\\u5143\\u82b3&quot;], &quot;cars&quot;: [{&quot;brand&quot;: &quot;BMW&quot;, &quot;max_speed&quot;: 240}, {&quot;brand&quot;: &quot;Audi&quot;, &quot;max_speed&quot;: 280}, {&quot;brand&quot;: &quot;Benz&quot;, &quot;max_speed&quot;: 280}]}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要将字典处理成JSON格式并写入文本文件，只需要将<code>dumps</code>函数换成<code>dump</code>函数并传入文件对象即可，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json

my_dict <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;骆昊&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>
    <span class="token string">&#39;friends&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;白元芳&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;cars&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token string">&#39;brand&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;BMW&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;max_speed&#39;</span><span class="token punctuation">:</span> <span class="token number">240</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;brand&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Audi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;max_speed&#39;</span><span class="token punctuation">:</span> <span class="token number">280</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token string">&#39;brand&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Benz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;max_speed&#39;</span><span class="token punctuation">:</span> <span class="token number">280</span><span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;data.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>my_dict<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的代码，会创建<code>data.json</code>文件，文件的内容跟上面代码的输出是一样的。</p><p><code>json</code>模块有四个比较重要的函数，分别是：</p><ul><li><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</li><li><code>dumps</code> - 将Python对象处理成JSON格式的字符串</li><li><code>load</code> - 将文件中的JSON数据反序列化成对象</li><li><code>loads</code> - 将字符串的内容反序列化成Python对象</li></ul>`,21),ss={href:"https://zh.wikipedia.org/",target:"_blank",rel:"noopener noreferrer"},as=e(`<p>我们可以通过下面的代码，读取上面创建的<code>data.json</code>文件，将JSON格式的数据还原成Python中的字典。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;data.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    my_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>my_dict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="包管理工具pip的使用" tabindex="-1"><a class="header-anchor" href="#包管理工具pip的使用" aria-hidden="true">#</a> 包管理工具pip的使用</h3><p>Python标准库中的<code>json</code>模块在数据序列化和反序列化时性能并不是非常理想，为了解决这个问题，可以使用三方库<code>ujson</code>来替换<code>json</code>。所谓三方库，是指非公司内部开发和使用的，也不是来自于官方标准库的Python模块，这些模块通常由其他公司、组织或个人开发，所以被称为三方库。虽然Python语言的标准库虽然已经提供了诸多模块来方便我们的开发，但是对于一个强大的语言来说，它的生态圈一定也是非常繁荣的。</p><p>之前安装Python解释器时，默认情况下已经勾选了安装pip，大家可以在命令提示符或终端中通过<code>pip --version</code>来确定是否已经拥有了pip。pip是Python的包管理工具，通过pip可以查找、安装、卸载、更新Python的三方库或工具，macOS和Linux系统应该使用pip3。例如要安装替代<code>json</code>模块的<code>ujson</code>，可以使用下面的命令。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>pip install ujson
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在默认情况下，pip会访问<code>https://pypi.org/simple/</code>来获得三方库相关的数据，但是国内访问这个网站的速度并不是十分理想，因此国内用户可以使用豆瓣网提供的镜像来替代这个默认的下载源，操作如下所示。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>pip install ujson
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以通过<code>pip search</code>命令根据名字查找需要的三方库，可以通过<code>pip list</code>命令来查看已经安装过的三方库。如果想更新某个三方库，可以使用<code>pip install -U</code>或<code>pip install --upgrade</code>；如果要删除某个三方库，可以使用<code>pip uninstall</code>命令。</p><p>搜索<code>ujson</code>三方库。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>pip search ujson

micropython-cpython-ujson (0.2)  - MicroPython module ujson ported to CPython
pycopy-cpython-ujson (0.2)       - Pycopy module ujson ported to CPython
ujson (3.0.0)                    - Ultra fast JSON encoder and decoder for python
ujson-bedframe (1.33.0)          - Ultra fast JSON encoder and decoder for python
ujson-segfault (2.1.57)          - Ultra fast JSON encoder and decoder for python. Continuing 
                                   development.
ujson-ia (2.1.1)                 - Ultra fast JSON encoder and decoder for python (Internet 
                                   Archive fork)
ujson-x (1.37)                   - Ultra fast JSON encoder and decoder for python
ujson-x-legacy (1.35.1)          - Ultra fast JSON encoder and decoder for python
drf_ujson (1.2)                  - Django Rest Framework UJSON Renderer
drf-ujson2 (1.6.1)               - Django Rest Framework UJSON Renderer
ujsonDB (0.1.0)                  - A lightweight and simple database using ujson.
fast-json (0.3.2)                - Combines best parts of json and ujson for fast serialization
decimal-monkeypatch (0.4.3)      - python 2 performance patches: decimal to cdecimal, json to 
                                   ujson for psycopg2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看已经安装的三方库。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>pip list

Package                       Version
----------------------------- ----------
aiohttp                       3.5.4
alipay                        0.7.4
altgraph                      0.16.1
amqp                          2.4.2
...							  ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新<code>ujson</code>三方库。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>pip install -U ujson
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除<code>ujson</code>三方库。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>pip uninstall -y ujson
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>提示</strong>：如果要更新<code>pip</code>自身，对于macOS系统来说，可以使用命令<code>pip install -U pip</code>。在Windows系统上，可以将命令替换为<code>python -m pip install -U --user pip</code>。</p></blockquote><h3 id="使用网络api获取数据" tabindex="-1"><a class="header-anchor" href="#使用网络api获取数据" aria-hidden="true">#</a> 使用网络API获取数据</h3>`,19),ts={href:"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE",target:"_blank",rel:"noopener noreferrer"},es={href:"http://www.ruanyifeng.com/blog/2016/08/http.html",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://www.juhe.cn/",target:"_blank",rel:"noopener noreferrer"},os={href:"http://www.avatardata.cn/",target:"_blank",rel:"noopener noreferrer"},cs={href:"http://apis.io/",target:"_blank",rel:"noopener noreferrer"},ls={href:"http://docs.python-requests.org/zh_CN/latest/",target:"_blank",rel:"noopener noreferrer"},is=n("code",null,"requests",-1),us={href:"https://www.tianapi.com/",target:"_blank",rel:"noopener noreferrer"},rs=e(`<img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711068.png" alt="image-20210820151134034" width="100%"><p>Python通过URL接入网络，我们推荐大家使用<code>requests</code>三方库，它简单且强大，但需要自行安装。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>pip install requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取国内新闻并显示新闻标题和链接。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://api.tianapi.com/guonei/?key=APIKey&amp;num=10&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> resp<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
    data_model <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> news <span class="token keyword">in</span> data_model<span class="token punctuation">[</span><span class="token string">&#39;newslist&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>news<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>news<span class="token punctuation">[</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码通过<code>requests</code>模块的<code>get</code>函数向天行数据的国内新闻接口发起了一次请求，如果请求过程没有出现问题，<code>get</code>函数会返回一个<code>Response</code>对象，通过该对象的<code>status_code</code>属性表示HTTP响应状态码，如果不理解没关系，你只需要关注它的值，如果值等于<code>200</code>或者其他<code>2</code>字头的值，那么我们的请求是成功的。通过<code>Response</code>对象的<code>json()</code>方法可以将返回的JSON格式的数据直接处理成Python字典，非常方便。天行数据国内新闻接口返回的JSON格式的数据（部分）如下图所示。</p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711089.png" width="100%"><blockquote><p><strong>提示</strong>：上面代码中的APIKey需要换成自己在天行数据网站申请的APIKey。天行数据网站上还有提供了很多非常有意思的API接口，例如：垃圾分类、周公解梦等，大家可以仿照上面的代码来调用这些接口。每个接口都有对应的接口文档，文档中有关于如何使用接口的详细说明。</p></blockquote><h3 id="简单的总结-17" tabindex="-1"><a class="header-anchor" href="#简单的总结-17" aria-hidden="true">#</a> 简单的总结</h3><p>Python中实现序列化和反序列化除了使用<code>json</code>模块之外，还可以使用<code>pickle</code>和<code>shelve</code>模块，但是这两个模块是使用特有的序列化协议来序列化数据，因此序列化后的数据只能被Python识别，关于这两个模块的相关知识，有兴趣的读者可以自己查找网络上的资料。处理JSON格式的数据很显然是程序员必须掌握的一项技能，因为不管是访问网络API接口还是提供网络API接口给他人使用，都需要具备处理JSON格式数据的相关知识。</p><h2 id="第23课-用python读写csv文件" tabindex="-1"><a class="header-anchor" href="#第23课-用python读写csv文件" aria-hidden="true">#</a> 第23课：用Python读写CSV文件</h2><h3 id="csv文件介绍" tabindex="-1"><a class="header-anchor" href="#csv文件介绍" aria-hidden="true">#</a> CSV文件介绍</h3><p>CSV（Comma Separated Values）全称逗号分隔值文件是一种简单、通用的文件格式，被广泛的应用于应用程序（数据库、电子表格等）数据的导入和导出以及异构系统之间的数据交换。因为CSV是纯文本文件，不管是什么操作系统和编程语言都是可以处理纯文本的，而且很多编程语言中都提供了对读写CSV文件的支持，因此CSV格式在数据处理和数据科学中被广泛应用。</p><p>CSV文件有以下特点：</p>`,14),ds={href:"https://zh.wikipedia.org/wiki/ASCII",target:"_blank",rel:"noopener noreferrer"},ks={href:"https://zh.wikipedia.org/wiki/Unicode",target:"_blank",rel:"noopener noreferrer"},ms={href:"https://zh.wikipedia.org/wiki/GB2312",target:"_blank",rel:"noopener noreferrer"},vs=n("li",null,"由一条条的记录组成（典型的是每行一条记录）；",-1),bs=n("li",null,"每条记录被分隔符（如逗号、分号、制表符等）分隔为字段（列）；",-1),gs=n("li",null,"每条记录都有同样的字段序列。",-1),hs=e(`<p>CSV文件可以使用文本编辑器或类似于Excel电子表格这类工具打开和编辑，当使用Excel这类电子表格打开CSV文件时，你甚至感觉不到CSV和Excel文件的区别。很多数据库系统都支持将数据导出到CSV文件中，当然也支持从CSV文件中读入数据保存到数据库中，这些内容并不是现在要讨论的重点。</p><h3 id="将数据写入csv文件" tabindex="-1"><a class="header-anchor" href="#将数据写入csv文件" aria-hidden="true">#</a> 将数据写入CSV文件</h3><p>现有五个学生三门课程的考试成绩需要保存到一个CSV文件中，要达成这个目标，可以使用Python标准库中的<code>csv</code>模块，该模块的<code>writer</code>函数会返回一个<code>csvwriter</code>对象，通过该对象的<code>writerow</code>或<code>writerows</code>方法就可以将数据写入到CSV文件中，具体的代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> csv
<span class="token keyword">import</span> random

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;scores.csv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;语文&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;数学&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;英语&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;关羽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张飞&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;赵云&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;马超&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黄忠&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>
        scores <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        scores<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>scores<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的CSV文件的内容。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>姓名,语文,数学,英语
关羽,98,86,61
张飞,86,58,80
赵云,95,73,70
马超,83,97,55
黄忠,61,54,87
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是上面的<code>writer</code>函数，除了传入要写入数据的文件对象外，还可以<code>dialect</code>参数，它表示CSV文件的方言，默认值是<code>excel</code>。除此之外，还可以通过<code>delimiter</code>、<code>quotechar</code>、<code>quoting</code>参数来指定分隔符（默认是逗号）、包围值的字符（默认是双引号）以及包围的方式。其中，包围值的字符主要用于当字段中有特殊符号时，通过添加包围值的字符可以避免二义性。大家可以尝试将上面第5行代码修改为下面的代码，然后查看生成的CSV文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">,</span> quoting<span class="token operator">=</span>csv<span class="token punctuation">.</span>QUOTE_ALL<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成的CSV文件的内容。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;姓名&quot;|&quot;语文&quot;|&quot;数学&quot;|&quot;英语&quot;
&quot;关羽&quot;|&quot;88&quot;|&quot;64&quot;|&quot;65&quot;
&quot;张飞&quot;|&quot;76&quot;|&quot;93&quot;|&quot;79&quot;
&quot;赵云&quot;|&quot;78&quot;|&quot;55&quot;|&quot;76&quot;
&quot;马超&quot;|&quot;72&quot;|&quot;77&quot;|&quot;68&quot;
&quot;黄忠&quot;|&quot;70&quot;|&quot;72&quot;|&quot;51&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从csv文件读取数据" tabindex="-1"><a class="header-anchor" href="#从csv文件读取数据" aria-hidden="true">#</a> 从CSV文件读取数据</h3><p>如果要读取刚才创建的CSV文件，可以使用下面的代码，通过<code>csv</code>模块的<code>reader</code>函数可以创建出<code>csvreader</code>对象，该对象是一个迭代器，可以通过<code>next</code>函数或<code>for-in</code>循环读取到文件中的数据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> csv

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;scores.csv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> data_list <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>line_num<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> elem <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：上面的代码对<code>csvreader</code>对象做<code>for</code>循环时，每次会取出一个列表对象，该列表对象包含了一行中所有的字段。</p></blockquote><h3 id="简单的总结-18" tabindex="-1"><a class="header-anchor" href="#简单的总结-18" aria-hidden="true">#</a> 简单的总结</h3><p>将来如果大家使用Python做数据分析，很有可能会用到名为<code>pandas</code>的三方库，它是Python数据分析的神器之一。<code>pandas</code>中封装了名为<code>read_csv</code>和<code>to_csv</code>的函数用来读写CSV文件，其中<code>read_CSV</code>会将读取到的数据变成一个<code>DataFrame</code>对象，而<code>DataFrame</code>就是<code>pandas</code>库中最重要的类型，它封装了一系列用于数据处理的方法（清洗、转换、聚合等）；而<code>to_csv</code>会将<code>DataFrame</code>对象中的数据写入CSV文件，完成数据的持久化。<code>read_csv</code>函数和<code>to</code></p><p>\`第24课：用Python读写Excel文件-1</p><h3 id="excel简介" tabindex="-1"><a class="header-anchor" href="#excel简介" aria-hidden="true">#</a> Excel简介</h3><p>Excel是Microsoft（微软）为使用Windows和macOS操作系统开发的一款电子表格软件。Excel凭借其直观的界面、出色的计算功能和图表工具，再加上成功的市场营销，一直以来都是最为流行的个人计算机数据处理软件。当然，Excel也有很多竞品，例如Google Sheets、LibreOffice Calc、Numbers等，这些竞品基本上也能够兼容Excel，至少能够读写较新版本的Excel文件，当然这些不是我们讨论的重点。掌握用Python程序操作Excel文件，可以让日常办公自动化的工作更加轻松愉快，而且在很多商业项目中，导入导出Excel文件都是特别常见的功能。</p><p>Python操作Excel需要三方库的支持，如果要兼容Excel 2007以前的版本，也就是<code>xls</code>格式的Excel文件，可以使用三方库<code>xlrd</code>和<code>xlwt</code>，前者用于读Excel文件，后者用于写Excel文件。如果使用较新版本的Excel，即操作<code>xlsx</code>格式的Excel文件，可以使用<code>openpyxl</code>库，当然这个库不仅仅可以操作Excel，还可以操作其他基于Office Open XML的电子表格文件。</p><p>本章我们先讲解基于<code>xlwt</code>和<code>xlrd</code>操作Excel文件，大家可以先使用下面的命令安装这两个三方库以及配合使用的工具模块<code>xlutils</code>。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>pip install xlwt xlrd xlutils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="读excel文件" tabindex="-1"><a class="header-anchor" href="#读excel文件" aria-hidden="true">#</a> 读Excel文件</h3><p>例如在当前文件夹下有一个名为“阿里巴巴2020年股票数据.xls”的Excel文件，如果想读取并显示该文件的内容，可以通过如下所示的代码来完成。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> xlrd

<span class="token comment"># 使用xlrd模块的open_workbook函数打开指定Excel文件并获得Book对象（工作簿）</span>
wb <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span><span class="token string">&#39;阿里巴巴2020年股票数据.xls&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 通过Book对象的sheet_names方法可以获取所有表单名称</span>
sheetnames <span class="token operator">=</span> wb<span class="token punctuation">.</span>sheet_names<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheetnames<span class="token punctuation">)</span>
<span class="token comment"># 通过指定的表单名称获取Sheet对象（工作表）</span>
sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>sheet_by_name<span class="token punctuation">(</span>sheetnames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 通过Sheet对象的nrows和ncols属性获取表单的行数和列数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>nrows<span class="token punctuation">,</span> sheet<span class="token punctuation">.</span>ncols<span class="token punctuation">)</span>
<span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>nrows<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>ncols<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 通过Sheet对象的cell方法获取指定Cell对象（单元格）</span>
        <span class="token comment"># 通过Cell对象的value属性获取单元格中的值</span>
        value <span class="token operator">=</span> sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">.</span>value
        <span class="token comment"># 对除首行外的其他行进行数据格式化处理</span>
        <span class="token keyword">if</span> row <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># 第1列的xldate类型先转成元组再格式化为“年月日”的格式</span>
            <span class="token keyword">if</span> col <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token comment"># xldate_as_tuple函数的第二个参数只有0和1两个取值</span>
                <span class="token comment"># 其中0代表以1900-01-01为基准的日期，1代表以1904-01-01为基准的日期</span>
                value <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>xldate_as_tuple<span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
                value <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">年</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">&gt;02d</span><span class="token punctuation">}</span></span><span class="token string">月</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">&gt;02d</span><span class="token punctuation">}</span></span><span class="token string">日&#39;</span></span>
            <span class="token comment"># 其他列的number类型处理成小数点后保留两位有效数字的浮点数</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                value <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 获取最后一个单元格的数据类型</span>
<span class="token comment"># 0 - 空值，1 - 字符串，2 - 数字，3 - 日期，4 - 布尔，5 - 错误</span>
last_cell_type <span class="token operator">=</span> sheet<span class="token punctuation">.</span>cell_type<span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>nrows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> sheet<span class="token punctuation">.</span>ncols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>last_cell_type<span class="token punctuation">)</span>
<span class="token comment"># 获取第一行的值（列表）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>row_values<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 获取指定行指定列范围的数据（列表）</span>
<span class="token comment"># 第一个参数代表行索引，第二个和第三个参数代表列的开始（含）和结束（不含）索引</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>row_slice<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),ys=n("strong",null,"提示",-1),ws={href:"https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g",target:"_blank",rel:"noopener noreferrer"},fs=n("code",null,"xlrd",-1),xs={href:"https://xlrd.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},qs=e(`<h3 id="写excel文件" tabindex="-1"><a class="header-anchor" href="#写excel文件" aria-hidden="true">#</a> 写Excel文件</h3><p>写入Excel文件可以通过<code>xlwt</code> 模块的<code>Workbook</code>类创建工作簿对象，通过工作簿对象的<code>add_sheet</code>方法可以添加工作表，通过工作表对象的<code>write</code>方法可以向指定单元格中写入数据，最后通过工作簿对象的<code>save</code>方法将工作簿写入到指定的文件或内存中。下面的代码实现了将<code>5</code>个学生<code>3</code>门课程的考试成绩写入Excel文件的操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token keyword">import</span> xlwt

student_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;关羽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张飞&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;赵云&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;马超&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黄忠&#39;</span><span class="token punctuation">]</span>
scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment"># 创建工作簿对象（Workbook）</span>
wb <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 创建工作表对象（Worksheet）</span>
sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">&#39;一年级二班&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 添加表头数据</span>
titles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;语文&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;数学&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;英语&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> title <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> title<span class="token punctuation">)</span>
<span class="token comment"># 将学生姓名和考试成绩写入单元格</span>
<span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> student_names<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> scores<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 保存Excel工作簿</span>
wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;考试成绩表.xls&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调整单元格样式" tabindex="-1"><a class="header-anchor" href="#调整单元格样式" aria-hidden="true">#</a> 调整单元格样式</h4><p>在写Excel文件时，我们还可以为单元格设置样式，主要包括字体（Font）、对齐方式（Alignment）、边框（Border）和背景（Background）的设置，<code>xlwt</code>对这几项设置都封装了对应的类来支持。要设置单元格样式需要首先创建一个<code>XFStyle</code>对象，再通过该对象的属性对字体、对齐方式、边框等进行设定，例如在上面的例子中，如果希望将表头单元格的背景色修改为黄色，可以按照如下的方式进行操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>header_style <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>XFStyle<span class="token punctuation">(</span><span class="token punctuation">)</span>
pattern <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Pattern<span class="token punctuation">(</span><span class="token punctuation">)</span>
pattern<span class="token punctuation">.</span>pattern <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Pattern<span class="token punctuation">.</span>SOLID_PATTERN
<span class="token comment"># 0 - 黑色、1 - 白色、2 - 红色、3 - 绿色、4 - 蓝色、5 - 黄色、6 - 粉色、7 - 青色</span>
pattern<span class="token punctuation">.</span>pattern_fore_colour <span class="token operator">=</span> <span class="token number">5</span>
header_style<span class="token punctuation">.</span>pattern <span class="token operator">=</span> pattern
titles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;语文&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;数学&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;英语&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> title <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> title<span class="token punctuation">,</span> header_style<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望为表头设置指定的字体，可以使用<code>Font</code>类并添加如下所示的代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>font <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 字体名称</span>
font<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;华文楷体&#39;</span>
<span class="token comment"># 字体大小（20是基准单位，18表示18px）</span>
font<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">18</span>
<span class="token comment"># 是否使用粗体</span>
font<span class="token punctuation">.</span>bold <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token comment"># 是否使用斜体</span>
font<span class="token punctuation">.</span>italic <span class="token operator">=</span> <span class="token boolean">False</span>
<span class="token comment"># 字体颜色</span>
font<span class="token punctuation">.</span>colour_index <span class="token operator">=</span> <span class="token number">1</span>
header_style<span class="token punctuation">.</span>font <span class="token operator">=</span> font
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：上面代码中指定的字体名（<code>font.name</code>）应当是本地系统有的字体，例如在我的电脑上有名为“华文楷体”的字体。</p></blockquote><p>如果希望表头垂直居中对齐，可以使用下面的代码进行设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>align <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Alignment<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 垂直方向的对齐方式</span>
align<span class="token punctuation">.</span>vert <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Alignment<span class="token punctuation">.</span>VERT_CENTER
<span class="token comment"># 水平方向的对齐方式</span>
align<span class="token punctuation">.</span>horz <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Alignment<span class="token punctuation">.</span>HORZ_CENTER
header_style<span class="token punctuation">.</span>alignment <span class="token operator">=</span> align
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望给表头加上黄色的虚线边框，可以使用下面的代码来设置。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>borders <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Borders<span class="token punctuation">(</span><span class="token punctuation">)</span>
props <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token string">&#39;top&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;top_colour&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;right&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;right_colour&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;bottom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bottom_colour&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;left_colour&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token comment"># 通过循环对四个方向的边框样式及颜色进行设定</span>
<span class="token keyword">for</span> position<span class="token punctuation">,</span> color <span class="token keyword">in</span> props<span class="token punctuation">:</span>
    <span class="token comment"># 使用setattr内置函数动态给对象指定的属性赋值</span>
    <span class="token builtin">setattr</span><span class="token punctuation">(</span>borders<span class="token punctuation">,</span> position<span class="token punctuation">,</span> xlwt<span class="token punctuation">.</span>Borders<span class="token punctuation">.</span>DASHED<span class="token punctuation">)</span>
    <span class="token builtin">setattr</span><span class="token punctuation">(</span>borders<span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
header_style<span class="token punctuation">.</span>borders <span class="token operator">=</span> borders
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要调整单元格的宽度（列宽）和表头的高度（行高），可以按照下面的代码进行操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 设置行高为40px</span>
sheet<span class="token punctuation">.</span>row<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>set_style<span class="token punctuation">(</span>xlwt<span class="token punctuation">.</span>easyxf<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;font:height </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">20</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
titles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;语文&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;数学&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;英语&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> title <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 设置列宽为200px</span>
    sheet<span class="token punctuation">.</span>col<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">200</span>
    <span class="token comment"># 设置单元格的数据和样式</span>
    sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> title<span class="token punctuation">,</span> header_style<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="公式计算" tabindex="-1"><a class="header-anchor" href="#公式计算" aria-hidden="true">#</a> 公式计算</h4><p>对于前面打开的“阿里巴巴2020年股票数据.xls”文件，如果要统计全年收盘价（Close字段）的平均值以及全年交易量（Volume字段）的总和，可以使用Excel的公式计算即可。我们可以先使用<code>xlrd</code>读取Excel文件夹，然后通过<code>xlutils</code>三方库提供的<code>copy</code>函数将读取到的Excel文件转成<code>Workbook</code>对象进行写操作，在调用<code>write</code>方法时，可以将一个<code>Formula</code>对象写入单元格。</p><p>实现公式计算的代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> xlrd
<span class="token keyword">import</span> xlwt
<span class="token keyword">from</span> xlutils<span class="token punctuation">.</span>copy <span class="token keyword">import</span> copy

wb_for_read <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span><span class="token string">&#39;阿里巴巴2020年股票数据.xls&#39;</span><span class="token punctuation">)</span>
sheet1 <span class="token operator">=</span> wb_for_read<span class="token punctuation">.</span>sheet_by_index<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
nrows<span class="token punctuation">,</span> ncols <span class="token operator">=</span> sheet1<span class="token punctuation">.</span>nrows<span class="token punctuation">,</span> sheet1<span class="token punctuation">.</span>ncols
wb_for_write <span class="token operator">=</span> copy<span class="token punctuation">(</span>wb_for_read<span class="token punctuation">)</span>
sheet2 <span class="token operator">=</span> wb_for_write<span class="token punctuation">.</span>get_sheet<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
sheet2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>nrows<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> xlwt<span class="token punctuation">.</span>Formula<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;average(E2:E</span><span class="token interpolation"><span class="token punctuation">{</span>nrows<span class="token punctuation">}</span></span><span class="token string">)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sheet2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>nrows<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> xlwt<span class="token punctuation">.</span>Formula<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;sum(G2:G</span><span class="token interpolation"><span class="token punctuation">{</span>nrows<span class="token punctuation">}</span></span><span class="token string">)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
wb_for_write<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;阿里巴巴2020年股票数据汇总.xls&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：上面的代码有一些小瑕疵，有兴趣的读者可以自行探索并思考如何解决。</p></blockquote><h3 id="简单的总结-19" tabindex="-1"><a class="header-anchor" href="#简单的总结-19" aria-hidden="true">#</a> 简单的总结</h3><p>掌握了Python程序操作Excel的方法，可以解决日常办公中很多繁琐的处理Excel电子表格工作，最常见就是将多个数据格式相同的Excel文件合并到一个文件以及从多个Excel文件或表单中提取指定的数据。当然，如果要对表格数据进行处理，使用Python数据分析神器之一的<code>pandas</code>库可能更为方便。</p><h2 id="第25课-用python读写excel文件-2" tabindex="-1"><a class="header-anchor" href="#第25课-用python读写excel文件-2" aria-hidden="true">#</a> 第25课：用Python读写Excel文件-2</h2><h3 id="excel简介-1" tabindex="-1"><a class="header-anchor" href="#excel简介-1" aria-hidden="true">#</a> Excel简介</h3><p>Excel是Microsoft（微软）为使用Windows和macOS操作系统开发的一款电子表格软件。Excel凭借其直观的界面、出色的计算功能和图表工具，再加上成功的市场营销，一直以来都是最为流行的个人计算机数据处理软件。当然，Excel也有很多竞品，例如Google Sheets、LibreOffice Calc、Numbers等，这些竞品基本上也能够兼容Excel，至少能够读写较新版本的Excel文件，当然这些不是我们讨论的重点。掌握用Python程序操作Excel文件，可以让日常办公自动化的工作更加轻松愉快，而且在很多商业项目中，导入导出Excel文件都是特别常见的功能。</p><p>本章我们继续讲解基于另一个三方库<code>openpyxl</code>如何进行Excel文件操作，首先需要先安装它。</p><div class="language-Bash line-numbers-mode" data-ext="Bash"><pre class="language-Bash"><code>pip install openpyxl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>openpyxl</code>的优点在于，当我们打开一个Excel文件后，既可以对它进行读操作，又可以对它进行写操作，而且在操作的便捷性上是优于<code>xlwt</code>和<code>xlrd</code>的。此外，如果要进行样式编辑和公式计算，使用<code>openpyxl</code>也远比上一个章节我们讲解的方式更为简单，而且<code>openpyxl</code>还支持数据透视和插入图表等操作，功能非常强大。有一点需要再次强调，<code>openpyxl</code>并不支持操作Office 2007以前版本的Excel文件。</p><h3 id="读取excel文件" tabindex="-1"><a class="header-anchor" href="#读取excel文件" aria-hidden="true">#</a> 读取Excel文件</h3><p>例如在当前文件夹下有一个名为“阿里巴巴2020年股票数据.xlsx”的Excel文件，如果想读取并显示该文件的内容，可以通过如下所示的代码来完成。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> datetime

<span class="token keyword">import</span> openpyxl

<span class="token comment"># 加载一个工作簿 ---&gt; Workbook</span>
wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">&#39;阿里巴巴2020年股票数据.xlsx&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 获取工作表的名字</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>wb<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>
<span class="token comment"># 获取工作表 ---&gt; Worksheet</span>
sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>worksheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment"># 获得单元格的范围</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>dimensions<span class="token punctuation">)</span>
<span class="token comment"># 获得行数和列数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">,</span> sheet<span class="token punctuation">.</span>max_column<span class="token punctuation">)</span>

<span class="token comment"># 获取指定单元格的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">[</span><span class="token string">&#39;C3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">[</span><span class="token string">&#39;G255&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>

<span class="token comment"># 获取多个单元格（嵌套元组）</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">[</span><span class="token string">&#39;A2:C5&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 读取所有单元格的数据</span>
<span class="token keyword">for</span> row_ch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> sheet<span class="token punctuation">.</span>max_row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> col_ch <span class="token keyword">in</span> <span class="token string">&#39;ABCDEFG&#39;</span><span class="token punctuation">:</span>
        value <span class="token operator">=</span> sheet<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>col_ch<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>row_ch<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>value
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%Y年%m月%d日&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token format-spec">&lt;10d</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token builtin">type</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),_s=n("strong",null,"提示",-1),Ps={href:"https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g",target:"_blank",rel:"noopener noreferrer"},Es=e(`<p>需要提醒大家一点，<code>openpyxl</code>获取指定的单元格有两种方式，一种是通过<code>cell</code>方法，需要注意，该方法的行索引和列索引都是从<code>1</code>开始的，这是为了照顾用惯了Excel的人的习惯；另一种是通过索引运算，通过指定单元格的坐标，例如<code>C3</code>、<code>G255</code>，也可以取得对应的单元格，再通过单元格对象的<code>value</code>属性，就可以获取到单元格的值。通过上面的代码，相信大家还注意到了，可以通过类似<code>sheet[&#39;A2:C5&#39;]</code>或<code>sheet[&#39;A2&#39;:&#39;C5&#39;]</code>这样的切片操作获取多个单元格，该操作将返回嵌套的元组，相当于获取到了多行多列。</p><h3 id="写excel文件-1" tabindex="-1"><a class="header-anchor" href="#写excel文件-1" aria-hidden="true">#</a> 写Excel文件</h3><p>下面我们使用<code>openpyxl</code>来进行写Excel操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token keyword">import</span> openpyxl

<span class="token comment"># 第一步：创建工作簿（Workbook）</span>
wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 第二步：添加工作表（Worksheet）</span>
sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>active
sheet<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;期末成绩&#39;</span>

titles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;语文&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;数学&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;英语&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> col_index<span class="token punctuation">,</span> title <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> col_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>

names <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;关羽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张飞&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;赵云&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;马超&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黄忠&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> row_index<span class="token punctuation">,</span> name <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row_index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token keyword">for</span> col_index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row_index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> col_index<span class="token punctuation">,</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 第四步：保存工作簿</span>
wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;考试成绩表.xlsx&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调整样式和公式计算" tabindex="-1"><a class="header-anchor" href="#调整样式和公式计算" aria-hidden="true">#</a> 调整样式和公式计算</h4>`,5),Ss=n("code",null,"openpyxl",-1),Cs=n("code",null,"Cell",-1),Bs=n("code",null,"font",-1),js=n("code",null,"alignment",-1),Ts=n("code",null,"border",-1),zs=n("code",null,"openpyxl",-1),As={href:"https://openpyxl.readthedocs.io/en/stable/index.html",target:"_blank",rel:"noopener noreferrer"},Ns=n("code",null,"openpyxl",-1),Fs=e(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> openpyxl
<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Font<span class="token punctuation">,</span> Alignment<span class="token punctuation">,</span> Border<span class="token punctuation">,</span> Side

<span class="token comment"># 对齐方式</span>
alignment <span class="token operator">=</span> Alignment<span class="token punctuation">(</span>horizontal<span class="token operator">=</span><span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span> vertical<span class="token operator">=</span><span class="token string">&#39;center&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 边框线条</span>
side <span class="token operator">=</span> Side<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">&#39;ff7f50&#39;</span><span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token string">&#39;mediumDashed&#39;</span><span class="token punctuation">)</span>

wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">&#39;考试成绩表.xlsx&#39;</span><span class="token punctuation">)</span>
sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>worksheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># 调整行高和列宽</span>
sheet<span class="token punctuation">.</span>row_dimensions<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">30</span>
sheet<span class="token punctuation">.</span>column_dimensions<span class="token punctuation">[</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">120</span>

sheet<span class="token punctuation">[</span><span class="token string">&#39;E1&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;平均分&#39;</span>
<span class="token comment"># 设置字体</span>
sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>font <span class="token operator">=</span> Font<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> bold<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;ff1493&#39;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;华文楷体&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 设置对齐方式</span>
sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> alignment
<span class="token comment"># 设置单元格边框</span>
sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>border <span class="token operator">=</span> Border<span class="token punctuation">(</span>left<span class="token operator">=</span>side<span class="token punctuation">,</span> top<span class="token operator">=</span>side<span class="token punctuation">,</span> right<span class="token operator">=</span>side<span class="token punctuation">,</span> bottom<span class="token operator">=</span>side<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 公式计算每个学生的平均分</span>
    sheet<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&#39;E</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;=average(B</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">:D</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">)&#39;</span></span>
    sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>font <span class="token operator">=</span> Font<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;4169e1&#39;</span><span class="token punctuation">,</span> italic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> alignment

wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;考试成绩表.xlsx&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成统计图表" tabindex="-1"><a class="header-anchor" href="#生成统计图表" aria-hidden="true">#</a> 生成统计图表</h3><p>通过<code>openpyxl</code>库，可以直接向Excel中插入统计图表，具体的做法跟在Excel中插入图表大体一致。我们可以创建指定类型的图表对象，然后通过该对象的属性对图表进行设置。当然，最为重要的是为图表绑定数据，即横轴代表什么，纵轴代表什么，具体的数值是多少。最后，可以将图表对象添加到表单中，具体的代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook
<span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>chart <span class="token keyword">import</span> BarChart<span class="token punctuation">,</span> Reference

wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span>write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token punctuation">)</span>

rows <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&#39;类别&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;销售A组&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;销售B组&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;手机&#39;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;平板&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;笔记本&#39;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;外围设备&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment"># 向表单中添加行</span>
<span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>
    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>

<span class="token comment"># 创建图表对象</span>
chart <span class="token operator">=</span> BarChart<span class="token punctuation">(</span><span class="token punctuation">)</span>
chart<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">&#39;col&#39;</span>
chart<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token number">10</span>
<span class="token comment"># 设置图表的标题</span>
chart<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;销售统计图&#39;</span>
<span class="token comment"># 设置图表纵轴的标题</span>
chart<span class="token punctuation">.</span>y_axis<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;销量&#39;</span>
<span class="token comment"># 设置图表横轴的标题</span>
chart<span class="token punctuation">.</span>x_axis<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;商品类别&#39;</span>
<span class="token comment"># 设置数据的范围</span>
data <span class="token operator">=</span> Reference<span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> min_row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> max_col<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment"># 设置分类的范围</span>
cats <span class="token operator">=</span> Reference<span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> min_col<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> min_row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> max_row<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment"># 给图表添加数据</span>
chart<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span>data<span class="token punctuation">,</span> titles_from_data<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token comment"># 给图表设置分类</span>
chart<span class="token punctuation">.</span>set_categories<span class="token punctuation">(</span>cats<span class="token punctuation">)</span>
chart<span class="token punctuation">.</span>shape <span class="token operator">=</span> <span class="token number">4</span>
<span class="token comment"># 将图表添加到表单指定的单元格中</span>
sheet<span class="token punctuation">.</span>add_chart<span class="token punctuation">(</span>chart<span class="token punctuation">,</span> <span class="token string">&#39;A10&#39;</span><span class="token punctuation">)</span>

wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">&#39;demo.xlsx&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面的代码，打开生成的Excel文件，效果如下图所示。</p><img src="https://cdn.jsdelivr.net/gh/xiaou61/pictures/202307250711905.png" alt="image-20210819235009026" width="75%"><h3 id="简单的总结-20" tabindex="-1"><a class="header-anchor" href="#简单的总结-20" aria-hidden="true">#</a> 简单的总结</h3><p>掌握了Python程序操作Excel的方法，可以解决日常办公中很多繁琐的处理Excel电子表格工作，最常见就是将多个数据格式相同的Excel文件合并到一个文件以及从多个Excel文件或表单中提取指定的数据。如果数据体量较大或者处理数据的方式比较复杂，我们还是推荐大家使用Python数据分析神器之一的<code>pandas</code>库。<code>_csv</code>函数远远比原生的<code>csvreader</code>和<code>csvwriter</code>强大。</p>`,8);function Is(Os,Ms){const a=l("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("可以在"),n("a",r,[s("Python官方网站"),t(a)]),s("找到下载链接并下载Python 3的安装程序。")]),d,n("blockquote",null,[n("p",null,[k,s("：如果安装过程显示安装失败或执行上面的命令报错，很有可能是因为你的Windows系统缺失了一些动态链接库文件或C构建工具导致的问题。可以在"),n("a",m,[s("微软官网"),t(a)]),s("下载Visual C++ Redistributable for Visual Studio 2015文件进行修复，64位的系统需要下载有x64标记的安装文件。也可以通过下面的百度云盘地址获取修复工具，运行修复工具，按照如下图所示的方式进行修复，链接: "),n("a",v,[s("https://pan.baidu.com/s/1iNDnU5UVdDX5sKFqsiDg5Q"),t(a)]),s(" 提取码: cjs3。")]),b]),g,h,n("p",null,[s("macOS自带了Python 2，但是我们需要安装和使用的是Python 3。可以通过Python官方网站提供的"),n("a",y,[s("下载链接"),t(a)]),s("找到适合macOS的“macOS installer”来安装Python 3，安装过程基本不需要做任何勾选，直接点击“下一步”即可。安装完成后，可以在macOS的“终端”工具中输入"),w,s("命令来调用Python 3解释器，因为如果直接输入"),f,s("，将会调用Python 2的解释器。")]),x,n("p",null,[s("Visual Studio Code（通常简称为VSCode）是一个由微软开发能够在Windows、 Linux和macOS等操作系统上运行的代码编辑神器。它支持语法高亮、自动补全、多点编辑、运行调试等一系列便捷功能，而且能够支持多种编程语言。如果大家要选择一款高级文本编辑工具，强烈建议使用VSCode。关于VSCode的"),n("a",q,[s("下载"),t(a)]),s("、安装和使用，推荐大家阅读一篇名为"),n("a",_,[s("《VScode安装使用》"),t(a)]),s("的文章。")]),P,n("p",null,[s("如果用Python开发商业项目，我们推荐大家使用更为专业的工具PyCharm。PyCharm是由捷克一家名为"),n("a",E,[s("JetBrains"),t(a)]),s("的公司开发的用于Python项目开发的集成开发环境（IDE)。所谓集成开发环境，通常是指工具中提供了编写代码、运行代码、调试代码、分析代码、版本控制等一系列功能，因此特别适合商业项目的开发。在JetBrains的官方网站上提供了PyCharm的"),n("a",S,[s("下载链接"),t(a)]),s("，其中社区版（Community）是免费的但功能相对弱小（其实已经足够强大了），专业版（Professional）功能非常强大，但需要按年或月付费使用，新用户可以试用30天时间。")]),C,n("p",B,[n("span",j,[n("span",T,[z,n("span",A,[N,n("span",F,[I,n("span",O,[n("span",M,[n("span",J,[n("span",G,[n("span",L,[n("span",D,[R,n("span",W,[V,n("span",U,[(p(),o("svg",H,Z))])]),Y,n("span",Q,[X,n("span",$,[(p(),o("svg",nn,an))])]),tn]),en]),pn])])]),on])])])])])]),cn,n("blockquote",null,[n("p",null,[ln,s(" 大家可以自己感受和评判一下这两种写法到底是哪一种更好。在"),n("a",un,[rn,t(a)]),s("中有这么一句话：“"),dn,s("”，之所以提倡代码“扁平化”，是因为代码嵌套的层次如果很多，会严重的影响代码的可读性，所以使用更为扁平化的结构在很多场景下都是较好的选择。")])]),kn,n("blockquote",null,[n("p",null,[mn,s(" 上面通过边长计算三角形面积的公式叫做"),n("a",vn,[s("海伦公式"),t(a)]),s("。")])]),bn,n("blockquote",null,[n("p",null,[gn,s("：百钱百鸡是我国古代数学家"),n("a",hn,[s("张丘建"),t(a)]),s("在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？")])]),yn,n("p",null,[s("我们不去过多的解释为什么会出现这样的问题，如果想深入研究这个问题，可以通过"),n("a",wn,[s("python Tutor"),t(a)]),s("网站的可视化代码执行功能，看看创建列表时计算机内存中发生了怎样的变化，下面的图就是在这个网站上生成的。建议大家不去纠结这个问题，现阶段只需要记住不能用"),fn,s("这种方式来创建嵌套列表就行了。那么创建嵌套列表的正确做法是什么呢，下面的代码会给你答案。")]),xn,qn,n("p",null,[s("在Python程序中，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。字符串中的字符可以是特殊符号、英文字母、中文字符、日文的平假名或片假名、希腊字母、"),n("a",_n,[s("Emoji字符"),t(a)]),s("等。")]),Pn,En,Sn,Cn,Bn,jn,Tn,zn,n("p",null,[s("关于Base64编码的细节，大家可以参考"),n("a",An,[s("《Base64笔记》"),t(a)]),s("一文，Python标准库中的"),Nn,s("模块提供了"),Fn,s("和"),In,s("两个函数，专门用于实现Base64的编码和解码，下面演示了在"),On,s("中执行这两个函数的效果。")]),Mn,Jn,Gn,n("p",null,[s("哈希函数又称哈希算法或散列函数，是一种为已有的数据创建“数字指纹”（哈希摘要）的方法。哈希函数把数据压缩成摘要，对于相同的输入，哈希函数可以生成相同的摘要（数字指纹），需要注意的是这个过程并不可逆（不能通过摘要计算出输入的内容）。一个优质的哈希函数能够为不同的输入生成不同的摘要，出现哈希冲突（不同的输入产生相同的摘要）的概率极低，"),n("a",Ln,[s("MD5"),t(a)]),s("、"),Dn,s("就是这类好的哈希函数。")]),Rn,n("p",null,[s("在使用"),Wn,s("函数时，如果打开的文件是字符文件（文本文件），可以通过"),Vn,s("参数来指定读写文件使用的字符编码。如果对字符编码和字符集这些概念不了解，可以看看"),n("a",Un,[s("《字符集和字符编码》"),t(a)]),s("一文，此处不再进行赘述。")]),Hn,n("blockquote",null,[n("p",null,[Kn,s("："),n("a",Zn,[s("《致橡树》"),t(a)]),s("是舒婷老师在1977年3月创建的爱情诗，也是我最喜欢的现代诗之一。")])]),Yn,n("p",null,[s("通过上面的讲解，我们已经知道如何将文本数据和二进制数据保存到文件中，那么这里还有一个问题，如果希望把一个列表或者一个字典中的数据保存到文件中又该怎么做呢？在Python中，我们可以将程序中的数据以JSON格式进行保存。JSON是“JavaScript Object Notation”的缩写，它本来是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于跨语言跨平台的数据交换。使用JSON的原因非常简单，因为它结构紧凑而且是纯文本，任何操作系统和编程语言都能处理纯文本，这就是"),Qn,s("的前提条件。目前JSON基本上已经取代了XML（可扩展标记语言）作为"),Xn,s("。可以在"),n("a",$n,[s("JSON的官方网站"),t(a)]),s("找到更多关于JSON的知识，这个网站还提供了每种语言处理JSON数据格式可以使用的工具或三方库。")]),ns,n("p",null,[s("这里出现了两个概念，一个叫序列化，一个叫反序列化，"),n("a",ss,[s("维基百科"),t(a)]),s("上的解释是：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。")]),as,n("p",null,[s("如果想在我们自己的程序中显示天气、路况、航班等信息，这些信息我们自己没有能力提供，所以必须使用网络数据服务。目前绝大多数的网络数据服务（或称之为网络API）都是基于"),n("a",ts,[s("HTTP"),t(a)]),s("或HTTPS提供JSON格式的数据，我们可以通过Python程序发送HTTP请求给指定的URL（统一资源定位符），这个URL就是所谓的网络API，如果请求成功，它会返回HTTP响应，而HTTP响应的消息体中就有我们需要的JSON格式的数据。关于HTTP的相关知识，可以看看阮一峰的"),n("a",es,[s("《HTTP协议入门》"),t(a)]),s("一文。")]),n("p",null,[s("国内有很多提供网络API接口的网站，例如"),n("a",ps,[s("聚合数据"),t(a)]),s("、"),n("a",os,[s("阿凡达数据"),t(a)]),s("等，这些网站上有免费的和付费的数据接口，国外的"),n("a",cs,[s("{API}Search"),t(a)]),s("网站也提供了类似的功能，有兴趣的可以自行研究。下面的例子演示了如何使用"),n("a",ls,[is,t(a)]),s("库（基于HTTP进行网络资源访问的三方库）访问网络API获取国内新闻并显示新闻标题和链接。在这个例子中，我们使用了名为"),n("a",us,[s("天行数据"),t(a)]),s("的网站提供的国内新闻数据接口，其中的APIKey需要自己到网站上注册申请。在天行数据网站注册账号后会自动分配APIKey，但是要访问接口获取数据，需要绑定验证邮箱或手机，然后还要申请需要使用的接口，如下图所示。")]),rs,n("ol",null,[n("li",null,[s("纯文本，使用某种字符集（如"),n("a",ds,[s("ASCII"),t(a)]),s("、"),n("a",ks,[s("Unicode"),t(a)]),s("、"),n("a",ms,[s("GB2312"),t(a)]),s("）等）；")]),vs,bs,gs]),hs,n("blockquote",null,[n("p",null,[ys,s("：上面代码中使用的Excel文件“阿里巴巴2020年股票数据.xls”可以通过后面的百度云盘地址进行获取。链接:"),n("a",ws,[s("https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g"),t(a)]),s(" 提取码:e7b4。")])]),n("p",null,[s("相信通过上面的代码，大家已经了解到了如何读取一个Excel文件，如果想知道更多关于"),fs,s("模块的知识，可以阅读它的"),n("a",xs,[s("官方文档"),t(a)]),s("。")]),qs,n("blockquote",null,[n("p",null,[_s,s("：上面代码中使用的Excel文件“阿里巴巴2020年股票数据.xlsx”可以通过后面的百度云盘地址进行获取。链接:"),n("a",Ps,[s("https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g"),t(a)]),s(" 提取码:e7b4。")])]),Es,n("p",null,[s("在使用"),Ss,s("操作Excel时，如果要调整单元格的样式，可以直接通过单元格对象（"),Cs,s("对象）的属性进行操作。单元格对象的属性包括字体（"),Bs,s("）、对齐（"),js,s("）、边框（"),Ts,s("）等，具体的可以参考"),zs,s("的"),n("a",As,[s("官方文档"),t(a)]),s("。在使用"),Ns,s("时，如果需要做公式计算，可以完全按照Excel中的操作方式来进行，具体的代码如下所示。")]),Fs])}const Ls=c(i,[["render",Is],["__file","python-50-up.html.vue"]]);export{Ls as default};
