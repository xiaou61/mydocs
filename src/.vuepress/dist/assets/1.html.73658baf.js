import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.c5b3201b.js";const t={},p=e(`<p>根据这些 JS 运算符执行的操作类型，我们可以将它们分为七组：</p><ul><li>算数运算符</li><li>赋值运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>三元运算符</li><li>运算符的类型</li><li>按位运算符</li></ul><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h2><p>算术运算符用于执行数学运算，如加法和减法。</p><p>这些运算符经常与数字数据类型一起使用，因此它们类似于计算器。下面的示例演示如何使用运算符将两个变量相加：<code>+</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以直接对值使用运算符，而无需将它们分配给任何变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaScript 中，我们总共有 8 个算术运算符。它们是：</p><ol><li>加法<code>+</code></li><li>减法<code>-</code></li><li>乘法<code>*</code></li><li>除法<code>/</code></li><li>取余<code>%</code></li><li>幂<code>**</code></li><li>增加<code>++</code></li><li>递减<code>--</code></li></ol><p>我们可以混合这些运算符来执行复杂的数学方程。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>JavaScript 中的运算顺序与数学中的操作顺序相同。乘法、除法和幂的优先级高于加法或减法</p><p>可以使用括号更改操作的顺序。包装要首先执行的操作，如下所示：<code>()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将递增或递减运算符与其他运算符一起使用时，需要将运算符放在前缀位置，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 + 6 = 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们尝试一些练习。你能猜出这些操作的结果吗？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在基本赋值运算符之后，还有 5 个赋值运算符将数学运算与赋值相结合。这些运算符可用于使代码干净而简短。</p><p>例如，假设您要将变量递增 2。以下是使用基本赋值运算符执行此操作的方法：<code>x</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码没有任何问题，但您可以使用加法赋值重写第二行，如下所示：<code>+=</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以在 JavaScript 中使用 7 种赋值运算符：</p><table><thead><tr><th style="text-align:left;">名字</th><th style="text-align:left;">操作示例</th><th style="text-align:left;">意义</th></tr></thead><tbody><tr><td style="text-align:left;">分配</td><td style="text-align:left;"><code>x = y</code></td><td style="text-align:left;"><code>x = y</code></td></tr><tr><td style="text-align:left;">加法分配</td><td style="text-align:left;"><code>x += y</code></td><td style="text-align:left;"><code>x = x + y</code></td></tr><tr><td style="text-align:left;">减法分配</td><td style="text-align:left;"><code>x -= y</code></td><td style="text-align:left;"><code>x = x - y</code></td></tr><tr><td style="text-align:left;">乘法赋值</td><td style="text-align:left;"><code>x *= y</code></td><td style="text-align:left;"><code>x = x * y</code></td></tr><tr><td style="text-align:left;">除法分配</td><td style="text-align:left;"><code>x /= y</code></td><td style="text-align:left;"><code>x = x / y</code></td></tr><tr><td style="text-align:left;">余数分配</td><td style="text-align:left;"><code>x %= y</code></td><td style="text-align:left;"><code>x = x % y</code></td></tr><tr><td style="text-align:left;">幂赋值</td><td style="text-align:left;"><code>x **= y</code></td><td style="text-align:left;"><code>x = x ** y</code></td></tr></tbody></table><p>让我们快速练习一下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

x <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

x <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

x <span class="token operator">%=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h2><p>顾名思义，比较运算符用于将一个值或变量与其他值或变量进行比较。此类别中的运算符始终返回布尔值：要么 <code>true</code> 要么<code>false</code></p><p>例如，假设您要比较变量的值是否大于 1。你可以通过下面的方法进行判断：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>avaScript 中有 8 种比较运算符可用：</p><table><thead><tr><th style="text-align:left;">名字</th><th style="text-align:left;">操作示例</th><th style="text-align:left;">意义</th></tr></thead><tbody><tr><td style="text-align:left;">等于</td><td style="text-align:left;"><code>x == y</code></td><td style="text-align:left;">如果操作数相等则返回<code>true</code></td></tr><tr><td style="text-align:left;">不等于</td><td style="text-align:left;"><code>x != y</code></td><td style="text-align:left;">如果操作数不相等，则返回<code>true</code></td></tr><tr><td style="text-align:left;">严格等于</td><td style="text-align:left;"><code>x === y</code></td><td style="text-align:left;">如果操作数相等且类型相同，则返回<code>true</code></td></tr><tr><td style="text-align:left;">严格不等于</td><td style="text-align:left;"><code>x !== y</code></td><td style="text-align:left;">如果操作数不相等或具有不同的类型，则返回<code>true</code></td></tr><tr><td style="text-align:left;">大于</td><td style="text-align:left;"><code>x &gt; y</code></td><td style="text-align:left;">如果左操作数大于右操作数，则返回<code>true</code></td></tr><tr><td style="text-align:left;">大于或等于</td><td style="text-align:left;"><code>x &gt;= y</code></td><td style="text-align:left;">如果左操作数大于或等于右操作数，则返回<code>true</code></td></tr><tr><td style="text-align:left;">小于</td><td style="text-align:left;"><code>x &lt; y</code></td><td style="text-align:left;">如果左操作数小于右操作数，则返回<code>true</code></td></tr><tr><td style="text-align:left;">小于或等于</td><td style="text-align:left;"><code>x &lt;= y</code></td><td style="text-align:left;">如果左操作数小于或等于右操作数，则返回<code>true</code></td></tr></tbody></table><p>以下是使用比较运算符的一些示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">!=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较运算符进一步分为两种类型：关系运算符和相等运算符。</p><p>关系运算符比较一个操作数相对于第二个操作数的值（大于、小于）</p><p>相等运算符检查左侧的值是否等于右侧的值。它们还可用于比较如下所示的字符串：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ABC&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ABC&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Z&quot;</span> <span class="token operator">!=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串比较区分大小写，如上例所示。</p><p>在严格模式下，JavaScript 将比较值而不执行类型强制。要启用严格模式，您需要在操作中添加一个相等符号，如下所示：<code>=</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;9&quot;</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token comment">// strict equal</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;9&quot;</span> <span class="token operator">===</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">// strict not equal</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于类型强制可能导致不需要的行为，因此在执行相等比较时应使用严格的相等运算符。</p><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><p>JavaScript 中有三个可用的逻辑运算符：</p><table><thead><tr><th style="text-align:left;">名字</th><th style="text-align:left;">操作示例</th><th style="text-align:left;">意义</th></tr></thead><tbody><tr><td style="text-align:left;">逻辑和</td><td style="text-align:left;"><code>x &amp;&amp; y</code></td><td style="text-align:left;">如果所有操作数都是 ，则返回 ，否则返回<code>true\`\`true\`\`false</code></td></tr><tr><td style="text-align:left;">逻辑或</td><td style="text-align:left;">\`x</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">逻辑不是</td><td style="text-align:left;"><code>!x</code></td><td style="text-align:left;">反转结果：返回 if 反之亦然<code>true\`\`false</code></td></tr></tbody></table><p>这些运算符只能返回布尔值。例如，您可以确定“7 是否大于 2”和“5 大于 4”：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些逻辑运算符遵循数理逻辑定律：</p><ol><li><code>&amp;&amp;</code>AND 运算符 – 如果任何表达式返回false，则结果为false</li><li><code>||</code>OR 运算符 – 如果任何表达式返回true，则结果为true</li><li><code>!</code>NOT 运算符 – 否定表达式，返回相反的表达式。</li></ol><p>我们来看下面的语句，你能看出来结果吗</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a> 三元运算符</h2><p>假设您需要在代码中实现一些特定的逻辑。假设你开了一家卖水果的商店。当总购买量为 3 美元或更多时，您可以享受 20 元的折扣。否则，您提供 1 元的折扣。</p><p>您可以使用语句实现逻辑，如下所示：<code>if..else</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> totalPurchase <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> discount<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>totalPurchase <span class="token operator">&gt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  discount <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  discount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码工作正常，但您可以使用三元运算符使代码更短、更简洁，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> totalPurchase <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> discount <span class="token operator">=</span> totalPurchase <span class="token operator">&gt;=</span> <span class="token number">20</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h2><p>下面是使用运算符的一些示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span> <span class="token comment">//  &#39;number&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&quot;Nathan&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;string&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// &#39;boolean&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// &#39;object&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &#39;object&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// &#39;object&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// &#39;undefined&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="按位运算符" tabindex="-1"><a class="header-anchor" href="#按位运算符" aria-hidden="true">#</a> 按位运算符</h2><p>按位运算符是将其操作数视为一组二进制数字，但将运算结果作为十进制值返回的运算符</p><p>JavaScript 中有 7 种类型的按位运算符：</p><ol><li>和<code>&amp;</code></li><li>或<code>|</code></li><li>异或<code>^</code></li><li>不<code>~</code></li><li>左移<code>&lt;&lt;</code></li><li>右移<code>&gt;&gt;</code></li><li>零填充右移<code>&gt;&gt;&gt;</code></li></ol><h3 id="_1-按位-and-运算符" tabindex="-1"><a class="header-anchor" href="#_1-按位-and-运算符" aria-hidden="true">#</a> 1. 按位 AND 运算符</h3><p>当数字 1 在两个操作数中重叠时，按位运算符 AND 返回 1。十进制数字 1 和 2 没有重叠的 1，因此在数字上使用此运算符返回 0：<code>&amp;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1 = 00000001</span>
<span class="token comment">// 2 = 00000010</span>
<span class="token comment">// ------------</span>
<span class="token comment">//     00000000 = 0</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-按位-or-运算符" tabindex="-1"><a class="header-anchor" href="#_2-按位-or-运算符" aria-hidden="true">#</a> 2. 按位 OR 运算符</h3><p>另一方面，按位运算符 OR 返回两个十进制数字中的所有 1。<code>|</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1 = 00000001</span>
<span class="token comment">// 2 = 00000010</span>
<span class="token comment">// ------------</span>
<span class="token comment">//     00000011 = 3</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二进制数00000011表示十进制数 3，因此上面的 OR 运算符返回 3。</p><h3 id="按位异或运算符" tabindex="-1"><a class="header-anchor" href="#按位异或运算符" aria-hidden="true">#</a> 按位异或运算符</h3><p>按位 XOR 查找两个二进制数之间的差异。当相应的位相同时，它返回 0：<code>^</code></p><p>5 = 00000101</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 5 = 00000101</span>
<span class="token comment">// 7 = 00000111</span>
<span class="token comment">// ------------</span>
<span class="token comment">//     00000010 = 2</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">^</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按位非运算符" tabindex="-1"><a class="header-anchor" href="#按位非运算符" aria-hidden="true">#</a> 按位非运算符</h3><p>按位 NOT 运算符反转十进制数的位，因此 0 变为 1，1 变为 0：<code>~</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 5 = 00000101</span>
<span class="token comment">// ------------</span>
<span class="token comment">//     11111010 = -6</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按位左移运算符" tabindex="-1"><a class="header-anchor" href="#按位左移运算符" aria-hidden="true">#</a> 按位左移运算符</h3><p>按位左移通过从右侧添加零来移动位的位置。<code>&lt;&lt;</code></p><p>然后丢弃多余的位，更改由位表示的十进制数。请参阅以下示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5 = 00000101</span>
<span class="token comment">// ------------ &lt;&lt; Shift to the left by 2</span>
<span class="token comment">//     00010100 = 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>右操作数是要添加到左操作数的零数。</p><h3 id="按位右移运算符" tabindex="-1"><a class="header-anchor" href="#按位右移运算符" aria-hidden="true">#</a> 按位右移运算符</h3><p>按位右移通过从左侧添加零来移动位的位置。它与左移运算符相反：<code>&gt;&gt;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// 5 = 00000101</span>
<span class="token comment">// ------------ &gt;&gt; Shift to the right by 2</span>
<span class="token comment">//     00000001 = 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="按位零填充右移运算符" tabindex="-1"><a class="header-anchor" href="#按位零填充右移运算符" aria-hidden="true">#</a> 按位零填充右移运算符</h3><p>也称为无符号右移运算符，零填充右移运算符用于将位的位置向右移动，同时将符号位更改为 。<code>&gt;&gt;&gt;\`\`0</code></p><p>此运算符将任何负数转换为正数，因此您可以看到将负数作为左操作数传递时它是如何工作的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">70</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -35</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">70</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2147483613</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,94),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","1.html.vue"]]);export{r as default};
